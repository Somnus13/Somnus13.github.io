<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>那些踩屎的经历</title>
  
  <subtitle>修煉中..</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://somnus13.github.io/"/>
  <updated>2018-12-31T09:17:05.813Z</updated>
  <id>https://somnus13.github.io/</id>
  
  <author>
    <name>Somnus13</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>原型、原型链笔记</title>
    <link href="https://somnus13.github.io/2018/12/31/prototype-chain/"/>
    <id>https://somnus13.github.io/2018/12/31/prototype-chain/</id>
    <published>2018-12-31T09:09:46.000Z</published>
    <updated>2018-12-31T09:17:05.813Z</updated>
    
    <content type="html"><![CDATA[<p><strong>解释：</strong>为了共享多个对象间的一些共有特征（属性或方法）</p><p>JavaScript 中的对象，都存在一个内置属性<code>[[prototype]]</code>也做 <code>__proto__</code>，指向这个对象的原型对象</p><p>js 中查找一个属性或方法，如果当前对象无定义会继续查找当前对象的原型对象，如果仍未找到，会继续查找原型对象的原型。如此直至最顶层的原型对象，如果仍未找到返回 undefined</p><p>最顶层的原型对象 为 <code>Object.prototype</code>, 里面保存了最常用的 toString、valueOf、hasOwnProperty 等方法，故任何对象都可以开箱即用。</p><h2 id="创建对象的三种方式"><a href="#创建对象的三种方式" class="headerlink" title="创建对象的三种方式"></a>创建对象的三种方式</h2><h3 id="1-字面量方式"><a href="#1-字面量方式" class="headerlink" title="1. 字面量方式"></a>1. 字面量方式</h3><p>字面量方式创建对象，它的原型就是 Object.prototype</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">obj.__proto__ === <span class="built_in">Object</span>.prototype <span class="comment">// true</span></div></pre></td></tr></table></figure><h3 id="2-函数构造调用"><a href="#2-函数构造调用" class="headerlink" title="2. 函数构造调用"></a>2. 函数构造调用</h3><p>Js 在定义一个函数时，同时为这个函数定义了一个默认的 <code>prototype</code> 属性, 所有的共享的属性或方法都被放到这个属性指向的对象中。</p><p>由此看出，通过一个函数的构造调用创建的对象，它的原型就是这个函数的 prototype 属性指向的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建构造函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 每个构造函数，js 都会为之自动添加一个 prototype 属性，称之为原型，是一个对象</span></div><div class="line"><span class="comment">// 每个构造函数创建的对象都会共享 prototype 上面的属性与方法</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> Person.prototype); <span class="comment">// 'object'</span></div><div class="line"></div><div class="line"><span class="comment">// 为 Person 添加 sayName 方法</span></div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 创建实例</span></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'a'</span>);</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">'b'</span>);</div><div class="line"></div><div class="line">person1.sayName(); <span class="comment">// 'a'</span></div><div class="line">person2.sayName(); <span class="comment">// 'b'</span></div><div class="line">person1.sayName === person2.sayName <span class="comment">// true</span></div></pre></td></tr></table></figure><a id="more"></a><p>整理一下：</p><ul><li>构造函数默认有个 prototype 属性指向它的原型</li><li><p>构造函数原型有个 constructor 属性指向构造函数本身</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Person.prototype.constructor === Person</div></pre></td></tr></table></figure></li><li><p>每个 new 出来的实例都有个隐式的 <strong>proto</strong> 属性，指向它的构造函数的原型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">person1.__proto__ === Person.prototype</div><div class="line">person1.__proto__.constructor === Person</div></pre></td></tr></table></figure></li><li><p>Object 本身也是一个构造函数，他也是一个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.__proto__ === <span class="built_in">Function</span>.prototype</div></pre></td></tr></table></figure></li><li><p>此外，Function 的原型属性与 Function 的原型指向同一个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Function</span>.__proto__ === <span class="built_in">Function</span>.prototype</div><div class="line"><span class="built_in">Object</span>.prototype.__proto__ === <span class="literal">null</span></div><div class="line"><span class="keyword">typeof</span> <span class="built_in">Function</span>.prototype === <span class="string">'function'</span></div></pre></td></tr></table></figure></li></ul><h3 id="3-Object-create"><a href="#3-Object-create" class="headerlink" title="3. Object.create()"></a>3. Object.create()</h3><p>Object.create() 创建的对象会以传入的对象作为原型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> obj2 = <span class="built_in">Object</span>.create(obj);</div><div class="line">obj2.__proto__ === obj <span class="comment">// true</span></div></pre></td></tr></table></figure><p>利用此方法可以模拟对象的“继承”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Foo.prototype.myName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.name; &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params">name, label</span>) </span>&#123;</div><div class="line">  Foo.call(<span class="keyword">this</span>, name);</div><div class="line">  <span class="keyword">this</span>.label = label;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// temp 原型为 Foo.prototype</span></div><div class="line">vat temp = <span class="built_in">Object</span>.create(Foo.prototype);</div><div class="line"></div><div class="line"><span class="comment">// new Bar 创建的对象原型为 temp，temp原型为 Foo.prototype,从而 Bar.prototype 和 Foo.prototype 有了继承关系</span></div><div class="line">Bar.prototype = temp;</div><div class="line"></div><div class="line">Bar.prototype.myLabel = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.label; &#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> Bar(<span class="string">'o1'</span>,<span class="string">'baro1'</span>);</div><div class="line">o1.myName(); <span class="comment">// 'o1'</span></div><div class="line">o1.myLabel(); <span class="comment">// 'baro1'</span></div><div class="line">o1.__proto__.__proto__ === Foo.prototype <span class="comment">// true</span></div></pre></td></tr></table></figure><h2 id="proto-和-prototype"><a href="#proto-和-prototype" class="headerlink" title="proto 和 prototype"></a>proto 和 prototype</h2><p>proto 指向 当前对象的原型，而 prototype 为函数才有的属性</p><p>默认情况下，new 一个函数创建的对象，其原型都指向构造函数的 prototype 属性指向的对象</p><h2 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h2><ol><li>js 的内置对象，如 String，Array，Number，Object，Function等，因为为 native 代码实现，所以原型打印出来都是 f(){[native code]}</li><li>内置对象本质也是函数，所以可以通过他们创建对象，创建出的对象的原型指向内置函数的 prototype 属性，最顶层的原型对象指向 Object.prototype</li><li>Object.create(null) 创建的对象不存在原型</li></ol><h2 id="constructor、proto-与-prototype"><a href="#constructor、proto-与-prototype" class="headerlink" title="constructor、proto 与 prototype"></a>constructor、proto 与 prototype</h2><p>Js 中每创建一个对象，该对象就会获得一个 <strong>proto</strong> 属性（为一个对象）指向创建该对象的构造函数的原型属性，同时 <strong>proto</strong> 对象中又有一个 constructor 属性指向该构造函数</p><blockquote><p>只有函数才有 prototype， 每个对象（函数也是对象）都有 <strong>proto</strong>, Object 本身就是构造函数</p></blockquote><h2 id="进一步探讨"><a href="#进一步探讨" class="headerlink" title="进一步探讨"></a>进一步探讨</h2><p>js 为单继承;</p><p>Object.prototype 为原型链的顶端，所有对象从它继承了包括 toString 等方法；</p><p>Object 为构造函数，它继承了 Function.prototype;</p><p>Function 为对象，继承了 Object.prototype ;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span> <span class="keyword">instanceof</span> <span class="built_in">Function</span> <span class="comment">// true</span></div><div class="line"><span class="built_in">Function</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span> <span class="comment">// true</span></div><div class="line">?????!!!!!!</div></pre></td></tr></table></figure><p>官方给的解释：<br>Function 本身为函数。Function.<strong>proto</strong> 是标准的内置对象 Function.Prototype,Function.prototype.<strong>proto</strong> 是标准的内置对象 Object.prototype</p><img src="/2018/12/31/prototype-chain/8B8557B39F5CC2241DAEABF53C804642.jpg" alt="8B8557B39F5CC2241DAEABF53C804642.jpg" title=""><p><strong>总结：</strong></p><p><strong>先有 Object.prototype (原型链顶端)</strong></p><p><strong>Function.prototype 继承自 Object.prototype 产生</strong></p><p><strong>最后 Function 、Object 和其他的构造函数继承 Function.prototype 产生</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123; <span class="keyword">this</span>.name = name; &#125;</div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">'a'</span>);</div><div class="line"></div><div class="line">person.__proto__ === Person.prototype</div><div class="line">person.__proto__.__proto__ === <span class="built_in">Object</span>.prototype</div><div class="line">person.__proto__ === <span class="built_in">Function</span>.prototype</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;解释：&lt;/strong&gt;为了共享多个对象间的一些共有特征（属性或方法）&lt;/p&gt;
&lt;p&gt;JavaScript 中的对象，都存在一个内置属性&lt;code&gt;[[prototype]]&lt;/code&gt;也做 &lt;code&gt;__proto__&lt;/code&gt;，指向这个对象的原型对象&lt;/p&gt;
&lt;p&gt;js 中查找一个属性或方法，如果当前对象无定义会继续查找当前对象的原型对象，如果仍未找到，会继续查找原型对象的原型。如此直至最顶层的原型对象，如果仍未找到返回 undefined&lt;/p&gt;
&lt;p&gt;最顶层的原型对象 为 &lt;code&gt;Object.prototype&lt;/code&gt;, 里面保存了最常用的 toString、valueOf、hasOwnProperty 等方法，故任何对象都可以开箱即用。&lt;/p&gt;
&lt;h2 id=&quot;创建对象的三种方式&quot;&gt;&lt;a href=&quot;#创建对象的三种方式&quot; class=&quot;headerlink&quot; title=&quot;创建对象的三种方式&quot;&gt;&lt;/a&gt;创建对象的三种方式&lt;/h2&gt;&lt;h3 id=&quot;1-字面量方式&quot;&gt;&lt;a href=&quot;#1-字面量方式&quot; class=&quot;headerlink&quot; title=&quot;1. 字面量方式&quot;&gt;&lt;/a&gt;1. 字面量方式&lt;/h3&gt;&lt;p&gt;字面量方式创建对象，它的原型就是 Object.prototype&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;obj.__proto__ === &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-函数构造调用&quot;&gt;&lt;a href=&quot;#2-函数构造调用&quot; class=&quot;headerlink&quot; title=&quot;2. 函数构造调用&quot;&gt;&lt;/a&gt;2. 函数构造调用&lt;/h3&gt;&lt;p&gt;Js 在定义一个函数时，同时为这个函数定义了一个默认的 &lt;code&gt;prototype&lt;/code&gt; 属性, 所有的共享的属性或方法都被放到这个属性指向的对象中。&lt;/p&gt;
&lt;p&gt;由此看出，通过一个函数的构造调用创建的对象，它的原型就是这个函数的 prototype 属性指向的对象&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建构造函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 每个构造函数，js 都会为之自动添加一个 prototype 属性，称之为原型，是一个对象&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 每个构造函数创建的对象都会共享 prototype 上面的属性与方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; Person.prototype); &lt;span class=&quot;comment&quot;&gt;// &#39;object&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 为 Person 添加 sayName 方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Person.prototype.sayName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建实例&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;person1.sayName(); &lt;span class=&quot;comment&quot;&gt;// &#39;a&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;person2.sayName(); &lt;span class=&quot;comment&quot;&gt;// &#39;b&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;person1.sayName === person2.sayName &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="js" scheme="https://somnus13.github.io/categories/js/"/>
    
    
      <category term="原型" scheme="https://somnus13.github.io/tags/%E5%8E%9F%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>React+webpack4+Babel7 脚手架搭建过程（二）</title>
    <link href="https://somnus13.github.io/2018/12/20/react-webpack-babel7-2/"/>
    <id>https://somnus13.github.io/2018/12/20/react-webpack-babel7-2/</id>
    <published>2018-12-20T08:44:52.000Z</published>
    <updated>2018-12-20T08:58:39.655Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第二篇主要是 react react-router react-redux</p></blockquote><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## 安装 react &amp;&amp; react-dom</span></div><div class="line">npm i -s react react-dom</div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</div><div class="line">  <span class="built_in">module</span>.hot.accept();</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  &lt;div&gt;Hello React!<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>),</div><div class="line">);</div></pre></td></tr></table></figure><p>运行可见 <code>Hello React！</code></p><h2 id="React-router"><a href="#React-router" class="headerlink" title="React-router"></a>React-router</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">// install react-router-dom</div><div class="line">npm i -s react-router-dom</div><div class="line"></div><div class="line">`cd src`</div><div class="line">`mkdir router &amp;&amp; touch router/router.js`</div><div class="line"></div><div class="line">// router.js</div><div class="line">import React from &apos;react&apos;;</div><div class="line">import &#123;BrowserRouter as Router, Route, Switch, Link&#125; from &apos;react-router-dom&apos;;</div><div class="line"></div><div class="line">import Home from &apos;../containers/Home&apos;;</div><div class="line">import Page1 from &apos;../containers/Counter&apos;;</div><div class="line"></div><div class="line"></div><div class="line">const getRouter = () =&gt; (</div><div class="line">  &lt;Router&gt;</div><div class="line">    &lt;div&gt;</div><div class="line">      &lt;ul&gt;</div><div class="line">        &lt;li&gt;&lt;Link to=&quot;/&quot;&gt;Home&lt;/Link&gt;&lt;/li&gt;</div><div class="line">        &lt;li&gt;&lt;Link to=&quot;/Counter&quot;&gt;counter&lt;/Link&gt;&lt;/li&gt;</div><div class="line">      &lt;/ul&gt;</div><div class="line">      &lt;Switch&gt;</div><div class="line">        &lt;Route exact path=&quot;/&quot; component=&#123;Home&#125; /&gt;</div><div class="line">        &lt;Route path=&quot;/Counter&quot; component=&#123;Counter&#125; /&gt;</div><div class="line">      &lt;/Switch&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/Router&gt;</div><div class="line">);</div><div class="line">export default getRouter;</div><div class="line"></div><div class="line">// 修改src/index.js</div><div class="line">import React from &apos;react&apos;;</div><div class="line">import ReactDom from &apos;react-dom&apos;;</div><div class="line"></div><div class="line">import getRouter from &apos;./router/router&apos;;</div><div class="line"></div><div class="line">ReactDom.render(</div><div class="line">  &#123;getRouter()&#125;, document.getElementById(&apos;root&apos;));</div></pre></td></tr></table></figure><a id="more"></a><p>Home 组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// src/containers/Home/index.js</div><div class="line">import React from &apos;react&apos;;</div><div class="line"></div><div class="line">const Home = () =&gt; (</div><div class="line">  &lt;div&gt;this is Home page&lt;/div&gt;</div><div class="line">);</div><div class="line">export default Home;</div><div class="line"></div><div class="line">// src/containers/Counter/index.js</div><div class="line">// 略.</div></pre></td></tr></table></figure><h2 id="React-redux"><a href="#React-redux" class="headerlink" title="React-redux"></a>React-redux</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// install redux and react-redux</div><div class="line">cnpm i --save redux react-redux</div></pre></td></tr></table></figure><p>src 文件夹下新建 store 文件夹，并创建 index.js 以及 reducer.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">mkdir src/store &amp;&amp; touch src/store/index.js src/store/reducer.js</div><div class="line"></div><div class="line">// src/store/index.js</div><div class="line">import &#123;</div><div class="line">  createStore,</div><div class="line">  applyMiddleware,</div><div class="line">  compose,</div><div class="line">&#125; from &apos;redux&apos;;</div><div class="line">import reduxThunk from &apos;redux-thunk&apos;;</div><div class="line">import reducer from &apos;./reducer&apos;;</div><div class="line"></div><div class="line">const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;</div><div class="line">const store = createStore(</div><div class="line">  reducer,</div><div class="line">  composeEnhancers(</div><div class="line">    applyMiddleware(reduxThunk),</div><div class="line">  ),</div><div class="line">);</div><div class="line">export default store;</div><div class="line"></div><div class="line">// src/store/reducer.js</div><div class="line">import &#123; combineReducers &#125; from &apos;redux&apos;;</div><div class="line">import &#123; reducer as countReducer &#125; from &apos;../containers/Counter/store&apos;;</div><div class="line"></div><div class="line">export default combineReducers(&#123;</div><div class="line">  counter: countReducer,</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>修改入口文件 index.js 以及 app.js(分离出了一个app.js,看上去河蟹一些)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// src/index.js</div><div class="line">import App from &apos;./app&apos;;</div><div class="line">...</div><div class="line">ReactDOM.render(</div><div class="line">  &lt;App /&gt;,</div><div class="line">  document.getElementById(&apos;root&apos;),</div><div class="line">);</div><div class="line"></div><div class="line">// src/app.js</div><div class="line">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class="line">import &#123; Provider &#125; from &apos;react-redux&apos;;</div><div class="line">import store from &apos;./store&apos;;</div><div class="line">import getRouter from &apos;./router/router&apos;;</div><div class="line"></div><div class="line">const App = () =&gt; (</div><div class="line">  &lt;Provider store=&#123;store&#125;&gt;</div><div class="line">    &#123;getRouter()&#125;</div><div class="line">  &lt;/Provider&gt;</div><div class="line">);</div><div class="line"></div><div class="line">export default App;</div></pre></td></tr></table></figure><p>通过 Provider 的 store 属性把状态暴露给各个组件方便集中管理使用</p><p>接下来实现 Counter 组件</p><p>src 目录下的 container 文件夹下 新建 Counter 文件夹，并在文件下下建立如下文件：</p><img src="/2018/12/20/react-webpack-babel7-2/779087A16BEE88AA3496E55669A940F3.jpg" alt="779087A16BEE88AA3496E55669A940F3.jpg" title=""><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mkdir src/container/Counter</div><div class="line">touch src/container/Counter/index.js</div><div class="line">mkdir src/container/Counter/store</div><div class="line"><span class="built_in">cd</span> src/container/Counter/store</div><div class="line">touch constants.js index.js action.js reducer.js</div></pre></td></tr></table></figure><p>然后编写代码：</p><p>定义行为变量 constants ，包含三态：自增、自减以及重置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// src/container/Counter/store/constants.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> INCREMENT = <span class="string">'INCREMENT'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> DECREMENT = <span class="string">'DECREMENT'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> RESET = <span class="string">'RESET'</span>;</div></pre></td></tr></table></figure><p>定义 reducer ，即我们触发 action 会改变 store 里的状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// src/container/Counter/store/reducer.js</div><div class="line">import &#123; INCREMENT, DECREMENT, RESET &#125; from &apos;./constants&apos;;</div><div class="line"></div><div class="line">const reducer = (state = &#123; count: 0 &#125;, action) =&gt; &#123;</div><div class="line">  switch (action.type) &#123;</div><div class="line">    case INCREMENT:</div><div class="line">      return &#123;</div><div class="line">        count: state.count + 1,</div><div class="line">      &#125;;</div><div class="line">    case DECREMENT:</div><div class="line">      return &#123;</div><div class="line">        count: state.count - 1,</div><div class="line">      &#125;;</div><div class="line">    case RESET:</div><div class="line">      return &#123; count: 0 &#125;;</div><div class="line">    default:</div><div class="line">      return state;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">export default reducer;</div></pre></td></tr></table></figure><p>定义我们的 action</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// src/container/Counter/store/action.js</span></div><div class="line"><span class="keyword">import</span> &#123; INCREMENT, DECREMENT, RESET &#125; <span class="keyword">from</span> <span class="string">'./constants'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> incrementAction = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</div><div class="line">  type: INCREMENT,</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> decrementAction = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</div><div class="line">  type: DECREMENT,</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> resetAction = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</div><div class="line">  type: RESET,</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>集体导出统一管理：(供根目录的combineReducers消费)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// src/container/Counter/store/index.js</span></div><div class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducer'</span>;</div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionCreator <span class="keyword">from</span> <span class="string">'./action'</span>;</div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> constants <span class="keyword">from</span> <span class="string">'./constants'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> &#123; reducer, actionCreator, constants &#125;;</div></pre></td></tr></table></figure><p>接下来修改 Counter 组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">// src/container/Counter/index.js</div><div class="line">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class="line">import PropTypes from &apos;prop-types&apos;;</div><div class="line">import &#123; connect &#125; from &apos;react-redux&apos;;</div><div class="line">import &#123; incrementAction, decrementAction, resetAction &#125; from &apos;./store/action&apos;;</div><div class="line"></div><div class="line"></div><div class="line">const Counter = (props) =&gt; &#123;</div><div class="line">  const &#123;</div><div class="line">    count,</div><div class="line">    increment,</div><div class="line">    decrement,</div><div class="line">    reset,</div><div class="line">  &#125; = props;</div><div class="line">  return (</div><div class="line">    &lt;div&gt;</div><div class="line">      &lt;div&gt;</div><div class="line">      当前计数：</div><div class="line">        &#123;count&#125;</div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;button</div><div class="line">        type=&quot;button&quot;</div><div class="line">        onClick=&#123;() =&gt; increment()&#125;</div><div class="line">      &gt;</div><div class="line">        自增</div><div class="line">      &lt;/button&gt;</div><div class="line">      &lt;button</div><div class="line">        type=&quot;button&quot;</div><div class="line">        onClick=&#123;() =&gt; decrement()&#125;</div><div class="line">      &gt;</div><div class="line">      自减</div><div class="line">      &lt;/button&gt;</div><div class="line">      &lt;button</div><div class="line">        type=&quot;button&quot;</div><div class="line">        onClick=&#123;() =&gt; reset()&#125;</div><div class="line">      &gt;</div><div class="line">      重置</div><div class="line">      &lt;/button&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  );</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Counter.propTypes = &#123;</div><div class="line">  count: PropTypes.number.isRequired,</div><div class="line">  increment: PropTypes.func.isRequired,</div><div class="line">  decrement: PropTypes.func.isRequired,</div><div class="line">  reset: PropTypes.func.isRequired,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const mapStateToProps = state =&gt; (&#123;</div><div class="line">  count: state.counter.count,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">const mapDispatchToProps = dispatch =&gt; (&#123;</div><div class="line">  increment: () =&gt; &#123;</div><div class="line">    dispatch(incrementAction());</div><div class="line">  &#125;,</div><div class="line">  decrement: () =&gt; &#123;</div><div class="line">    dispatch(decrementAction());</div><div class="line">  &#125;,</div><div class="line">  reset: () =&gt; &#123;</div><div class="line">    dispatch(resetAction());</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">export default connect(mapStateToProps, mapDispatchToProps)(Counter);</div></pre></td></tr></table></figure><h2 id="Redux-thunk"><a href="#Redux-thunk" class="headerlink" title="Redux-thunk"></a>Redux-thunk</h2><p>redux-thunk 使得 action 可以返回一个函数组为返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个json 作api请求结果</span></div><div class="line">mkdir api &amp;&amp; touch api/user.json</div><div class="line"></div><div class="line"><span class="comment">// user.json</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"somnus"</span>,</div><div class="line">  <span class="string">"intro"</span>: <span class="string">"silly b"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>同理，在 container 文件夹下创建如下目录结构：</p><img src="/2018/12/20/react-webpack-babel7-2/19ED65FA174593DC5897E1CC9A045AF6.jpg" alt="19ED65FA174593DC5897E1CC9A045AF6.jpg" title=""><p>接下来是类似的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div></pre></td><td class="code"><pre><div class="line">// UserInfo/store/index.js</div><div class="line">import reducer from &apos;./reducer&apos;;</div><div class="line">import * as constants from &apos;./constants&apos;;</div><div class="line">import * as action from &apos;./action&apos;;</div><div class="line"></div><div class="line">export &#123;</div><div class="line">  reducer,</div><div class="line">  constants,</div><div class="line">  action,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// UserInfo/store/constants.js</div><div class="line">export const GET_USER_INFO_REQUEST = &apos;GET_USER_INFO_REQUEST&apos;;</div><div class="line">export const GET_USER_INFO_SUCCESS = &apos;GET_USER_INFO_SUCCESS&apos;;</div><div class="line">export const GET_USER_INFO_FAIL = &apos;GET_USER_INFO_FAIL&apos;;</div><div class="line"></div><div class="line">// UserInfo/store/action.js</div><div class="line">import &#123;</div><div class="line">  GET_USER_INFO_REQUEST,</div><div class="line">  GET_USER_INFO_SUCCESS,</div><div class="line">  GET_USER_INFO_FAIL,</div><div class="line">&#125; from &apos;./constants&apos;;</div><div class="line"></div><div class="line">const getUserInfoRequest = () =&gt; (&#123; type: GET_USER_INFO_REQUEST &#125;);</div><div class="line"></div><div class="line">const getUserInfoSuccess = userInfo =&gt; (&#123;</div><div class="line">  type: GET_USER_INFO_SUCCESS,</div><div class="line">  userInfo,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">const getUserInfoFail = () =&gt; (&#123; type: GET_USER_INFO_FAIL &#125;);</div><div class="line"></div><div class="line">const getUserInfo = () =&gt; (dispatch) =&gt; &#123;</div><div class="line">  dispatch(getUserInfoRequest());</div><div class="line">  return fetch(&apos;/api/user.json&apos;)</div><div class="line">    .then(res =&gt; res.json())</div><div class="line">    .then(json =&gt; dispatch(getUserInfoSuccess(json)))</div><div class="line">    .catch(() =&gt; dispatch(getUserInfoFail()));</div><div class="line">&#125;;</div><div class="line"></div><div class="line">export default getUserInfo;</div><div class="line"></div><div class="line">// UserInfo/store/reducer.js</div><div class="line">import &#123; GET_USER_INFO_REQUEST, GET_USER_INFO_SUCCESS, GET_USER_INFO_FAIL &#125; from &apos;./constants&apos;;</div><div class="line"></div><div class="line">const initState = &#123;</div><div class="line">  isLoading: false,</div><div class="line">  userInfo: &#123;&#125;,</div><div class="line">  errorMsg: &apos;&apos;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const reducer = (state = initState, action) =&gt; &#123;</div><div class="line">  switch (action.type) &#123;</div><div class="line">    case GET_USER_INFO_REQUEST:</div><div class="line">      return &#123;</div><div class="line">        ...state,</div><div class="line">        isLoading: true,</div><div class="line">      &#125;;</div><div class="line">    case GET_USER_INFO_SUCCESS:</div><div class="line">      return &#123;</div><div class="line">        ...state,</div><div class="line">        isLoading: false,</div><div class="line">        userInfo: action.userInfo,</div><div class="line">      &#125;;</div><div class="line">    case GET_USER_INFO_FAIL:</div><div class="line">      return &#123;</div><div class="line">        isLoading: false,</div><div class="line">        errorMsg: &apos;request error&apos;,</div><div class="line">      &#125;;</div><div class="line">    default:</div><div class="line">      return state;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">export default reducer;</div><div class="line"></div><div class="line">// UserInfo/index.js</div><div class="line">import React from &apos;react&apos;;</div><div class="line">import PropTypes from &apos;prop-types&apos;;</div><div class="line">import &#123; connect &#125; from &apos;react-redux&apos;;</div><div class="line">import getUserInfoAction from &apos;./store/action&apos;;</div><div class="line"></div><div class="line">const UserInfo = (props) =&gt; &#123;</div><div class="line">  const &#123;</div><div class="line">    userinfo: &#123; userInfo, isLoading, errorMsg &#125;,</div><div class="line">    getUserInfo,</div><div class="line">  &#125; = props;</div><div class="line">  return (</div><div class="line">    &lt;div&gt;</div><div class="line">      &#123;isLoading</div><div class="line">        ? &apos;请求信息中...&apos;</div><div class="line">        : errorMsg || (</div><div class="line">        &lt;div&gt;</div><div class="line">          &lt;p&gt;用户信息&lt;/p&gt;</div><div class="line">          &lt;p&gt;</div><div class="line">            用户名：</div><div class="line">            &#123;userInfo.name&#125;</div><div class="line">          &lt;/p&gt;</div><div class="line">          &lt;p&gt;</div><div class="line">            介绍：</div><div class="line">            &#123;userInfo.intro&#125;</div><div class="line">          &lt;/p&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        )&#125;</div><div class="line">      &lt;button</div><div class="line">        type=&quot;button&quot;</div><div class="line">        onClick=&#123;() =&gt; getUserInfo()&#125;</div><div class="line">      &gt;</div><div class="line">        请求用户信息</div><div class="line">      &lt;/button&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  );</div><div class="line">&#125;;</div><div class="line"></div><div class="line">UserInfo.propTypes = &#123;</div><div class="line">  userinfo: PropTypes.shape(&#123;</div><div class="line">    isLoading: PropTypes.bool.isRequired,</div><div class="line">    userInfo: PropTypes.objectOf(PropTypes.string).isRequired,</div><div class="line">    errorMsg: PropTypes.string.isRequired,</div><div class="line">  &#125;).isRequired,</div><div class="line">  getUserInfo: PropTypes.func.isRequired,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const mapStateToProps = state =&gt; (&#123;</div><div class="line">  userinfo: state.userinfo,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">export default connect(</div><div class="line">  mapStateToProps,</div><div class="line">  dispatch =&gt; (&#123;</div><div class="line">    getUserInfo: () =&gt; &#123;</div><div class="line">      dispatch(getUserInfoAction());</div><div class="line">    &#125;,</div><div class="line">  &#125;),</div><div class="line">)(UserInfo);</div><div class="line"></div><div class="line"></div><div class="line">// 不要忘了 在根目录下 reducer 引入</div><div class="line">// src/store/reducer.js</div><div class="line">import &#123; reducer as userInfoReducer &#125; from &apos;../containers/UserInfo/store&apos;;</div><div class="line"></div><div class="line">export default combineReducers(&#123;</div><div class="line">  counter: countReducer,</div><div class="line">  userinfo: userInfoReducer,</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>最后偷个图：<br><img src="/2018/12/20/react-webpack-babel7-2/43DE8E1521D5F265590ABE2E62C126FB.png" alt="43DE8E1521D5F265590ABE2E62C126FB.png" title=""></p><p>自己连抄带查，搞定了一个脚手架，记录一下。<br>学习就是不断做一件事1000遍以上的过程，加油。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第二篇主要是 react react-router react-redux&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;React&quot;&gt;&lt;a href=&quot;#React&quot; class=&quot;headerlink&quot; title=&quot;React&quot;&gt;&lt;/a&gt;React&lt;/h2&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## 安装 react &amp;amp;&amp;amp; react-dom&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm i -s react react-dom&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; ReactDOM &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react-dom&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.hot) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.hot.accept();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ReactDOM.render(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;div&amp;gt;Hello React!&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;root&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行可见 &lt;code&gt;Hello React！&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;React-router&quot;&gt;&lt;a href=&quot;#React-router&quot; class=&quot;headerlink&quot; title=&quot;React-router&quot;&gt;&lt;/a&gt;React-router&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// install react-router-dom&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm i -s react-router-dom&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;`cd src`&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;`mkdir router &amp;amp;&amp;amp; touch router/router.js`&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// router.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import React from &amp;apos;react&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import &amp;#123;BrowserRouter as Router, Route, Switch, Link&amp;#125; from &amp;apos;react-router-dom&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import Home from &amp;apos;../containers/Home&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import Page1 from &amp;apos;../containers/Counter&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;const getRouter = () =&amp;gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;Router&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;lt;ul&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;li&amp;gt;&amp;lt;Link to=&amp;quot;/&amp;quot;&amp;gt;Home&amp;lt;/Link&amp;gt;&amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;li&amp;gt;&amp;lt;Link to=&amp;quot;/Counter&amp;quot;&amp;gt;counter&amp;lt;/Link&amp;gt;&amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;lt;/ul&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;lt;Switch&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;Route exact path=&amp;quot;/&amp;quot; component=&amp;#123;Home&amp;#125; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;Route path=&amp;quot;/Counter&amp;quot; component=&amp;#123;Counter&amp;#125; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;lt;/Switch&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;/Router&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;export default getRouter;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 修改src/index.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import React from &amp;apos;react&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import ReactDom from &amp;apos;react-dom&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import getRouter from &amp;apos;./router/router&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ReactDom.render(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#123;getRouter()&amp;#125;, document.getElementById(&amp;apos;root&amp;apos;));&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="react" scheme="https://somnus13.github.io/categories/react/"/>
    
    
      <category term="webpack babel" scheme="https://somnus13.github.io/tags/webpack-babel/"/>
    
  </entry>
  
  <entry>
    <title>React+webpack4+Babel7 脚手架搭建过程（一）</title>
    <link href="https://somnus13.github.io/2018/12/19/react-webpack-babel7-1/"/>
    <id>https://somnus13.github.io/2018/12/19/react-webpack-babel7-1/</id>
    <published>2018-12-19T08:41:28.000Z</published>
    <updated>2018-12-20T08:45:34.846Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第一篇主要是 webpack babel eslint</p></blockquote><h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><p>首先新建个空的文件夹并通过 <code>终端</code>进入（后续所有操作基于终端）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir quick-start &amp;&amp; cd quick-start</div></pre></td></tr></table></figure><p>Webpack 的安装需要借助于 npm ，所以我们您需要创建一个 package.json</p><p>Package.json 是一个标准的 npm 说明文件，里面保存着当前项目的基本信息，项目依赖以及自定义脚本任务等。</p><p>终端中使用 <code>npm init</code> 命令创建 package.json</p><p>执行 <code>npm init</code> 命令依次输入项目信息，或者直接 <code>npm init -y</code> 跳过这些信息的输入</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">npm init -y</div><div class="line"></div><div class="line"><span class="comment">## 执行后得到如下信息</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"quick-start"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"keywords"</span>: [],</div><div class="line">  <span class="string">"author"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>准备工作完成，开始安装 webpack</p><p>webpack 4之后分成了 webpack 以及 webpack-cli 两个依赖，所以我们依次安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i -D webpack webpack-cli</div></pre></td></tr></table></figure><p>接下来我们需要 创建一些文件和文件夹</p><p>当前目录下创建 <code>src dist</code>​ 两个文件夹 并在 <code>src</code> 里面创建两个文件 <code>index.js</code> <code>index.html</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir dist src &amp;&amp; touch src/index.js src/index.html</div></pre></td></tr></table></figure><a id="more"></a><p>webpack 4 之后打包默认会寻找 src/index.js 作为默认入口，可以直接终端输入 webpack 来查看打包</p><img src="/2018/12/19/react-webpack-babel7-1/C62FDD0D043AF76EA53BBEC441315EA4.jpg" alt="C62FDD0D043AF76EA53BBEC441315EA4.jpg" title=""><p>我们在 index.js 中写入了 console.log(‘index.js’)</p><p>打包完成后可以看到 dist 文件夹下多出了 main.js</p><p>Node 运行一下就可看到输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node dist/main.js</div><div class="line">index.js</div></pre></td></tr></table></figure><p>细心的你应该会看到终端的黄色警告提示：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">WARNING <span class="keyword">in</span> configuration</div><div class="line">The <span class="string">'mode'</span> option has not been <span class="built_in">set</span>, webpack will fallback to <span class="string">'production'</span> <span class="keyword">for</span> this value. Set <span class="string">'mode'</span> option to <span class="string">'development'</span> or <span class="string">'production'</span> to <span class="built_in">enable</span> defaults <span class="keyword">for</span> each environment.</div><div class="line">You can also <span class="built_in">set</span> it to <span class="string">'none'</span> to <span class="built_in">disable</span> any default behavior. Learn more: https://webpack.js.org/concepts/mode/</div></pre></td></tr></table></figure><p>这是因为 webpack 打包要指定打包环境，开发以及生产环境：<code>webpack --mode=development</code>​ 或者 <code>webpack --mode=production</code>区别在于代码会不会帮你做自动压缩</p><p>接下来根目录手动创建 webpack.config.js</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch webpack.config.js</div></pre></td></tr></table></figure><p>简单编辑下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="comment">// 打包</span></div><div class="line">  mode: <span class="string">'development'</span>,</div><div class="line">  <span class="comment">// 入口文件配置项</span></div><div class="line">  entry: &#123;</div><div class="line">    index: <span class="string">'./src/index.js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// 出口文件配置项</span></div><div class="line">  output: &#123;</div><div class="line">    <span class="comment">// 打包路径</span></div><div class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</div><div class="line">    <span class="comment">// 打包文件名</span></div><div class="line">    filename: <span class="string">'bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// 模块：loaders加载</span></div><div class="line">  <span class="built_in">module</span>: &#123;&#125;,</div><div class="line">  <span class="comment">// 插件配置</span></div><div class="line">  plugins: [],</div><div class="line">  <span class="comment">// 配置webpack开发服务</span></div><div class="line">  devServer: &#123;&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>webpack 配置文件我们已经定义好，接下来编辑 package.json 中的 scripts 字段，让webpack 打包的时候 使用我们定义好的配置打包</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">"scripts": &#123;</div><div class="line">  "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",</div><div class="line">  "build": "webpack --config webpack.config.js"</div><div class="line">&#125;,</div></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ npm run build</div><div class="line"></div><div class="line">&gt; quick-start@1.0.0 dev /Users/somnus/Desktop/myproject/github/quick-start</div><div class="line">&gt; webpack --config webpack.config.js</div><div class="line"></div><div class="line">Hash: 57f5ff0df67788bc0fcd</div><div class="line">Version: webpack 4.27.1</div><div class="line">Time: 70ms</div><div class="line">Built at: 2018-12-19 15:04:05</div><div class="line">    Asset      Size  Chunks             Chunk Names</div><div class="line">bundle.js  3.79 KiB   index  [emitted]  index</div><div class="line">Entrypoint index = bundle.js</div><div class="line">[./src/index.js] 23 bytes &#123;index&#125; [built]</div></pre></td></tr></table></figure><p>查看 dist 文件夹下已经成功打包的 bundle.js 文件</p><p>接下来你可能会考虑，如果我们有多个入口呢？我们在改写一下 webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">entry: &#123;</div><div class="line">  index: <span class="string">'./src/index.js'</span>,</div><div class="line">  app: <span class="string">'./src/app.js'</span></div><div class="line">&#125;,</div><div class="line"><span class="comment">// 出口文件配置项</span></div><div class="line">output: &#123;</div><div class="line">  <span class="comment">// 打包路径</span></div><div class="line">  path: path.resolve(__dirname, <span class="string">'./dist'</span>),</div><div class="line">  <span class="comment">// 打包文件名</span></div><div class="line">  filename: <span class="string">'[name].js'</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>继续执行 npm run dev ，结果如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Hash: 7b6921f72326bf752b36</div><div class="line">Version: webpack 4.27.1</div><div class="line">Time: 73ms</div><div class="line">Built at: 2018-12-19 15:09:11</div><div class="line">   Asset      Size  Chunks             Chunk Names</div><div class="line">  app.js  3.76 KiB     app  [emitted]  app</div><div class="line">index.js  3.79 KiB   index  [emitted]  index</div><div class="line">Entrypoint index = index.js</div><div class="line">Entrypoint app = app.js</div><div class="line">[./src/app.js] 0 bytes &#123;app&#125; [built]</div><div class="line">[./src/index.js] 23 bytes &#123;index&#125; [built]</div></pre></td></tr></table></figure><p>可以看到预期的文件输出。</p><p>注意：[name] 的含义就是根据入口文件的名称来进行打包</p><p>接下来安装 webpack-dev-server ，并简单配置一下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i -D webpack-dev-server</div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">devServer: &#123;</div><div class="line">  port: <span class="number">3000</span>, <span class="comment">// 端口</span></div><div class="line">  open: <span class="literal">true</span>, <span class="comment">// 自动打开浏览器</span></div><div class="line">  hot: <span class="literal">true</span>, <span class="comment">// 开启热更新</span></div><div class="line">  overlay: <span class="literal">true</span>, <span class="comment">// 浏览器页面上显示错误</span></div><div class="line">  historyApiFallback: <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>同样再去 package.json 设置脚本运行</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">"scripts": &#123;</div><div class="line">  "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",</div><div class="line">  "build": "webpack --config webpack.config.js",</div><div class="line">  "dev": "webpack-dev-server --config webpack.config.js"</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>npm run dev 出现如下结果表示运行成功</p><img src="/2018/12/19/react-webpack-babel7-1/FB6023E6BAB9210CF1DFF1B0003E4E18.jpg" alt="FB6023E6BAB9210CF1DFF1B0003E4E18.jpg" title=""><p>接下来需要配置一下 html 模板，虽然webpack帮我们打包了js，但是我们不能每次都去html中引用打包生成的js吧，所以借用一个插件来帮我们实现 js 的自动引入</p><p>安装插件 <code>html-webpack-plugin</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i -D html-webpack-plugin</div></pre></td></tr></table></figure><p>配置 webpack 配置（多页面）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 多页面配置</span></div><div class="line">entry: &#123;</div><div class="line">  index: <span class="string">'./src/index.js'</span>, <span class="comment">// 入口文件</span></div><div class="line">  admin: <span class="string">'./src/admin.js'</span></div><div class="line">&#125;,</div><div class="line">plugins: [</div><div class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">    <span class="comment">// html模板</span></div><div class="line">    template: <span class="string">'./src/index.html'</span>,</div><div class="line">    filename: <span class="string">'index.html'</span>,</div><div class="line">    chunks: [<span class="string">'index'</span>],</div><div class="line">    hash: <span class="literal">true</span>, <span class="comment">// 打包文件追加 hash 串</span></div><div class="line">  &#125;),</div><div class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">    <span class="comment">// html模板</span></div><div class="line">    template: <span class="string">'./src/admin.html'</span>,</div><div class="line">    filename: <span class="string">'admin.html'</span>,</div><div class="line">    chunks: [<span class="string">'admin'</span>],</div><div class="line">    hash: <span class="literal">true</span>, <span class="comment">// 打包文件追加 hash 串</span></div><div class="line">  &#125;)</div><div class="line">],</div></pre></td></tr></table></figure><p>重新编译打包，审查元素会看到，已经自动帮我们吧 js 引入到了html中：</p><img src="/2018/12/19/react-webpack-babel7-1/66ED359E2C01FDE44CB9283A12C649E3.jpg" alt="66ED359E2C01FDE44CB9283A12C649E3.jpg" title=""><p>loader可以针对各类引入的资源做转换加载，解析成浏览器能解析的格式</p><h3 id="CSS-loader"><a href="#CSS-loader" class="headerlink" title="CSS loader"></a>CSS loader</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i -D style-loader css-loader</div></pre></td></tr></table></figure><p>引入<code>less</code>​ 文件的话，也需要安装对应的 <code>loader</code>​，此处以sass为例</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## npm i less less-loader -D</span></div><div class="line">npm i node-sass sass-loader -D</div></pre></td></tr></table></figure><p>新建 index.sass 并在 index.js 中引入</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">touch src/index.sass</div><div class="line"></div><div class="line"><span class="comment">## index.sass</span></div><div class="line">body</div><div class="line">  background: red</div><div class="line"></div><div class="line"><span class="comment">## index.js</span></div><div class="line">import <span class="string">'./index.sass'</span></div></pre></td></tr></table></figure><p>编辑 webpack modules 配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">rules: [</div><div class="line">  &#123;</div><div class="line">    <span class="built_in">test</span>: /\.(sc|sa|c)ss$/,</div><div class="line">    use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'sass-loader'</span>] //右向左解析</div><div class="line">  &#125;</div><div class="line">]</div><div class="line"><span class="comment">## test为匹配项 use为使用的loader</span></div></pre></td></tr></table></figure><p>重新打包编译发现，此时打包后的 css 是以行内样式的标签引进的，我们更希望用 link 的方式引进，需要用一个插件 <code>extract-text-webpack-plugin</code> 插件，它功效在于将 css 文件 拆分提取</p><p>安装 extract-text-webpack-plugin 插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// @next 表示可支持 webpack4 的版本</span></div><div class="line">npm i -D extract-text-webpack-plugin@next</div></pre></td></tr></table></figure><p>配置 CSS loader</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> ExtractTextWebpackPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>)</div><div class="line"></div><div class="line"><span class="comment">// loader</span></div><div class="line">&#123;</div><div class="line">  test: <span class="regexp">/\.(sc|sa|c)ss$/</span>,</div><div class="line">  use: ExtractTextWebpackPlugin.extract(&#123;</div><div class="line">    <span class="comment">// css link 方式引入就不需要 style-loader</span></div><div class="line">    fallback: <span class="string">'style-loader'</span>,</div><div class="line">    use: [<span class="string">'css-loader'</span>, <span class="string">'sass-loader'</span>] <span class="comment">//右向左解析</span></div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// plugins中定义</span></div><div class="line"><span class="comment">// 拆分后会把css文件放到dist目录下的css/style.css</span></div><div class="line"><span class="keyword">new</span> ExtractTextWebpackPlugin(<span class="string">'css/style.css'</span>)</div></pre></td></tr></table></figure><p>webpack 4 采用<code>mini-css-extract-plugin</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">npm i -D mini-css-extract-plugin <span class="comment">// for webpack 4</span></div><div class="line"></div><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>)</div><div class="line"></div><div class="line"><span class="comment">// loader</span></div><div class="line">&#123;</div><div class="line">  test: <span class="regexp">/\.(sc|sa|c)ss$/</span>,</div><div class="line">  use: [MiniCssExtractPlugin.loader, <span class="string">'css-loader'</span>, <span class="string">'sass-loader'</span>] <span class="comment">//右向左解析</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// plugins</span></div><div class="line"><span class="keyword">new</span> MiniCssExtractPlugin(&#123;</div><div class="line">  filename: <span class="string">'css/style.css'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>重新打包编译，查看页面如下：</p><img src="/2018/12/19/react-webpack-babel7-1/9F1136D03A04E1C8E6095A2E246BEFB9.jpg" alt="9F1136D03A04E1C8E6095A2E246BEFB9.jpg" title=""><h3 id="同理-图片引用-我们需要用到-file-loader-和-url-loader"><a href="#同理-图片引用-我们需要用到-file-loader-和-url-loader" class="headerlink" title="同理 图片引用 我们需要用到 file-loader 和 url-loader"></a>同理 图片引用 我们需要用到 file-loader 和 url-loader</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">npm i -D file-loader url-loader</div><div class="line"></div><div class="line">&#123;</div><div class="line">  test: <span class="regexp">/\.(jpe?g|png|gif)$/</span>,</div><div class="line">  use: [</div><div class="line">    &#123;</div><div class="line">      loader: <span class="string">'url-loader'</span>,</div><div class="line">      options: &#123;</div><div class="line">        limit: <span class="string">'8192'</span>, <span class="comment">// 小于8k自动转成base64，不会存在实体图片</span></div><div class="line">        outputPath: <span class="string">'images'</span> <span class="comment">// 打包存放目录</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="页面-img-标签-引用图片"><a href="#页面-img-标签-引用图片" class="headerlink" title="页面 img 标签 引用图片"></a>页面 img 标签 引用图片</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">npm i -D html-withimg-loader</div><div class="line"></div><div class="line">&#123;</div><div class="line">  test: <span class="regexp">/\.(htm|html)$/</span>,</div><div class="line">  use: <span class="string">'html-withimg-loader'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="引用字体和svg-可以用-file-loader"><a href="#引用字体和svg-可以用-file-loader" class="headerlink" title="引用字体和svg 可以用 file-loader"></a>引用字体和svg 可以用 file-loader</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  test: <span class="regexp">/\.(eot|ttf|woff|svg)$/</span>,</div><div class="line">  use: <span class="string">'file-loader'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>基本的引用就差不多这些，接下来需要对 CSS 做一些优化</p><p>例如：我们想自动根据浏览器来为我们声明的 CSS3 添加兼容前缀，我们需要用到：</p><h3 id="postcss-autoprefixer"><a href="#postcss-autoprefixer" class="headerlink" title="postcss autoprefixer"></a>postcss autoprefixer</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 一如既往的安装</span></div><div class="line">npm i -D postcss-loader autoprefixer</div><div class="line"></div><div class="line"><span class="comment">// 项目根目录创建 postcss.config.js</span></div><div class="line">touch postcss.config.js</div><div class="line"></div><div class="line"><span class="comment">// 文件中写入</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  plugins: [</div><div class="line">    <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)(&#123;</div><div class="line">      <span class="string">"browsers"</span>: [</div><div class="line">      <span class="string">"defaults"</span>,</div><div class="line">      <span class="string">"not ie &lt; 11"</span>,</div><div class="line">      <span class="string">"last 2 versions"</span>,</div><div class="line">      <span class="string">"&gt; 1%"</span>,</div><div class="line">      <span class="string">"iOS 7"</span>,</div><div class="line">      <span class="string">"last 3 iOS versions"</span></div><div class="line">      ]</div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 配置 loader</span></div><div class="line"><span class="comment">// postcss-loader 加在css-loader后</span></div><div class="line">&#123;</div><div class="line">  test: <span class="regexp">/\.(sc|sa|c)ss$/</span>,</div><div class="line">  use: [MiniCssExtractPlugin.loader, <span class="string">'css-loader'</span>,<span class="string">'postcss-loader'</span>, <span class="string">'sass-loader'</span>] <span class="comment">//右向左解析</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="CSS-模块化"><a href="#CSS-模块化" class="headerlink" title="CSS 模块化"></a>CSS 模块化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 配置css loader</span></div><div class="line">&#123;</div><div class="line">  loader: <span class="string">'css-loader'</span>,</div><div class="line">  options: &#123;</div><div class="line">  <span class="built_in">module</span>: <span class="literal">true</span>,</div><div class="line">  importLoaders: <span class="number">1</span>,</div><div class="line">  localIdentName: <span class="string">'[name]_[local]_[hash:base64]'</span>,</div><div class="line">  sourceMap: <span class="literal">true</span>,</div><div class="line">  minimize: <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>要启用 CSS 模块化，我们需要设置 css-loader 的 module 选项为 true。</p><p>importLoaders 选项表示在 css-loader 之前应用多少个加载器。</p><p>例如，sass-loader 必须先于 css-loader 出现。localIdentName 允许配置生成的标识：</p><ul><li>[name]：css 文件名称</li><li>[local]：类/id 的名称</li><li>[hash:base64]：随机生成的 hash，它在每个组件的 CSS 中都是唯一的</li></ul><h3 id="消除未使用的css"><a href="#消除未使用的css" class="headerlink" title="消除未使用的css"></a>消除未使用的css</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 安装PurifyCSS-webpack</span></div><div class="line">npm install --save-dev purifycss-webpack purify-css</div><div class="line"></div><div class="line"><span class="comment">// 在webpack.config.js中引入glob</span></div><div class="line"><span class="keyword">const</span> glob = <span class="built_in">require</span>(<span class="string">'glob'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 在webpack.config.js中引入purifycss-webpack</span></div><div class="line"><span class="keyword">const</span> PurifyCSSPlugin = <span class="built_in">require</span>(<span class="string">"purifycss-webpack"</span>);</div><div class="line"></div><div class="line"><span class="comment">//配置webpack.config.js中的plugins</span></div><div class="line">plugins:[</div><div class="line">  <span class="keyword">new</span> PurifyCSSPlugin(&#123;</div><div class="line">    paths: glob.sync(path.join(__dirname, <span class="string">'src/*.html'</span>)),</div><div class="line">  &#125;)</div><div class="line">]</div></pre></td></tr></table></figure><p>测试一下，在引用的css中定义一个未使用的样式声明，编译打包后查看编译后的css 文件，是不是已经被清除了</p><h3 id="babel7-转义ES6和react"><a href="#babel7-转义ES6和react" class="headerlink" title="babel7 转义ES6和react"></a>babel7 转义ES6和react</h3><p>笔者使用的 babel7 ，接下来安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i -D babel-loader@<span class="number">8</span> @babel/core @babel/preset-env @babel/preset-react</div></pre></td></tr></table></figure><ol><li>babel-loader：使用 Babel 转换 JavaScript依赖关系的 Webpack 加载器</li><li>@babel/core：即 babel-core，将 ES6 代码转换为 ES5</li><li>@babel/preset-env：即 babel-preset-env，根据您要支持的浏览器，决定使用哪些 transformations / plugins 和 polyfills，例如为旧浏览器提供现代浏览器的新特性</li><li>@babel/preset-react：即 babel-preset-react，针对所有 React 插件的 Babel 预设，例如将 JSX 转换为函数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 根目录创建babel配置文件</span></div><div class="line">touch .babelrc</div><div class="line"></div><div class="line"><span class="comment">// 简单配置</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"presets"</span>: [<span class="string">"@babel/preset-env"</span>, <span class="string">"@babel/preset-react"</span>]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 配置 loader</span></div><div class="line">&#123;</div><div class="line">  test: <span class="regexp">/\.js$/</span>,</div><div class="line">  exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">  use: &#123;</div><div class="line">    loader: <span class="string">'babel-loader'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="清理-dist-文件夹"><a href="#清理-dist-文件夹" class="headerlink" title="清理 dist 文件夹"></a>清理 dist 文件夹</h3><p>每次 build 之后都会重新生成文件至 dist 文件夹，我们需要每次 编译后自动清除 dist 文件夹内容，借助插件 <code>clean-webpack-plugin</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">npm i -D clean-webpack-plugin</div><div class="line"></div><div class="line"><span class="keyword">let</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  plugins: [</div><div class="line">  <span class="comment">// 打包前先清空</span></div><div class="line">  <span class="keyword">new</span> CleanWebpackPlugin(<span class="string">'dist'</span>)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="提取公共代码"><a href="#提取公共代码" class="headerlink" title="提取公共代码"></a>提取公共代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在webpack4之前，提取公共代码都是通过一个叫CommonsChunkPlugin的插件来办到的。到了4以后，内置了一个一模一样的功能 optimization</span></div><div class="line">optimization: &#123;</div><div class="line">  splitChunks: &#123;</div><div class="line">    cacheGroups: &#123;</div><div class="line">      vendor: &#123; <span class="comment">// 抽离第三方插件</span></div><div class="line">        test: <span class="regexp">/node_modules/</span>, <span class="comment">// 指定是node_modules下的第三方包</span></div><div class="line">        chunks: <span class="string">'initial'</span>,</div><div class="line">        name: <span class="string">'vendor'</span>, <span class="comment">// 打包后的文件名，任意命名</span></div><div class="line">        <span class="comment">// 设置优先级，防止和自定义的公共代码提取时被覆盖，不进行打包</span></div><div class="line">        priority: <span class="number">10</span></div><div class="line">      &#125;,</div><div class="line">      utils: &#123;</div><div class="line">      <span class="comment">// 抽离自己写的公共代码，utils里面是一个公共类库</span></div><div class="line">        chunks: <span class="string">'initial'</span>,</div><div class="line">        name: <span class="string">'utils'</span>, <span class="comment">// 任意命名</span></div><div class="line">        minSize: <span class="number">0</span> <span class="comment">// 只要超出0字节就生成一个新包</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line"></div><div class="line"><span class="comment">// 还要在plugins里面引入需要单独打包出来的chunk</span></div><div class="line"><span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">  template: <span class="string">'./src/index.html'</span>,</div><div class="line">  chunks: [<span class="string">'vendor'</span>, <span class="string">'index'</span>, <span class="string">'utils'</span>] <span class="comment">// 引入需要的chunk</span></div><div class="line">&#125;),</div></pre></td></tr></table></figure><h3 id="配置-dev-server"><a href="#配置-dev-server" class="headerlink" title="配置 dev-server"></a>配置 dev-server</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">devServer: &#123;</div><div class="line">  port: <span class="number">3000</span>, <span class="comment">// 端口</span></div><div class="line">  open: <span class="literal">true</span>, <span class="comment">// 自动打开浏览器</span></div><div class="line">  hot: <span class="literal">true</span>, <span class="comment">// 开启热更新</span></div><div class="line">  overlay: <span class="literal">true</span>, <span class="comment">// 浏览器页面上显示错误</span></div><div class="line">  historyApiFallback: <span class="literal">true</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure><h3 id="devtool优化"><a href="#devtool优化" class="headerlink" title="devtool优化"></a>devtool优化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在开发环境下配置</span></div><div class="line">devtool: <span class="string">'eval-source-map'</span></div></pre></td></tr></table></figure><h3 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"><span class="keyword">let</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  plugins: [</div><div class="line">    <span class="comment">// 热更新，热更新不是刷新</span></div><div class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</div><div class="line">  ],</div><div class="line">  devServer: &#123;</div><div class="line">    hot: <span class="literal">true</span>, <span class="comment">// 加上这一行</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 在入口文件index.js</span></div><div class="line"><span class="comment">// 还需要在主要的js文件里写入下面这段代码</span></div><div class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</div><div class="line">  <span class="comment">// 实现热更新</span></div><div class="line">  <span class="built_in">module</span>.hot.accept();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="webpack-merge"><a href="#webpack-merge" class="headerlink" title="webpack merge"></a>webpack merge</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</div><div class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</div><div class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</div><div class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">'./webpack.common'</span>)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = merge(common, &#123;</div><div class="line">  plugins: [</div><div class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</div><div class="line">  ],</div><div class="line">  mode: <span class="string">'development'</span>,</div><div class="line">  devServer: &#123;</div><div class="line">    port: <span class="number">3000</span>, <span class="comment">// 端口</span></div><div class="line">    open: <span class="literal">true</span>, <span class="comment">// 自动打开浏览器</span></div><div class="line">    hot: <span class="literal">true</span>, <span class="comment">// 开启热更新</span></div><div class="line">    overlay: <span class="literal">true</span>, <span class="comment">// 浏览器页面上显示错误</span></div><div class="line">    historyApiFallback: <span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line">  devtool: <span class="string">'eval-source-map'</span>,</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h3 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h3><p>统一的代码风格对于团队合作不可或缺。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 安装 eslint</span></div><div class="line">npm --save-dev install eslint</div><div class="line"></div><div class="line"><span class="comment">// 因为我们使用了webpack，所以必须要告诉webpack我们在构建时使用eslint，安装eslint-loader</span></div><div class="line">npm --save-dev install eslint-loader</div><div class="line"></div><div class="line"><span class="comment">// 配置loader</span></div><div class="line">&#123;</div><div class="line">  test: <span class="regexp">/\.js$/</span>,</div><div class="line">  exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">  use: [<span class="string">'babel-loader'</span>, <span class="string">'eslint-loader'</span>]</div><div class="line">&#125;,</div><div class="line"></div><div class="line"><span class="comment">// 同理根目录创建配置文件</span></div><div class="line">touch .eslintrc</div><div class="line"></div><div class="line"><span class="comment">// 编辑 .eslintrc</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"rules"</span>: &#123;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>稍后我们可以在该文件中指定规则，但首先我们要在Webpack配置文件中引入该文件。</p><p>plugins中定义:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> webpack.LoaderOptionsPlugin(&#123;</div><div class="line">  <span class="comment">// test: /\.xxx$/, // may apply this only for some modules</span></div><div class="line">  options: &#123;</div><div class="line">    eslint: &#123;</div><div class="line">      configFile: <span class="string">'./.eslintrc'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>添加完成运行会发现 ES6 语法会报错</p><p>我们可以通过 babel-eslint 来检测ES6代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 安装 babel-eslint</span></div><div class="line">npm install --save-dev babel-eslint</div><div class="line"></div><div class="line"><span class="comment">// 修改.eslintrc</span></div><div class="line">&#123;</div><div class="line">  parser: <span class="string">"babel-eslint"</span>,</div><div class="line">  <span class="string">"rules"</span>: &#123;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>添加规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"parser"</span>: <span class="string">"babel-eslint"</span>,</div><div class="line">  <span class="string">"rules"</span>: &#123;</div><div class="line">  <span class="string">"max-len"</span>: [<span class="number">1</span>, <span class="number">120</span>, <span class="number">2</span>, &#123;<span class="string">"ignoreComments"</span>: <span class="literal">true</span>&#125;]</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 安装 react lint</span></div><div class="line">npm install -D eslint-plugin-react</div></pre></td></tr></table></figure><p>安装之后，我们可以使用react插件来指定我们关于react的第一条代码规则。比如我们要求组件指定PropTypes</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// .eslintrc</span></div><div class="line">&#123;</div><div class="line">  parser: <span class="string">"babel-eslint"</span>,</div><div class="line">  <span class="string">"plugins"</span>: [</div><div class="line">  <span class="string">"react"</span></div><div class="line">  ],</div><div class="line">  <span class="string">"rules"</span>: &#123;</div><div class="line">  <span class="string">"max-len"</span>: [<span class="number">1</span>, <span class="number">120</span>, <span class="number">2</span>, &#123;<span class="attr">ignoreComments</span>: <span class="literal">true</span>&#125;],</div><div class="line">  <span class="string">"prop-types"</span>: [<span class="number">2</span>]</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 扩展ESLint规则 Airbnb Style Guide</span></div><div class="line">npm install -D eslint-config-airbnb eslint-plugin-<span class="keyword">import</span> eslint-plugin-jsx-a11y</div><div class="line"></div><div class="line"><span class="comment">// 修改.eslintrc配置</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"parser"</span>: <span class="string">"babel-eslint"</span>,</div><div class="line">  <span class="string">"extends"</span>: <span class="string">"airbnb"</span>,</div><div class="line">  <span class="string">"rules"</span>: &#123;</div><div class="line">  <span class="string">"max-len"</span>: [<span class="number">1</span>, <span class="number">120</span>, <span class="number">2</span>, &#123;<span class="string">"ignoreComments"</span>: <span class="literal">true</span>&#125;],</div><div class="line">  <span class="string">"prop-types"</span>: [<span class="number">2</span>]</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 调整</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"parser"</span>: <span class="string">"babel-eslint"</span>,</div><div class="line">  <span class="string">"extends"</span>: <span class="string">"airbnb"</span>,</div><div class="line">  <span class="string">"plugins"</span>: [</div><div class="line">    <span class="string">"react"</span>,</div><div class="line">    <span class="string">"jsx-a11y"</span>,</div><div class="line">    <span class="string">"import"</span></div><div class="line">  ],</div><div class="line">  <span class="string">"rules"</span>: &#123;</div><div class="line">    <span class="string">"max-len"</span>: [<span class="number">1</span>, <span class="number">120</span>, <span class="number">2</span>, &#123;<span class="string">"ignoreComments"</span>: <span class="literal">true</span>&#125;],</div><div class="line">    <span class="string">"prop-types"</span>: [<span class="number">0</span>],</div><div class="line">    <span class="string">"no-console"</span>: <span class="number">1</span>,</div><div class="line">    <span class="string">"react/jsx-filename-extension"</span>: [<span class="number">1</span>, &#123; <span class="string">"extensions"</span>: [<span class="string">".js"</span>, <span class="string">".jsx"</span>] &#125;]</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"env"</span>: &#123;</div><div class="line">    <span class="string">"browser"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"node"</span>: <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bug</span></div><div class="line">Resolve error: unable to load resolver <span class="string">"node"</span></div><div class="line"></div><div class="line"><span class="comment">// 解决方案</span></div><div class="line">npm install -D eslint-<span class="keyword">import</span>-resolver-node</div></pre></td></tr></table></figure><h3 id="pre-commit"><a href="#pre-commit" class="headerlink" title="pre-commit"></a>pre-commit</h3><p>git pre-commit 提交前检测 如果检测失败则禁止提交。可以在很大一定程度上保证代码质量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// pre-commit hook</span></div><div class="line"><span class="string">"scripts"</span>: &#123;</div><div class="line">  <span class="string">"eslint"</span>: <span class="string">"eslint --ext .js src"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 安装</span></div><div class="line">npm i -D pre-commit</div><div class="line"></div><div class="line"><span class="comment">// package.json:</span></div><div class="line"><span class="string">"pre-commit"</span>: [</div><div class="line">  <span class="string">"eslint"</span></div><div class="line">]</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第一篇主要是 webpack babel eslint&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;webpack&quot;&gt;&lt;a href=&quot;#webpack&quot; class=&quot;headerlink&quot; title=&quot;webpack&quot;&gt;&lt;/a&gt;webpack&lt;/h3&gt;&lt;p&gt;首先新建个空的文件夹并通过 &lt;code&gt;终端&lt;/code&gt;进入（后续所有操作基于终端）&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;mkdir quick-start &amp;amp;&amp;amp; cd quick-start&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Webpack 的安装需要借助于 npm ，所以我们您需要创建一个 package.json&lt;/p&gt;
&lt;p&gt;Package.json 是一个标准的 npm 说明文件，里面保存着当前项目的基本信息，项目依赖以及自定义脚本任务等。&lt;/p&gt;
&lt;p&gt;终端中使用 &lt;code&gt;npm init&lt;/code&gt; 命令创建 package.json&lt;/p&gt;
&lt;p&gt;执行 &lt;code&gt;npm init&lt;/code&gt; 命令依次输入项目信息，或者直接 &lt;code&gt;npm init -y&lt;/code&gt; 跳过这些信息的输入&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm init -y&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## 执行后得到如下信息&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;quick-start&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;description&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;main&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;index.js&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;test&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;echo \&quot;Error: no test specified\&quot; &amp;amp;&amp;amp; exit 1&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;keywords&quot;&lt;/span&gt;: [],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;author&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;license&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;ISC&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;准备工作完成，开始安装 webpack&lt;/p&gt;
&lt;p&gt;webpack 4之后分成了 webpack 以及 webpack-cli 两个依赖，所以我们依次安装&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm i -D webpack webpack-cli&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来我们需要 创建一些文件和文件夹&lt;/p&gt;
&lt;p&gt;当前目录下创建 &lt;code&gt;src dist&lt;/code&gt;​ 两个文件夹 并在 &lt;code&gt;src&lt;/code&gt; 里面创建两个文件 &lt;code&gt;index.js&lt;/code&gt; &lt;code&gt;index.html&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;mkdir dist src &amp;amp;&amp;amp; touch src/index.js src/index.html&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="react" scheme="https://somnus13.github.io/categories/react/"/>
    
    
      <category term="webpack babel" scheme="https://somnus13.github.io/tags/webpack-babel/"/>
    
  </entry>
  
  <entry>
    <title>执行上下文和执行栈</title>
    <link href="https://somnus13.github.io/2018/12/08/Execution-Context/"/>
    <id>https://somnus13.github.io/2018/12/08/Execution-Context/</id>
    <published>2018-12-08T08:12:53.000Z</published>
    <updated>2019-01-17T09:04:48.703Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>又来过基础</p></blockquote><h2 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h2><h3 id="什么是执行上下文"><a href="#什么是执行上下文" class="headerlink" title="什么是执行上下文"></a>什么是执行上下文</h3><p>Execution Context（执行上下文）就是定义变量或函数有权访问的其他数据，并决定了他们的行为。<br>根据所在环境的不同一共有三种类型：</p><ul><li>全局执行上下文<br>  默认、最基础的执行上下文，且一个程序只能存在一个全局上下文</li><li>函数执行上下文<br>  每次 <strong>调用</strong> 都会创建一个新的执行上下文</li><li>Eval 函数执行上下文<br>  运行在 eval 函数内的代码有着自己的执行上下文</li></ul><h2 id="执行栈"><a href="#执行栈" class="headerlink" title="执行栈"></a>执行栈</h2><p>先进后出的结构，用于存储代码执行期间创建的所有执行上下文<br>JavaScript 引擎开始读取脚本时，先默认创建一个全局执行上下文并将其推入栈底，每发生一个函数调用，引擎就会为该函数创建一个新的执行上下文并压入栈。引擎会运行处于执行栈栈顶的函数，运行完后，其对应的上下文从栈中弹出，交还控制权给当前执行上下文的下一个执行上下文<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">y</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> sum = foo1(y) + <span class="number">1</span></div><div class="line">  <span class="built_in">console</span>.log(sum)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo1</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> x+<span class="number">1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(<span class="number">5</span>)</div></pre></td></tr></table></figure></p><p>执行栈简图如下：<br><img src="/2018/12/08/Execution-Context/QQ20181208-174019@2x.png" alt="QQ20181208-174019@2x.png" title=""><br>注：每次函数调用都会创建新的 执行上下文，哪怕是递归调用</p><h2 id="执行上下文的创建"><a href="#执行上下文的创建" class="headerlink" title="执行上下文的创建"></a>执行上下文的创建</h2><p>执行上下文分两个阶段创建： 1）创建阶段 2）执行阶段</p><h3 id="创建阶段（函数被调用，代码未执行）"><a href="#创建阶段（函数被调用，代码未执行）" class="headerlink" title="创建阶段（函数被调用，代码未执行）"></a>创建阶段（函数被调用，代码未执行）</h3><pre><code>1. 初始化作用域链2. 创建变量对象3. 创建参数对象，检查参数上下文，初始化其名称和值并创建一个引用拷贝4. 扫描函数声明，对于未发现的函数在变量对象中创建一个同名属性，如果已经存在的发生**覆盖**5. 扫描变量声明，未被发现的在变量对象中创建一个同名属性并初始化为 undefined，如果已存在，**跳过**6. 确定上下文中的 this</code></pre><p>注：如果 let 以及 const 声明创建阶段会跳过初始化</p><h3 id="执行阶段"><a href="#执行阶段" class="headerlink" title="执行阶段"></a>执行阶段</h3><p>赋值、寻找函数引用以及解释/执行代码</p><p>所以执行上下文类似结构为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">executionContextObj = &#123;</div><div class="line">    <span class="string">'scopeChain'</span>: &#123; <span class="comment">/* 变量对象 + 所有父级执行上下文的变量对象*/</span> &#125;，</div><div class="line">    <span class="string">'variableObject'</span>: &#123; <span class="comment">/* 函数参数、 参数，内部变量以及函数声明 */</span> &#125;，</div><div class="line">    <span class="string">'this'</span>: &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="变量对象（VO）和活动对象（AO）"><a href="#变量对象（VO）和活动对象（AO）" class="headerlink" title="变量对象（VO）和活动对象（AO）"></a>变量对象（VO）和活动对象（AO）</h2><p>当当前上下文执行时，变量对象变成活动对象，所以区别只是同一对象在执行上下文的不同阶段而已</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">funtion foo(i) &#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="string">'hello'</span></div><div class="line">    <span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span> <span class="title">foo2</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">&#125;</div><div class="line">foo(<span class="number">10</span>)</div><div class="line"></div><div class="line">函数调用的创建阶段：</div><div class="line"></div><div class="line">fooExecutionContext = &#123;</div><div class="line">    scopeChain: &#123; ... &#125;,</div><div class="line">    variableObject: &#123;</div><div class="line">        <span class="built_in">arguments</span>: &#123;</div><div class="line">            <span class="number">0</span>: <span class="number">22</span>,</div><div class="line">            length: <span class="number">1</span></div><div class="line">        &#125;,</div><div class="line">        i: <span class="number">22</span>,</div><div class="line">        c: pointer to <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span></div><div class="line"><span class="function">        <span class="title">a</span>: <span class="title">undefined</span>,</span></div><div class="line"><span class="function">        <span class="title">b</span>: <span class="title">undefined</span></span></div><div class="line"><span class="function">    &#125;,</span></div><div class="line"><span class="function">    <span class="title">this</span>: </span>&#123; ... &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">执行阶段：</div><div class="line"></div><div class="line">fooExecutionContext = &#123;</div><div class="line">    scopeChain: &#123; ... &#125;,</div><div class="line">    variableObject: &#123;</div><div class="line">        <span class="built_in">arguments</span>: &#123;</div><div class="line">            <span class="number">0</span>: <span class="number">22</span>,</div><div class="line">            length: <span class="number">1</span></div><div class="line">        &#125;,</div><div class="line">        i: <span class="number">22</span>,</div><div class="line">        c: pointer to <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span></div><div class="line"><span class="function">        <span class="title">a</span>: '<span class="title">hello</span>',</span></div><div class="line"><span class="function">        <span class="title">b</span>: <span class="title">pointer</span> <span class="title">to</span> <span class="title">function</span> <span class="title">privateB</span>(<span class="params"></span>)</span></div><div class="line"><span class="function">    &#125;,</span></div><div class="line"><span class="function">    <span class="title">this</span>: </span>&#123; ... &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h2><p>变量以及函数声明的提升，原理就在于解析器创建变量对象的过程，不啰嗦。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>知其然，知其所以然，想必是极好的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;又来过基础&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;执行上下文&quot;&gt;&lt;a href=&quot;#执行上下文&quot; class=&quot;headerlink&quot; title=&quot;执行上下文&quot;&gt;&lt;/a&gt;执行上下文&lt;/h2&gt;&lt;h3 id=&quot;什么是执行上下文&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="javascript" scheme="https://somnus13.github.io/categories/javascript/"/>
    
    
      <category term="基础" scheme="https://somnus13.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 变量与内存</title>
    <link href="https://somnus13.github.io/2018/12/01/js-types/"/>
    <id>https://somnus13.github.io/2018/12/01/js-types/</id>
    <published>2018-12-01T05:59:55.000Z</published>
    <updated>2018-12-01T08:06:03.746Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-变量与内存"><a href="#JavaScript-变量与内存" class="headerlink" title="JavaScript 变量与内存"></a>JavaScript 变量与内存</h1><blockquote><p>知其然，知其所以然</p></blockquote><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>根据 ECMA-262 定义，JavaScript 中的变量区别于其他编程语言。JavaScript 中的变量只是用于保存特定值的名称，而变量的值数据类型可在脚本的生命周期改变。<br>也就是说“<strong>变量无类型，有类型的是变量的值</strong>”</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>JavaScript 中变量值可能包含两种数据类型：<strong>基本类型</strong> 和 <strong>引用类型</strong>。 </p><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><p>ES5 中有五种基本数据类型：<strong>Undefined Null Boolean Number String</strong>，ES6 新增 <strong>Symbol</strong><br>基本类型数据都是保存在<strong>栈</strong>中的简单数据，按值来访问的，可直接操作保存在变量中的实际的值<br>基本类型的值是不允许更改的，当你修改了变量的值，所做的只是创建了新值并复制到了原先变量值的位置</p><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>引用类型的值为保存在内存中的对象，区别于其他语言，JavaScript 中不允许直接访问内存中的位置，也就是说不能直接操作对象的内存空间。而实际上对对象的操作是对对象引用的操作。</p><h3 id="动态属性"><a href="#动态属性" class="headerlink" title="动态属性"></a>动态属性</h3><p>两种类型定义方式类似：创建变量并为变量赋值，但不同类型值可进行的操作却有不同：<br>我们可以为引用类型数据添加属性和方法，也可改变和删除属性和方法，而对于基本类型是不可以的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = &#123;&#125;</div><div class="line">a.b = <span class="string">'test'</span></div><div class="line">a.b <span class="comment">//test</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">a.test = <span class="string">'test data'</span></div><div class="line">a.test <span class="comment">//undefined</span></div></pre></td></tr></table></figure></p><h3 id="变量复制"><a href="#变量复制" class="headerlink" title="变量复制"></a>变量复制</h3><p>除了变量存储方式不同，变量的复制也存在着不同<br><a id="more"></a><br>向一个变量复制一个基本类型的值时，会创建新值然后赋值到新变量分配的位置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> b = a;</div><div class="line"></div><div class="line">复制前的变量对象</div><div class="line">  ________________________________</div><div class="line"> |          |                     |</div><div class="line"> |          |                     |</div><div class="line"> |__________|_____________________|</div><div class="line"> |          |                     |</div><div class="line"> |     a    |          <span class="number">1</span>          |</div><div class="line"> |__________|_____________________|</div><div class="line"></div><div class="line"> ___________________________________</div><div class="line"></div><div class="line"> 复制后的变量对象</div><div class="line">  ________________________________</div><div class="line"> |          |                     |</div><div class="line"> |     a    |          <span class="number">1</span>          |</div><div class="line"> |__________|_____________________|</div><div class="line"> |          |                     |</div><div class="line"> |     b    |          <span class="number">1</span>          |</div><div class="line"> |__________|_____________________|</div></pre></td></tr></table></figure></p><p>当从一个变量向另一个变量复制引用类型的值时，同样的也会将存储在变量对象中的值复制一份并放置与新变量分配的空间，不同的是值的副本是一个指针，指针指向存储在堆内存的对象。<br>复制后，两个变量引用同一个对象，即修改一个变量的值也会影响另一个。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> obj2 = obj1;</div><div class="line">obj1.name = <span class="string">'test'</span>;</div><div class="line">obj2.name <span class="comment">//test</span></div><div class="line"></div><div class="line">复制前的变量对象                                             堆内存</div><div class="line">  ________________________________                ________________________________________</div><div class="line"> |          |                     |               |                                       |</div><div class="line"> |          |                     |               |                                       |</div><div class="line"> |__________|_____________________|               |        ___________                    |</div><div class="line"> |          |                     |               |        |          |                   |</div><div class="line"> |    obj1  |      object 引用   ---------------------------|  object  |                   |</div><div class="line"> |__________|_____________________|       |       |        |__________|                   |</div><div class="line">                                          |       |                                       |</div><div class="line"> ___________________________________      |       |_______________________________________|</div><div class="line">                                          |</div><div class="line"> 复制后的变量对象                     |</div><div class="line">  ________________________________        | </div><div class="line"> |          |                     |       |</div><div class="line"> |   obj1   |      object 引用   ----------|</div><div class="line"> |__________|_____________________|       |</div><div class="line"> |          |                     |       |</div><div class="line"> |   obj2   |      object 引用   ----------| </div><div class="line"> |__________|_____________________|</div></pre></td></tr></table></figure></p><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><p>JavaScript 具有自动垃圾收集机制，也就是说执行环境会负责追踪代码执行过程中使用的内存，而非 C C++ 之类的语言需要开发者去手动释放内存。<br>故编写 JavaScript 脚本时，开发人员无需关注内存的使用，所需要的内存分配以及回收都实现了自动管理。<br>垃圾收集器会按照固定的时间间隔（或代码执行的预定时间间隔），找出不再继续使用的变量然后释放其占用的内存。<br>垃圾收集器运行时，会对无用的变量进行标记，备将来收回所占内存。而标记无用变量的策略因实现而异，具体到浏览器的实现主要有如下两种：</p><h2 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h2><p>最常用的垃圾收集方式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">来自MDN https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Memory_Management</div><div class="line"></div><div class="line">把“对象是否不再需要”简化定义为“对象是否可以获得”。</div><div class="line"></div><div class="line">假定设置一个叫做根（root）的对象（在Javascript里，根是全局对象）。垃圾回收器将定期从根开始，找所有从根开始引用的对象，然后找这些对象引用的对象……从根开始，垃圾回收器将找到所有可以获得的对象和收集所有不能获得的对象。</div><div class="line"></div><div class="line">从2012年起，所有现代浏览器都使用了标记-清除垃圾回收算法。所有对JavaScript垃圾回收算法的改进都是基于标记-清除算法的改进，并没有改进标记-清除算法本身和它对“对象是否不再需要”的简化定义。</div></pre></td></tr></table></figure></p><h2 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h2><p>跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型的值赋值给该变量，则这个值的引用次数为 1。 如果同一个值被赋值给另一个变量，引用次数加一。相反如果包含值引用的变量取得另一个值，那么引用次数减 1.当这个值的应用次数变成 0，则对其占用内存空间进行回收。</p><h3 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h3><p>循环引用，两个值的引用次数都是 2，不会被回收<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> a = &#123;&#125;</div><div class="line"><span class="keyword">var</span> b = &#123;&#125;</div><div class="line">a.bAttr = b;</div><div class="line">b.aAttr = a;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="写在结尾"><a href="#写在结尾" class="headerlink" title="写在结尾"></a>写在结尾</h2><p>基础！基础！基础！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript-变量与内存&quot;&gt;&lt;a href=&quot;#JavaScript-变量与内存&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 变量与内存&quot;&gt;&lt;/a&gt;JavaScript 变量与内存&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;知其然，知其所以然&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;p&gt;根据 ECMA-262 定义，JavaScript 中的变量区别于其他编程语言。JavaScript 中的变量只是用于保存特定值的名称，而变量的值数据类型可在脚本的生命周期改变。&lt;br&gt;也就是说“&lt;strong&gt;变量无类型，有类型的是变量的值&lt;/strong&gt;”&lt;/p&gt;
&lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h2&gt;&lt;p&gt;JavaScript 中变量值可能包含两种数据类型：&lt;strong&gt;基本类型&lt;/strong&gt; 和 &lt;strong&gt;引用类型&lt;/strong&gt;。 &lt;/p&gt;
&lt;h3 id=&quot;基本类型&quot;&gt;&lt;a href=&quot;#基本类型&quot; class=&quot;headerlink&quot; title=&quot;基本类型&quot;&gt;&lt;/a&gt;基本类型&lt;/h3&gt;&lt;p&gt;ES5 中有五种基本数据类型：&lt;strong&gt;Undefined Null Boolean Number String&lt;/strong&gt;，ES6 新增 &lt;strong&gt;Symbol&lt;/strong&gt;&lt;br&gt;基本类型数据都是保存在&lt;strong&gt;栈&lt;/strong&gt;中的简单数据，按值来访问的，可直接操作保存在变量中的实际的值&lt;br&gt;基本类型的值是不允许更改的，当你修改了变量的值，所做的只是创建了新值并复制到了原先变量值的位置&lt;/p&gt;
&lt;h3 id=&quot;引用类型&quot;&gt;&lt;a href=&quot;#引用类型&quot; class=&quot;headerlink&quot; title=&quot;引用类型&quot;&gt;&lt;/a&gt;引用类型&lt;/h3&gt;&lt;p&gt;引用类型的值为保存在内存中的对象，区别于其他语言，JavaScript 中不允许直接访问内存中的位置，也就是说不能直接操作对象的内存空间。而实际上对对象的操作是对对象引用的操作。&lt;/p&gt;
&lt;h3 id=&quot;动态属性&quot;&gt;&lt;a href=&quot;#动态属性&quot; class=&quot;headerlink&quot; title=&quot;动态属性&quot;&gt;&lt;/a&gt;动态属性&lt;/h3&gt;&lt;p&gt;两种类型定义方式类似：创建变量并为变量赋值，但不同类型值可进行的操作却有不同：&lt;br&gt;我们可以为引用类型数据添加属性和方法，也可改变和删除属性和方法，而对于基本类型是不可以的&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a.b = &lt;span class=&quot;string&quot;&gt;&#39;test&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a.b &lt;span class=&quot;comment&quot;&gt;//test&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a.test = &lt;span class=&quot;string&quot;&gt;&#39;test data&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a.test &lt;span class=&quot;comment&quot;&gt;//undefined&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;变量复制&quot;&gt;&lt;a href=&quot;#变量复制&quot; class=&quot;headerlink&quot; title=&quot;变量复制&quot;&gt;&lt;/a&gt;变量复制&lt;/h3&gt;&lt;p&gt;除了变量存储方式不同，变量的复制也存在着不同&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://somnus13.github.io/categories/javascript/"/>
    
    
      <category term="基础" scheme="https://somnus13.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>iPhone X 适配</title>
    <link href="https://somnus13.github.io/2018/02/13/iphone-x/"/>
    <id>https://somnus13.github.io/2018/02/13/iphone-x/</id>
    <published>2018-02-13T14:06:28.000Z</published>
    <updated>2018-02-13T14:24:16.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这篇文章迟到了很久，暂且记录一下自己遇到的坑</p></blockquote><h2 id="html5网页"><a href="#html5网页" class="headerlink" title="html5网页"></a>html5网页</h2><p>因为目前就职公司采用的H5响应式驱动的主体项目，app 都是基于的 webview 开发，当 iPhone X 上市后，适配促成了新的兼容任务。</p><h3 id="新属性"><a href="#新属性" class="headerlink" title="新属性"></a>新属性</h3><p>为了更好的适配 iPhone X，iOS 11 新增了几个特性用于处理那诡异的刘海屏。苹果公司还对 iPhone X 的屏幕内容作了安全距离限定，美其名曰为了更好的用户体验，其实就是为了填自己的坑。。</p><h4 id="viewport-fit"><a href="#viewport-fit" class="headerlink" title="viewport-fit"></a>viewport-fit</h4><p>iOS11 新增特性，为了适应 iPhone X 对现有的 viewport meta 标签的一个扩展，定义网页在可视窗口的布局方式。safari 浏览器中开发模式可勾选支持调试。<br>属性：  </p><ul><li>contain：可视窗口包含网页内容，即内容会在安全区域显示</li><li>cover：网页内容覆盖可视窗口</li><li>auto： 默认值，同contain表现是一致的</li></ul><p>详情见<a href="https://www.w3.org/TR/css-round-display-1/#viewport-fit-descriptor" target="_blank" rel="external">文档</a></p><h4 id="constant"><a href="#constant" class="headerlink" title="constant"></a>constant</h4><p>iOS11 新增特性，webkit 的 css 函数，用于设定安全区域与边界的距离，有四个预定义变量。</p><ul><li>safe-area-inset-left：安全区域距离左边边界距离</li><li>safe-area-inset-right：安全区域距离右边边界距离</li><li>safe-area-inset-top：安全区域距离顶部边界距离</li><li>safe-area-inset-bottom：安全区域距离底部边界距离</li></ul><p>我们需要关注的就是 safe-area-inset-bottom，对应也就是底部小黑条的处理<br>同时需要注意的就是，<strong>viewport-fit 为 contain 时，constant 函数是不起作用的，需要配合 cover 使用</strong>，不支持 constant 的浏览器会被忽略此属性  </p><a id="more"></a><p>其实有些人会有些疑惑，很明显设计稿下面空出的距离就是 68 像素（2倍设计稿），但是网页适配你要兼容旋转屏幕，所以乖乖用人家的不要闹。</p><h4 id="env（iOS-11-2后支持，兼容处理）"><a href="#env（iOS-11-2后支持，兼容处理）" class="headerlink" title="env（iOS 11.2后支持，兼容处理）"></a>env（iOS 11.2后支持，兼容处理）</h4><p>这是当初比较坑的一点，同事的突然一波更新，整个人陷入绝望，窝草！说好的适配呢，都不生效了！！<br>后来又查了查，哦，11.2 以后支持这个属性了，constant 废除了。。<br>可定义的值并无任何变化，只是函数名变了，略。</p><h3 id="适配方案"><a href="#适配方案" class="headerlink" title="适配方案"></a>适配方案</h3><p>官方给的建议就是，列表或者内容建议通底显示，黑条压了就压了，反正可以滑动内容，至于底部有悬浮固定操作的交互时候，建议做兼容处理。  </p><ol><li><p>设置网页窗口的布局方式<br> viewport meta 标签添加 viewport-fit=cover属性</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, viewport-fit=cover&quot;&gt;</div></pre></td></tr></table></figure></li><li><p>页面内容主体限定安全区域  </p><ol><li><p>为了避免列表尾项或者主体内容受到小黑条遮挡，我们需要对 body 做一些处理  </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line">    /* iOS 11.0 */</div><div class="line">    padding-bottom: constant(safe-area-inset-bottom);</div><div class="line">    /* 11.2+ */</div><div class="line">    padding-bottom: env(safe-area-inset-bottom);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>底部悬浮交互按钮<br> 一般大多数需要做兼容处理的就是这种，web应用的底部导航菜单。<br> 我们需要对吸底按钮做内边距处理，增加扩展高度，注意吸底元素最好设置个背景色，不然会镂空网站主体背景色  </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    /* iOS 11.0 */</div><div class="line">    padding-bottom: constant(safe-area-inset-bottom);</div><div class="line">    /* 11.2+ */</div><div class="line">    padding-bottom: env(safe-area-inset-bottom);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p> 或者通过 css 的计算函数 calc 来增加高度   </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  height: calc(50px(预设值) + constant(safe-area-inset-bottom));</div><div class="line">  height: calc(50px(预设值) + env(safe-area-inset-bottom));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p> 除此之外，有些悬浮按钮也需要处理，例如返回顶部之类，同样的通过计算函数增加定位元素的 bottom 值  </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  bottom: calc(50px(预设值) + constant(safe-area-inset-bottom));</div><div class="line">  bottom: calc(50px(预设值) + env(safe-area-inset-bottom));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p> 需要注意的是：<strong>calc 属性计算中间的空格不可忽略，代码压缩会有点坑此处</strong></p></li></ol></li><li><p>属性兼容处理 support<br> 我们只希望 iPhoneX 才需要新增适配样式，我们可以配合 @supports 实现：  </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@supports (bottom: constant(safe-area-inset-bottom)) or (bottom: env(safe-area-inset-bottom)) &#123;</div><div class="line">  fixedDiv &#123;</div><div class="line">    margin-bottom: constant(safe-area-inset-bottom);</div><div class="line">    margin-bottom: env(safe-area-inset-bottom);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><h2 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h2><p>小程序的处理相对就比较无脑，通过或许手机信息接口拿到是否为 iPhone X,然后做相应的样式处理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 获取手机信息</div><div class="line">wx.getSystemInfo(&#123;</div><div class="line">  success: function (res) &#123;</div><div class="line">    let model = res.model.substring(0, res.model.indexOf(&quot;X&quot;)) + &quot;X&quot;;</div><div class="line">    if (model == &apos;iPhone X&apos;) &#123;</div><div class="line">      that.globalData.isIpx = true  </div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p><strong>注意：小程序 webview 中的适配采用h5的网页适配属性不生效，需要通过参数传递然后动态添加 class 做样式处理</strong></p><h2 id="app"><a href="#app" class="headerlink" title="app"></a>app</h2><p>如果业务逻辑是由 app 驱动，直接甩好 webview 距离就好，如果是 web 驱动，建议移交 web 来做底部兼容</p><h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>大过年的在家懒了好几天终于开始用笔记本干正事系列。。(碎碎念，讲道理浏览量这么少的东西，我就没必要定性自己写的是技术博客了)</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这篇文章迟到了很久，暂且记录一下自己遇到的坑&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;html5网页&quot;&gt;&lt;a href=&quot;#html5网页&quot; class=&quot;headerlink&quot; title=&quot;html5网页&quot;&gt;&lt;/a&gt;html5网页&lt;/h2&gt;&lt;p&gt;因为目前就职公司采用的H5响应式驱动的主体项目，app 都是基于的 webview 开发，当 iPhone X 上市后，适配促成了新的兼容任务。&lt;/p&gt;
&lt;h3 id=&quot;新属性&quot;&gt;&lt;a href=&quot;#新属性&quot; class=&quot;headerlink&quot; title=&quot;新属性&quot;&gt;&lt;/a&gt;新属性&lt;/h3&gt;&lt;p&gt;为了更好的适配 iPhone X，iOS 11 新增了几个特性用于处理那诡异的刘海屏。苹果公司还对 iPhone X 的屏幕内容作了安全距离限定，美其名曰为了更好的用户体验，其实就是为了填自己的坑。。&lt;/p&gt;
&lt;h4 id=&quot;viewport-fit&quot;&gt;&lt;a href=&quot;#viewport-fit&quot; class=&quot;headerlink&quot; title=&quot;viewport-fit&quot;&gt;&lt;/a&gt;viewport-fit&lt;/h4&gt;&lt;p&gt;iOS11 新增特性，为了适应 iPhone X 对现有的 viewport meta 标签的一个扩展，定义网页在可视窗口的布局方式。safari 浏览器中开发模式可勾选支持调试。&lt;br&gt;属性：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;contain：可视窗口包含网页内容，即内容会在安全区域显示&lt;/li&gt;
&lt;li&gt;cover：网页内容覆盖可视窗口&lt;/li&gt;
&lt;li&gt;auto： 默认值，同contain表现是一致的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;详情见&lt;a href=&quot;https://www.w3.org/TR/css-round-display-1/#viewport-fit-descriptor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;constant&quot;&gt;&lt;a href=&quot;#constant&quot; class=&quot;headerlink&quot; title=&quot;constant&quot;&gt;&lt;/a&gt;constant&lt;/h4&gt;&lt;p&gt;iOS11 新增特性，webkit 的 css 函数，用于设定安全区域与边界的距离，有四个预定义变量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;safe-area-inset-left：安全区域距离左边边界距离&lt;/li&gt;
&lt;li&gt;safe-area-inset-right：安全区域距离右边边界距离&lt;/li&gt;
&lt;li&gt;safe-area-inset-top：安全区域距离顶部边界距离&lt;/li&gt;
&lt;li&gt;safe-area-inset-bottom：安全区域距离底部边界距离&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们需要关注的就是 safe-area-inset-bottom，对应也就是底部小黑条的处理&lt;br&gt;同时需要注意的就是，&lt;strong&gt;viewport-fit 为 contain 时，constant 函数是不起作用的，需要配合 cover 使用&lt;/strong&gt;，不支持 constant 的浏览器会被忽略此属性  &lt;/p&gt;
    
    </summary>
    
      <category term="移动端" scheme="https://somnus13.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="iOS" scheme="https://somnus13.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>windows 下面那些让人抓狂的东西</title>
    <link href="https://somnus13.github.io/2017/10/08/windows-about/"/>
    <id>https://somnus13.github.io/2017/10/08/windows-about/</id>
    <published>2017-10-08T14:24:29.000Z</published>
    <updated>2017-10-08T14:36:18.929Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作为一个混迹windows的程序员，没事重装一下电脑简直和吃饭一样简单，但是每次装完都会被有些东东恶心到。。</p></blockquote><h2 id="系统重装"><a href="#系统重装" class="headerlink" title="系统重装"></a>系统重装</h2><h3 id="开机的无效索引"><a href="#开机的无效索引" class="headerlink" title="开机的无效索引"></a>开机的无效索引</h3><p>装完系统，如果是u盘安装之类的话，大都会多出一个无效索引，也就是旧系统的索引，不能忍！</p><ol><li><strong>Win + R</strong> 键入 <strong>msconfig</strong>，打开系统配置</li><li>点击 “<strong>引导</strong>” 菜单进行管理，删除无效项即可</li></ol><h3 id="window-old文件夹删除"><a href="#window-old文件夹删除" class="headerlink" title="window.old文件夹删除"></a>window.old文件夹删除</h3><p>“Windows.old” 文件夹包含升级win10前系统的 “Windows”、“Program Files”、“Users”这三个目录中的文件，将之前的系统文件和安装的程序文件都做了备份。这是微软出于人性化的考虑，让没有来得及备份重要文件的用户可以再次选择备份。<br>对不起，我不打算考虑！  </p><ol><li>系统盘右键 - 属性 - 磁盘清理</li><li>扫描完成 - 清理系统文件 列表中勾选”以前的Windows安装”，确定，待完成退出<a id="more"></a></li></ol><h3 id="dll库error"><a href="#dll库error" class="headerlink" title="dll库error"></a>dll库error</h3><p>MSVCR10.dll曾经困扰我多次的东东，每次都要百度一下，捉急！<br>安装对应版本的VC库 vcredist_x64.exe 和vcredist_x86.exe<br>下载地址：<a href="http://www.microsoft.com/zh-cn/download/details.aspx?id=30679" target="_blank" rel="external">vcredist.exe</a></p><h2 id="软件error"><a href="#软件error" class="headerlink" title="软件error"></a>软件error</h2><h3 id="chrome"><a href="#chrome" class="headerlink" title="chrome"></a>chrome</h3><p>熟悉的提示：“Google Chrome 未响应。是否立即重新启动”，选项给你的选择并不能解救你。  </p><ol><li><strong>Win + R</strong> 输入 <strong>cmd</strong> 打开命令行</li><li>输入 <strong>taskkill /f /im chrome.exe</strong> ,回车执行</li><li>重新打开<strong>Google Chrome</strong></li></ol><h3 id="Wampserver"><a href="#Wampserver" class="headerlink" title="Wampserver"></a>Wampserver</h3><p>经常本地 demo 手机测试都会暂时用它架一个静态服务器，之前 php 学习用的工具，但 php 早忘光了。安装完成不做一点配置的话就会出现手机访问 403，做个备份省的再查。</p><ol><li>关闭防火墙</li><li><p>修改 <strong>apache</strong> 目录下的 <strong>httpd.conf</strong>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//path: apache\apache2.4.17\conf\httpd.conf 291行左右</div><div class="line">修改 Require local =&gt; Require all granted</div></pre></td></tr></table></figure></li><li><p>修改 <strong>httpd-vhosts.conf</strong> 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//path: 目录下搜索 httpd-vhosts.conf 找到 &lt;VirtualHost *:80&gt;节点上的所有虚拟站点</div><div class="line">修改 Require local =&gt; Require all granted</div></pre></td></tr></table></figure></li><li><p>重启服务</p></li></ol><p>注：此方法仅支持2.4以后的版本</p><h3 id="百度云"><a href="#百度云" class="headerlink" title="百度云"></a>百度云</h3><p>说不上是错误，但是着实恶心，安装完百度云自动帮你在我的电脑添加一个“百度云管家”的盘符快捷方式，真心逼死强迫症。<br>打开百度云，设置 - 基本 - 在我的电脑中显示百度云管家，默认是勾选状态，去除勾选 - 应用 - 确定。<br>如果成功，下面的可以无视。</p><ol><li><strong>Win + R</strong> 键入 <strong>regedit</strong> 进入注册表编辑</li><li>依次展开 <strong>HKEY_LOCAL_MACHINE</strong> \ <strong>SOFTWARE</strong> \ <strong>Microsoft</strong> \ <strong>Windows</strong> \ <strong>CurrentVersion</strong> \ <strong>Explorer</strong> \ <strong>MyComputer</strong> \ <strong>NameSpace</strong>，删除 <strong>NameSpace</strong> 下面的 <strong>{679F137C-3162-45da-BE3C-2F9C3D093F64}</strong> 项 若无，跳至第4步。</li><li>在 <strong>NameSpace</strong> 项上点右键 - 权限，依次操作 - 高级 - Administrators - 编辑 - 创建子项 - 拒绝</li><li>依次展开 <strong>HKEY_CURRENT_USER</strong> \ <strong>Software</strong> \ <strong>Microsoft</strong> \ <strong>Windows</strong> \ <strong>CurrentVersion</strong> \ <strong>Explorer</strong> \ <strong>MyComputer</strong> \ <strong>NameSpace</strong> ，删除 <strong>{679F137C-3162-45da-BE3C-2F9C3D093F64}</strong> 项</li><li>退出刷新。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;作为一个混迹windows的程序员，没事重装一下电脑简直和吃饭一样简单，但是每次装完都会被有些东东恶心到。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;系统重装&quot;&gt;&lt;a href=&quot;#系统重装&quot; class=&quot;headerlink&quot; title=&quot;系统重装&quot;&gt;&lt;/a&gt;系统重装&lt;/h2&gt;&lt;h3 id=&quot;开机的无效索引&quot;&gt;&lt;a href=&quot;#开机的无效索引&quot; class=&quot;headerlink&quot; title=&quot;开机的无效索引&quot;&gt;&lt;/a&gt;开机的无效索引&lt;/h3&gt;&lt;p&gt;装完系统，如果是u盘安装之类的话，大都会多出一个无效索引，也就是旧系统的索引，不能忍！&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Win + R&lt;/strong&gt; 键入 &lt;strong&gt;msconfig&lt;/strong&gt;，打开系统配置&lt;/li&gt;
&lt;li&gt;点击 “&lt;strong&gt;引导&lt;/strong&gt;” 菜单进行管理，删除无效项即可&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;window-old文件夹删除&quot;&gt;&lt;a href=&quot;#window-old文件夹删除&quot; class=&quot;headerlink&quot; title=&quot;window.old文件夹删除&quot;&gt;&lt;/a&gt;window.old文件夹删除&lt;/h3&gt;&lt;p&gt;“Windows.old” 文件夹包含升级win10前系统的 “Windows”、“Program Files”、“Users”这三个目录中的文件，将之前的系统文件和安装的程序文件都做了备份。这是微软出于人性化的考虑，让没有来得及备份重要文件的用户可以再次选择备份。&lt;br&gt;对不起，我不打算考虑！  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;系统盘右键 - 属性 - 磁盘清理&lt;/li&gt;
&lt;li&gt;扫描完成 - 清理系统文件 列表中勾选”以前的Windows安装”，确定，待完成退出
    
    </summary>
    
      <category term="OS" scheme="https://somnus13.github.io/categories/OS/"/>
    
    
      <category term="windows" scheme="https://somnus13.github.io/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>从Repaint/Reflow到css选择器</title>
    <link href="https://somnus13.github.io/2017/10/05/css-seletor/"/>
    <id>https://somnus13.github.io/2017/10/05/css-seletor/</id>
    <published>2017-10-04T16:37:01.000Z</published>
    <updated>2019-01-17T08:58:41.061Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是Repaint-Reflow"><a href="#什么是Repaint-Reflow" class="headerlink" title="什么是Repaint/Reflow?"></a>什么是Repaint/Reflow?</h3><p>先扒一张图，来解释下浏览器的工作流程  </p><img src="/2017/10/05/css-seletor/Repaint-Reflow.png" alt="Repaint-Reflow.png" title=""> <p>上图可归纳为四步：  </p><ol><li>解析构建 DOM 树<br> 渲染引擎开始解析 html 文档，转换树中的标签或者生成的标签到 DOM 节点，这时的它称为内容树</li><li>构建渲染树<br> 解析所有 CSS,并据此计算节点样式，创建渲染树</li><li>布局渲染树<br> 从根节点递归调用，计算元素的大小位置，并把每个节点放在该出现的精准坐标位置</li><li>绘制渲染树<br> 遍历渲染树，每个节点使用 UI 后端层绘制</li></ol><p>从以上不难看出，Repaint 和 Reflow 发生在了第三四步，故给出定义：<br>浏览器在解析页面时，根据 css 以及 js来计算并把相应的元素置于该出现的位置，这个过程就是 Reflow;<br>当元素的位置大小颜色确定后，浏览器会按照各自的属性进行绘制，这个过程就是 Repaint。故我们需要避免引发此类操作，<br>以此来提高渲染速度。</p><a id="more"></a><h3 id="引起Repaint-Reflow的一些操作"><a href="#引起Repaint-Reflow的一些操作" class="headerlink" title="引起Repaint/Reflow的一些操作"></a>引起Repaint/Reflow的一些操作</h3><p>Reflow 的成本比 Repaint 的成本高得多的多。DOM Tree 里的每个结点都会有 reflow 方法，一个结点的 reflow 很有可能导致子结点，甚至父点以及同级结点的 reflow。在一些高性能的电脑上也许还没什么，但是如果 reflow 发生在手机上，那么这个过程是非常痛苦和耗电的。 所以，下面这些动作有很大可能会是成本比较高的。</p><ul><li>当你增加、删除、修改 DOM 结点时，会导致 Reflow 或 Repaint。</li><li>当你移动 DOM 的位置，或是搞个动画的时候。</li><li>当你修改 CSS 样式的时候。</li><li>当你 Resize 窗口的时候（移动端没有这个问题），或是滚动的时候。</li><li>当你修改网页的默认字体时。<br>  注：display:none 会触发 reflow，而 visibility:hidden 只会触发 repaint，因为没有发现位置变化。</li></ul><h3 id="如何优化"><a href="#如何优化" class="headerlink" title="如何优化"></a>如何优化</h3><p>Reflow是不可避免的，只能将Reflow对性能的影响减到最小,给出下面几条建议：</p><ul><li><p>不要一条一条地修改 DOM 的样式。与其这样，还不如预先定义好 css 的 class，然后修改 DOM 的 className：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 不推荐的写法</div><div class="line">var left = 10,</div><div class="line">top = 10;</div><div class="line">el.style.left = left + &quot;px&quot;;</div><div class="line">el.style.top  = top  + &quot;px&quot;;</div><div class="line">// 推荐写法</div><div class="line">el.className += &quot; theclassname&quot;;</div></pre></td></tr></table></figure></li><li><p>把 DOM 离线后修改。如：<br>  a&gt; 使用 documentFragment 对象在内存里操作 DOM。<br>  b&gt; 先把 DOM 给 display:none (有一次 repaint)，然后你想怎么改就怎么改。比如修改 100 次，然后再把他显示出来。<br>  c&gt; clone 一个 DOM 节点到内存里，然后想怎么改就怎么改，改完后，和在线的那个的交换一下。</p></li><li>不要把 DOM 节点的属性值放在一个循环里当成循环里的变量。不然这会导致大量地读写这个结点的属性。</li><li>尽可能的修改层级比较低的 DOM节点。当然，改变层级比较底的 DOM节点有可能会造成大面积的 reflow，但是也可能影响范围很小。</li><li>为动画的 HTML 元件使用 fixed 或 absoult 的 position，那么修改他们的 CSS 是会大大减小 reflow 。</li><li>尽量不要使用 table 布局。因为可能很小的一个小改动会造成整个 table 的重新布局。</li></ul><h3 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h3><blockquote><p>上面提到了Repaint和Reflow，以及如何优化的问题。我们知道浏览器工作流程第三步就是解析css然后计算元素位置并放置，那么如何从这点上来提高效率呢？这就要提到css的渲染效率了，下面我们来探讨下。</p></blockquote><h3 id="浏览器如何识别你的选择器"><a href="#浏览器如何识别你的选择器" class="headerlink" title="浏览器如何识别你的选择器"></a>浏览器如何识别你的选择器</h3><p>浏览器读取你的选择器，遵循的原则是由右向左读取，换句话讲，读取选择器会由右向左进行。举个栗子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">div.header &gt; ul li p</div></pre></td></tr></table></figure></p><p>上述选择器，浏览器会尝试在你的 html 标签中寻找 p 元素,接着匹配 li 和 ul，最后再去匹配 div.header,所谓的由右到左就是这样。 选择器的最后一部分，也就是最右边的部分被称为 <strong>关键选择器</strong>，而它决定着你的选择器效率的高低。而关键选择器的作用就是提高选择器的效率，每少检查一个给定的规则，就会更有效的将样式匹配给对应的html元素。所以我们的方向就是让关键选择器更加有效性能化更高，那么如何实现呢？很简单，<strong>关键选择器越具体，性能化就越高</strong>。</p><h3 id="选择器效率"><a href="#选择器效率" class="headerlink" title="选择器效率"></a>选择器效率</h3><p>如果你是个合格的前端开发者，对 css 选择器有一定了解的话，应该对那些选择器以及它的优先级不会太陌生。<br>来让我们看下 <a href="http://stevesouders.com/" target="_blank" rel="external">Steve Souders</a> 大神给的优先级排序：</p><ol><li>id选择器 (#id)</li><li>类选择器 (.class)</li><li>标签选择器 (h1,div,p..)</li><li>相邻选择器 (h1+p)</li><li>子选择器 (div &lt; span)</li><li>后代选择器 (div span)</li><li>通配符选择器 (*)</li><li>属性选择器 (a[rel=’’])</li><li>伪类选择器 (a:hover,li:nth-child(1))</li></ol><p>上述选择器优先级按照降序排列，当然还有上面你没提到的行内样式和 !important，建议还是少用为妙，毕竟对于维护来讲太恶心。</p><h3 id="书写高效的css选择器"><a href="#书写高效的css选择器" class="headerlink" title="书写高效的css选择器"></a>书写高效的css选择器</h3><h4 id="来自Mozilla的几点建议（搬运工）"><a href="#来自Mozilla的几点建议（搬运工）" class="headerlink" title="来自Mozilla的几点建议（搬运工）"></a>来自Mozilla的几点建议（搬运工）</h4><p>David在<a href="http://code.google.com/speed/page-speed/docs/rendering.html" target="_blank" rel="external">《Use efficient CSS selectors》</a>中介绍了几种书写高效率的CSS选择器的方法:  </p><ol><li>避免普遍规则</li><li>不要在 ID 选择器前加标签名或类名</li><li>不要在类名选择器前加标签名</li><li>尽可能使用具体的类别</li><li>避免使用后代选择器</li><li>标签分类规则中不应该包含一个子选择器</li><li>子选择器的问题</li><li>借助相关继承关系</li><li>使用范围内的样式表</li></ol><h4 id="一些降低渲染资源消耗的实战经验"><a href="#一些降低渲染资源消耗的实战经验" class="headerlink" title="一些降低渲染资源消耗的实战经验"></a>一些降低渲染资源消耗的实战经验</h4><ol><li><p><strong>十六进制颜色值对位数与大小写</strong><br> 默认标准是大写以及 6 位数标注，建议书写规范，虽然未有确实数据表明不采用写法会对渲染速率有影响。</p></li><li><p><strong>display 与 visibility 差异</strong><br> 两者均用于设置或检索是否显示对象。前者隐藏对象且不保留物理空间，而后者会保存物理空间。浏览器渲染被占据的物理空间时，会有所消耗。建议采用 display:none;</p></li><li><p><strong>border:none; 与 border:0;区别</strong><br> 区别同上, border:0; 把 border 设为 “0” 像素虽然在页面上看不见，但按 border 默认值理解，浏览器依然对 border-width/border-color 进行了渲染，即已经占用了内存值。<br> border:none; 把 border 设为 “none” 即没有，浏览器解析 “none” 时将不作出渲染动作，即不会消耗内存值。 建议使用border:none;</p></li><li><p><strong>不宜过小的图片平铺</strong><br>  一张宽高 1px 的背景图片，虽然文件体积非常之小，但渲染宽高500px的板块需要重复平铺 2500 次。提高背景图片渲染效率跟图片尺寸及体积有关，最大的图片文件体积保持约 70KB。建议采用衡量适中体积及尺寸的背景图片</p></li><li><p><strong>IE的滤镜</strong><br> IE的滤镜除了比较消耗资源外也有兼容性问题。当中有令 PNG 透明的滤镜，可采用 GIF 或 JPG 似透非透的办法来避免使用此滤镜。建议只在 IE6 应用 GIF 透明，因为 IE7 以上已经支持了 PNG 透明。</p></li><li><p><strong>通配符*{margin:0;padding:0;}</strong>   </p><ul><li>号通配符把所有标签都初始化一遍，浏览器的渲染消耗一定的资源。有部分在标签在不同浏览器上几乎无差异，或是某些已经不推荐使用的标签(因为你不会去用它)，它们不需通配符要重新初始化一遍这样做能节省一点资源。  </li><li>推荐方案(代替 reset )：normalize.css(如果没听说过自行百度)  </li></ul></li><li><p><strong>不要添加额外的标签来描述 class 或 id</strong><br> 如果你有一个选择器是以 id 作为关键选择符，请不要添加多余标签名上去。因为 ID 是唯一的，你不要为了一个不存在的理由而降低了匹配的效率。</p><ul><li>不赞成 - button#backButton { }</li><li>不赞成 - .menu-left #newMenuIcon { }</li><li>建议用 - #backButton { }</li><li>建议用 - #newMenuIcon { }</li></ul></li><li><p><strong>尽量选择最特殊的类来存放选择器</strong><br> 降低系统效率的一个最大原因是我们在标签类中用了过多的选择符。通过添加 class 到元素，我们可以将类别进行再细分为 class 类，这样就不用为了一个标签浪费时间去匹配过多的选择符了。</p><ul><li>不赞成 - treeitem[mailfolder=”true”] &gt; treerow &gt; treecell { }</li><li>建议用 - .treecell-mailfolder { }</li></ul></li><li><p><strong>避免子孙选择符</strong><br> 子孙选择符是 CSS 中最耗资源的选择符。他真的是非常的耗资源，尤其是在选择器使用标签类或通用类的时候。很多情况中，我们真正想要的是子选择符。除非有明确说明，在 UI CSS 中是严禁使用子孙选择符的。</p><ul><li>不赞成 - treehead treerow treecell { }</li><li>好一点，但还是不行(参照下一条) - treehead &gt; treerow &gt; treecell { }</li></ul></li><li><p><strong>标签类中不要包含子选择符</strong><br>不要在标签类中使用子选择符。否则，每次元素的出现，都会额外地增加匹配时间。（特别是当选择器似乎多半会被匹配的情况下）</p><ul><li>不赞成 - treehead &gt; treerow &gt; treecell { }</li><li>建议用 - .treecell-header { }</li></ul></li><li><p><strong>留意所有子选择符的使用</strong><br>小心地使用子选择符。如果你能想出一个的不使用他的方法，那么就不要使用。特别是在 RDF 树和菜单会频繁地使用子选择符，像这样。</p><ul><li>不赞成 - treeitem[IsImapServer=”true”] &gt; treerow &gt; .tree-folderpane-icon { } 请记住 RDF 的属性是可以在模板中被复制的！利用这一点，我们可以复制那些想基于该属性改变的子 XUL 元素上的 RDF 属性。</li><li>建议用 - .tree-folderpane-icon[IsImapServer=”true”] { }. </li></ul></li></ol><p>暂时就这么多了，国庆在家没网，更个东西也是费死个老劲。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是Repaint-Reflow&quot;&gt;&lt;a href=&quot;#什么是Repaint-Reflow&quot; class=&quot;headerlink&quot; title=&quot;什么是Repaint/Reflow?&quot;&gt;&lt;/a&gt;什么是Repaint/Reflow?&lt;/h3&gt;&lt;p&gt;先扒一张图，来解释下浏览器的工作流程  &lt;/p&gt;
&lt;img src=&quot;/2017/10/05/css-seletor/Repaint-Reflow.png&quot; alt=&quot;Repaint-Reflow.png&quot; title=&quot;&quot;&gt; 
&lt;p&gt;上图可归纳为四步：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;解析构建 DOM 树&lt;br&gt; 渲染引擎开始解析 html 文档，转换树中的标签或者生成的标签到 DOM 节点，这时的它称为内容树&lt;/li&gt;
&lt;li&gt;构建渲染树&lt;br&gt; 解析所有 CSS,并据此计算节点样式，创建渲染树&lt;/li&gt;
&lt;li&gt;布局渲染树&lt;br&gt; 从根节点递归调用，计算元素的大小位置，并把每个节点放在该出现的精准坐标位置&lt;/li&gt;
&lt;li&gt;绘制渲染树&lt;br&gt; 遍历渲染树，每个节点使用 UI 后端层绘制&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从以上不难看出，Repaint 和 Reflow 发生在了第三四步，故给出定义：&lt;br&gt;浏览器在解析页面时，根据 css 以及 js来计算并把相应的元素置于该出现的位置，这个过程就是 Reflow;&lt;br&gt;当元素的位置大小颜色确定后，浏览器会按照各自的属性进行绘制，这个过程就是 Repaint。故我们需要避免引发此类操作，&lt;br&gt;以此来提高渲染速度。&lt;/p&gt;
    
    </summary>
    
      <category term="html" scheme="https://somnus13.github.io/categories/html/"/>
    
    
      <category term="css" scheme="https://somnus13.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>BFC(Block Formatting Content)</title>
    <link href="https://somnus13.github.io/2017/09/19/bfc/"/>
    <id>https://somnus13.github.io/2017/09/19/bfc/</id>
    <published>2017-09-19T15:24:04.000Z</published>
    <updated>2017-09-19T15:27:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="What-is-BFC"><a href="#What-is-BFC" class="headerlink" title="What is BFC?"></a>What is BFC?</h3><blockquote><p>BFC 是 W3C CSS 2.1 规范中的一个概念，它决定了元素如何对其内容进行定位，以及与其他元素的关系和相互作用。  </p></blockquote><p>当涉及到可视化布局的时候，BFC 为我们提供了一个环境，这个环境规定着其布局的规则，而不同环境之间的布局不会相互影响。<br>想要更好的理解这个概念，需要先理解 Box 和 Formatting Context 的概念。网页的布局核心就是盒子的组成排列，这些盒子就是 Box。盒子的类型和 display 属性决定着这个 Box 的类型。<br>不同类型的 Box，会参与不同的 Formatting Context（决定如何渲染文档的格式结构），然后其内元素就会以不同方式渲染。例如：</p><ul><li>block-level box ：display 属性为 block, list-item, table 的元素，会生成 block-level box，<br>  并参与 block formatting context;</li><li>inline-level box：display 属性为 inline, inline-block, inline-table 的元素，会生成 inline-level box，<br>  并参与 inline formatting context</li></ul><p>而 Formatting Context 是一块渲染区域，它决定着其子元素如何定位，以及与其他元素的位置关系。<br>通过上面一些概念，建议把 BFC 简单理解为一种属性，在具有此属性的容器中，元素按照 BFC 的规则实现布局。比如浮动元素会形成 BFC，这就是为什么我们看到浮动元素布局跟普通文档流的布局有所差别的原因。<br><a id="more"></a></p><h3 id="规则是什么呢"><a href="#规则是什么呢" class="headerlink" title="规则是什么呢"></a>规则是什么呢</h3><p>简单以下几条规则，理解起来不太难。  </p><ul><li>内部的 box 元素会在垂直方向依次放置，也就是文档流的从上而下</li><li>垂直方向距离由 margin（外边距）决定</li><li>其内每个元素的 margin box 的左边和包含块 border box 的左边相接触（由右向左的格式化则相反），浮动也如此</li><li>BFC 的区域不会与其内浮动元素发成重叠</li><li>BFC 就是页面一个隔离的独立容器，内联元素不会对外面元素产生影响，反之亦成立</li><li>计算 BFC 高度的时候，浮动元素也参与计算</li></ul><h3 id="哪些元素会生成-BFC"><a href="#哪些元素会生成-BFC" class="headerlink" title="哪些元素会生成 BFC"></a>哪些元素会生成 BFC</h3><ul><li>根元素</li><li>浮动元素，float 属性不为 none</li><li>绝对定位元素，position 属性为 absolute 或 fixed（absolute的子类）</li><li>display 属性为 inline-block，table-cell，table-caption，flex，inline-flex</li><li>overflow 属性不为 visible 以外值的 css3 中，BFC 叫做 Floe Root，并增加了一些触发条件</li></ul><h3 id="BFC-在布局中的作用"><a href="#BFC-在布局中的作用" class="headerlink" title="BFC 在布局中的作用"></a>BFC 在布局中的作用</h3><ul><li>解决两元素 margin 重叠问题。<br>  要想两个相邻元素不发生垂直方向的 margin 重叠，需要将他们定义在不同的 BFC 中。解决方法即在其中一个元素外包裹一层元素<br>  ，再对包裹元素进行 BFC 触发（声明以上触发 css 属性）。</li><li>解决由于浮动造成的重叠问题。<br>  一般情况下，浮动元素会脱离文档流，即不占用位置。它的性地元素会与它在左上角重叠，但如果两个相邻元素都设置了浮动，那么意味着它们都会以 BFC 的规则渲染，据以上第四条规则，BFC 区域不会相互重叠，所以为什么浮动元素独占空间便能理解了</li><li>解决容器由于拥有浮动元素造成的高度塌陷<br>  普通容器中，如果里面有浮动元素，且不设置高度的情况下，容器的高度是无法被撑起的。这时可通过设置 overflow 属性为 hidden 将之声明为 BFC，那么就可以包含浮动元素了</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;What-is-BFC&quot;&gt;&lt;a href=&quot;#What-is-BFC&quot; class=&quot;headerlink&quot; title=&quot;What is BFC?&quot;&gt;&lt;/a&gt;What is BFC?&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;BFC 是 W3C CSS 2.1 规范中的一个概念，它决定了元素如何对其内容进行定位，以及与其他元素的关系和相互作用。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当涉及到可视化布局的时候，BFC 为我们提供了一个环境，这个环境规定着其布局的规则，而不同环境之间的布局不会相互影响。&lt;br&gt;想要更好的理解这个概念，需要先理解 Box 和 Formatting Context 的概念。网页的布局核心就是盒子的组成排列，这些盒子就是 Box。盒子的类型和 display 属性决定着这个 Box 的类型。&lt;br&gt;不同类型的 Box，会参与不同的 Formatting Context（决定如何渲染文档的格式结构），然后其内元素就会以不同方式渲染。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;block-level box ：display 属性为 block, list-item, table 的元素，会生成 block-level box，&lt;br&gt;  并参与 block formatting context;&lt;/li&gt;
&lt;li&gt;inline-level box：display 属性为 inline, inline-block, inline-table 的元素，会生成 inline-level box，&lt;br&gt;  并参与 inline formatting context&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而 Formatting Context 是一块渲染区域，它决定着其子元素如何定位，以及与其他元素的位置关系。&lt;br&gt;通过上面一些概念，建议把 BFC 简单理解为一种属性，在具有此属性的容器中，元素按照 BFC 的规则实现布局。比如浮动元素会形成 BFC，这就是为什么我们看到浮动元素布局跟普通文档流的布局有所差别的原因。&lt;br&gt;
    
    </summary>
    
      <category term="html" scheme="https://somnus13.github.io/categories/html/"/>
    
    
      <category term="DOM" scheme="https://somnus13.github.io/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>日语初下复习（25-26）</title>
    <link href="https://somnus13.github.io/2017/08/28/nihongo25-26/"/>
    <id>https://somnus13.github.io/2017/08/28/nihongo25-26/</id>
    <published>2017-08-28T11:33:51.000Z</published>
    <updated>2017-09-14T16:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="25-これは明日会議で使う資料です"><a href="#25-これは明日会議で使う資料です" class="headerlink" title="25.これは明日会議で使う資料です　"></a>25.これは明日会議で使う資料です　</h2><h3 id="动词（简体形）-名词-小句（动词简体形）-名词"><a href="#动词（简体形）-名词-小句（动词简体形）-名词" class="headerlink" title="动词（简体形）+ 名词  小句（动词简体形）+ 名词"></a>动词（简体形）+ 名词  小句（动词简体形）+ 名词</h3><p>表示某种习惯或将要发生的动作用基本型，如果是已经玩成的动作用 “<strong>た形</strong>”<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">これは 明日会議で使う 資料です。</div></pre></td></tr></table></figure></p><h3 id="小句（动词简体形）-名は-名-形-です"><a href="#小句（动词简体形）-名は-名-形-です" class="headerlink" title="小句（动词简体形）+ 名は 名/形　です"></a>小句（动词简体形）+ 名は 名/形　です</h3><p>动词小句修饰名词形成的名词短语做主语<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">私が 明日乗る 飛行機は中国航空です。</div></pre></td></tr></table></figure></p><h3 id="小句（动词简体形）-名を-に-から-动ます"><a href="#小句（动词简体形）-名を-に-から-动ます" class="headerlink" title="小句（动词简体形）+ 名を/に/から　动ます"></a>小句（动词简体形）+ 名を/に/から　动ます</h3><p>动词小句修饰名词形成的名词短语做主语以外的其他部分<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">中国で買ったCD を 友達に貸しました。</div></pre></td></tr></table></figure></p><a id="more"></a><h3 id="小句（一类形-二类形-名）-名"><a href="#小句（一类形-二类形-名）-名" class="headerlink" title="小句（一类形/二类形/名）+ 名"></a>小句（一类形/二类形/名）+ 名</h3><p>一类形容词修饰名词用 <strong>基本型</strong>，二类形容词修饰名词 + “<strong>な</strong>“ 修饰，名词修饰名词用 “<strong>の</strong>“ 修饰<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">入り口が 広い あの建物は私の会社です。  </div><div class="line">操作が 簡単な パソコンが欲しいです。  </div><div class="line">数学が 専門の先生 が休みました。</div></pre></td></tr></table></figure></p><h3 id="扩展单词"><a href="#扩展单词" class="headerlink" title="扩展单词"></a>扩展单词</h3><table><thead><tr><th>假名</th><th>释义</th><th>假名</th><th>释义</th><th>假名</th><th>释义</th><th>假名</th><th>释义</th></tr></thead><tbody><tr><td>うえ 上</td><td>上面</td><td>した 下</td><td>下面</td><td>なか 中</td><td>里边，内部</td><td>そと 外</td><td>外面</td></tr><tr><td>まえ 前</td><td>前面</td><td>うしろ 後ろ</td><td>后面</td><td>ひだり</td><td>左 左面</td><td>みぎ 右</td><td>右面</td></tr><tr><td>よこ 横</td><td>侧面</td><td>そば 側</td><td>旁边</td><td>むかい 向かい</td><td>对面</td><td>まわり 周り</td><td>周围</td></tr><tr><td>あいだ 間</td><td>中间</td><td>すみ 隅</td><td>角落</td><td>ました 真下</td><td>正下方</td><td></td><td></td></tr><tr><td>きた 北</td><td>北面</td><td>みなみ 南</td><td>南面</td><td>ひがし 東</td><td>东面</td><td>にし 西</td><td>西面</td></tr></tbody></table><h2 id="26-自転車に二人で乗るのは危ないです"><a href="#26-自転車に二人で乗るのは危ないです" class="headerlink" title="26.自転車に二人で乗るのは危ないです　"></a>26.自転車に二人で乗るのは危ないです　</h2><h3 id="小句（动词简体形）-のは-形-です"><a href="#小句（动词简体形）-のは-形-です" class="headerlink" title="小句（动词简体形）+ のは +  形 です"></a>小句（动词简体形）+ のは +  形 です</h3><p>动词小句加 “<strong>の</strong>“ 使其名词化，表示”<strong>做某动作</strong>“的意思。<br>名词化做主语，谓语为表示性质状态的一类或二类形容词时，主语用助词 “<strong>は</strong>“<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">自転車に二人で乗るのは危ないです。</div><div class="line">パソコンで表を作るのはたのしいです。</div></pre></td></tr></table></figure></p><p>如果名词形式为 <strong>表示好恶、擅长不擅长之类的对象</strong> 时，用助词 “<strong>が</strong>“ 修饰名词<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">李さんは絵を書くにが好きですね。</div><div class="line">はい、色鉛筆でスケッチするのが大好きです。</div></pre></td></tr></table></figure></p><p>此外，如果 <strong>好恶、擅长不擅长之类的对象当做话题</strong> 来讨论，助词用 “<strong>は</strong>“<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">絵を書くのは好きですか。</div><div class="line">いいえ、絵を書くのは嫌いです。</div></pre></td></tr></table></figure></p><h3 id="小句（动词简体形）-の-を-动词"><a href="#小句（动词简体形）-の-を-动词" class="headerlink" title="小句（动词简体形）+ の + を + 动词"></a>小句（动词简体形）+ の + を + 动词</h3><p>动词小句加 “<strong>の</strong>“ 的名词化形式可以做宾语。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">手紙を出すのを忘れました。</div><div class="line">森さんが発言するのを聞きまし。</div></pre></td></tr></table></figure></p><p>这种名词化形式做宾语时 “<strong>の</strong>“ 和 “<strong>こと</strong>“ 可以互换<br>例外：</p><ul><li><p>句尾动词为 しらせます（告诉） 伝えます（转告） 話します（说）等表示 <strong>语言行为</strong> 的动词时，要用 “<strong>こと</strong>“ 而不能用 “<strong>の</strong>“</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">李さんは森さんが休むことを伝えました。</div></pre></td></tr></table></figure></li><li><p>句尾动词为 見ます（看） 聞きます（听） 等表示 <strong>感知动作</strong> 的动词或 手伝います（帮忙） やめます（停止） 防ぎます（防御） 等表示 <strong>直接动作对象</strong> 的动词，则使用 “<strong>の</strong>“ 而不能用 “<strong>こと</strong>“</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">李さんは森さんが車から降りるのを見ました。</div><div class="line">李さんは森さんが荷物を運ぶのを手伝いました。</div></pre></td></tr></table></figure></li></ul><h3 id="小句（简体形）-でしょう-推测"><a href="#小句（简体形）-でしょう-推测" class="headerlink" title="小句（简体形） でしょう [推测]"></a>小句（简体形） でしょう [推测]</h3><p>表示说话人对自己和听话人都不能断定的事进行推测，常与　“<strong>たぶん</strong>“　呼应使用。<br>动词小句和一类形容词小句用简体形后续 “<strong>でしょう</strong>“,<br>二类形容词小句和名词小句则把简体形的 “<strong>だ</strong>“ 换成 “<strong>でしょう</strong>“<br>“<strong>でしょう</strong>“ 的简体形是 “<strong>~だろう</strong>“<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">明日の朝は大雨になるでしょう。</div><div class="line">森さんは知らないでしょう。</div><div class="line">この本の値段は分かりませんが、たぶん高いでしょう。</div><div class="line">今年はたぶん豊作だろう。</div><div class="line">これはたぶん誰かの忘れ物だろう。</div></pre></td></tr></table></figure></p><h3 id="小句（简体形）かもしれません"><a href="#小句（简体形）かもしれません" class="headerlink" title="小句（简体形）かもしれません"></a>小句（简体形）かもしれません</h3><p>表示有可能发生某事，其可能性在百分之五十左右。<br>动词小句和一类形容词小句用简体形后续 “<strong>かもしれません</strong>“,<br>二类形容词小句和名词小句则把简体形的　“<strong>だ</strong>“　换成 “<strong>かもしれません</strong>“<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">森さんは今日会社を休むかもしれません。</div><div class="line">クレジットカードを落としたかもしれません。</div></pre></td></tr></table></figure></p><p>与 “<strong>でしょう</strong>“ 相比，”<strong>かもしれません</strong>“表示的概率较低。</p><h3 id="もしかしたら"><a href="#もしかしたら" class="headerlink" title="もしかしたら"></a>もしかしたら</h3><p>口语场合，用于可能性较低的场合，一般与 “<strong>～かもしれません</strong>“ “<strong>～ではありません</strong>“ 等呼应使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">馬さんはまだ来ませんね。</div><div class="line">もしかしたら、今日は来ないかもしれませんよ。</div><div class="line"></div><div class="line">もしかしたら、太田さんではありませんか。</div><div class="line">ええ、そうですが。。</div></pre></td></tr></table></figure></p><h3 id="それで"><a href="#それで" class="headerlink" title="それで"></a>それで</h3><p>表示前面句子的时态为后面句子时态的原因、理由<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">日本に握手の習慣がないんですね。</div><div class="line">ええ、そうなんです。それで、つい握手するのを忘れます。</div></pre></td></tr></table></figure></p><p>“だから” 也表示原因、理由。<br>但是与 “それで” 相比，语气较强，且后面可以使表示其实活着推测的句子，而 “<strong>それで</strong>“不行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">すぐに会議が始まします。だから、急いでください。</div></pre></td></tr></table></figure></p><h3 id="つい"><a href="#つい" class="headerlink" title="つい"></a>つい</h3><p>表示 <strong>并非有意</strong> 所为确形成了某种后果，并含有对意想不到的结果感到不快、后悔的语感。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">バーゲン会場では、つい何でも買いたくなりです。</div></pre></td></tr></table></figure></p><h3 id="公司常用寒暄用语"><a href="#公司常用寒暄用语" class="headerlink" title="公司常用寒暄用语"></a>公司常用寒暄用语</h3><table><thead><tr><th>句子</th><th>释义</th></tr></thead><tbody><tr><td>申し訳ありません</td><td>对不起，抱歉</td></tr><tr><td>どうも</td><td>谢谢/对不起</td></tr><tr><td>ごめんください</td><td>对不起，有人吗</td></tr><tr><td>お邪魔します</td><td>打搅</td></tr><tr><td>お邪魔しました</td><td>打搅了</td></tr><tr><td>失礼します</td><td>打搅了/告辞了</td></tr><tr><td>失礼しました</td><td>告辞了/失礼了</td></tr><tr><td>お先に失礼します</td><td>先告辞了</td></tr><tr><td>お疲れ様でした</td><td>辛苦了</td></tr><tr><td>ご苦労様でした</td><td>辛苦了</td></tr><tr><td>これからお世話になります</td><td>今后请多多关照</td></tr><tr><td>いつもお世話になっております</td><td>承蒙多方照顾</td></tr><tr><td>いろいろお世話になりましたよ</td><td>收到更方面的照顾</td></tr><tr><td>お久しぶりです</td><td>好久不见</td></tr><tr><td>ご無沙汰しています</td><td>久疏问候</td></tr><tr><td>お大事に</td><td>请保重</td></tr><tr><td>おかげさまで</td><td>托您的福</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;25-これは明日会議で使う資料です&quot;&gt;&lt;a href=&quot;#25-これは明日会議で使う資料です&quot; class=&quot;headerlink&quot; title=&quot;25.これは明日会議で使う資料です　&quot;&gt;&lt;/a&gt;25.これは明日会議で使う資料です　&lt;/h2&gt;&lt;h3 id=&quot;动词（简体形）-名词-小句（动词简体形）-名词&quot;&gt;&lt;a href=&quot;#动词（简体形）-名词-小句（动词简体形）-名词&quot; class=&quot;headerlink&quot; title=&quot;动词（简体形）+ 名词  小句（动词简体形）+ 名词&quot;&gt;&lt;/a&gt;动词（简体形）+ 名词  小句（动词简体形）+ 名词&lt;/h3&gt;&lt;p&gt;表示某种习惯或将要发生的动作用基本型，如果是已经玩成的动作用 “&lt;strong&gt;た形&lt;/strong&gt;”&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;これは 明日会議で使う 資料です。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;小句（动词简体形）-名は-名-形-です&quot;&gt;&lt;a href=&quot;#小句（动词简体形）-名は-名-形-です&quot; class=&quot;headerlink&quot; title=&quot;小句（动词简体形）+ 名は 名/形　です&quot;&gt;&lt;/a&gt;小句（动词简体形）+ 名は 名/形　です&lt;/h3&gt;&lt;p&gt;动词小句修饰名词形成的名词短语做主语&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;私が 明日乗る 飛行機は中国航空です。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;小句（动词简体形）-名を-に-から-动ます&quot;&gt;&lt;a href=&quot;#小句（动词简体形）-名を-に-から-动ます&quot; class=&quot;headerlink&quot; title=&quot;小句（动词简体形）+ 名を/に/から　动ます&quot;&gt;&lt;/a&gt;小句（动词简体形）+ 名を/に/から　动ます&lt;/h3&gt;&lt;p&gt;动词小句修饰名词形成的名词短语做主语以外的其他部分&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;中国で買ったCD を 友達に貸しました。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="日语" scheme="https://somnus13.github.io/categories/%E6%97%A5%E8%AF%AD/"/>
    
    
      <category term="初级下" scheme="https://somnus13.github.io/tags/%E5%88%9D%E7%BA%A7%E4%B8%8B/"/>
    
  </entry>
  
  <entry>
    <title>file对象什么的</title>
    <link href="https://somnus13.github.io/2017/07/24/file/"/>
    <id>https://somnus13.github.io/2017/07/24/file/</id>
    <published>2017-07-24T13:38:44.000Z</published>
    <updated>2019-01-20T14:47:18.361Z</updated>
    
    <content type="html"><![CDATA[<h2 id="fileList对象和file对象"><a href="#fileList对象和file对象" class="headerlink" title="fileList对象和file对象"></a>fileList对象和file对象</h2><p><strong>html5</strong> 中的 <strong>input[type=’file’]</strong> 的标签有 <strong>multiple</strong> 属性，允许用户选择多个文件，<strong>fileList</strong> 对象则是保存了这些文件的列表，列表每一项都是一个 <strong>file</strong> 对象  </p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul><li><strong>name</strong> ：文件名</li><li><strong>type</strong> ：文件类型。图片类型可通过image/开头关键字限制只允许上传图片</li><li><strong>size</strong> ：文件大小</li><li><strong>lastModified</strong> ：文件最后修改时间</li></ul><p><strong>input:file</strong> 对象中还存在一个 <strong>accept</strong> 属性，可以用来规定能够通过文件上传进行提交的文件类型。<br> <strong>accept=”image/*”</strong> 可以用来限制只允许上传图像格式。但是在 <strong>Webkit</strong> 浏览器下却出现了响应滞慢的问题，要等上好几秒才弹出文件选择框。<br>解决方法就是将 ‘<em>‘ 通配符改为指定的 <em>*MIME</em></em> 类型。</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="多文件FileList"><a href="#多文件FileList" class="headerlink" title="多文件FileList"></a>多文件FileList</h4><p>链接请戳  <strong><a href="/statics/file/file1.html">多文件fileList</a></strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"files"</span> <span class="attr">accept</span>=<span class="string">"image/gif,image/jpeg,image/jpg,image/png"</span> <span class="attr">multiple</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    var elem = document.getElementById('files');</span></div><div class="line"><span class="undefined">    elem.onchange = function (event) &#123;</span></div><div class="line"><span class="undefined">        var files = event.target.files;</span></div><div class="line"><span class="undefined">        for (var i = 0; i &lt; files.length; i++) &#123;</span></div><div class="line"><span class="undefined">            // 文件类型为 image 并且文件大小小于 200kb</span></div><div class="line"><span class="undefined">            if(files[i].type.indexOf('image/') &gt; -1 &amp;&amp; files[i].size &lt; 204800)&#123;</span></div><div class="line"><span class="undefined">                console.log(files[i].name + files[i].type);</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure> <h4 id="文件预览"><a href="#文件预览" class="headerlink" title="文件预览"></a>文件预览</h4><p>链接请戳 <strong><a href="/statics/file/file2.html">文件预览</a></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;input type=&quot;file&quot; id=&quot;files&quot; accept=&quot;image/jpeg,image/jpg,image/png&quot;&gt;</div><div class="line">&lt;img src=&quot;blank.gif&quot; id=&quot;preview&quot;&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    var elem = document.getElementById(&apos;files&apos;),</div><div class="line">        img = document.getElementById(&apos;preview&apos;);</div><div class="line">    elem.onchange = function () &#123;</div><div class="line">        var files = elem.files,</div><div class="line">            reader = new FileReader();</div><div class="line">        if(files &amp;&amp; files[0])&#123;</div><div class="line">            reader.onload = function (ev) &#123;</div><div class="line">                img.src = ev.target.result;</div><div class="line">            &#125;</div><div class="line">            reader.readAsDataURL(files[0]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p> <h2 id="Blob对象"><a href="#Blob对象" class="headerlink" title="Blob对象"></a>Blob对象</h2><p>表示一个不可变，原始数据的类似文件对象。区别于 <strong>mysql</strong> 的 <strong>blob</strong> 类型（二进制容器），<strong>html5</strong> 中的 <strong>blob</strong> 对象除了可以存储二进制数据之外，还可设置数据的 <strong>mime</strong> 类型，从某种程度讲，实现了文件的存储。<br>而 <strong>html5</strong> 中的 <strong>file</strong> 对象则是基于 <strong>blob</strong> 对象继承扩展而来。</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Blob(blobparts[,options])</div></pre></td></tr></table></figure><p>所以需要关键字 <strong>new</strong> 来声明，旧式的 <strong>BlobBuilder</strong> 方法已经过时，不在讨论。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">var blob = new Blob(["Hello World!"],&#123;type:"text/plain"&#125;);</span></div><div class="line"><span class="undefined">console.log(blob)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p><h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><ul><li><strong>isClosed：bool</strong> 是否为关闭状态，关闭状态的 <strong>blob</strong> 对象不可读</li><li><strong>size</strong>：数据大小</li><li><strong>type</strong>：字符串，表明对象包含数据的数据类型</li></ul><a id="more"></a><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p><strong>close()</strong><br>关闭 <strong>blob</strong> 对象，释放底层资源</p><p><strong>slice([start[, end[, contentType]]])</strong><br>返回一个新的包含源 <strong>blob</strong> 对象指定数据的 <strong>blob</strong> 对象</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><h4 id="适用类型数组和blob创建一个url"><a href="#适用类型数组和blob创建一个url" class="headerlink" title="适用类型数组和blob创建一个url"></a>适用类型数组和blob创建一个url</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> typeArray = GetTheTypedArraySomehow();</div><div class="line"><span class="comment">//mime</span></div><div class="line"><span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([typeArray], &#123;<span class="attr">type</span>:<span class="string">'application/octet-binary'</span>&#125;);</div><div class="line"><span class="comment">// 会产生一个类似blob:d3958f5c-0777-0845-9dcf-2cb28783acaf 这样的URL字符串</span></div><div class="line"><span class="comment">// 你可以像使用一个普通URL那样使用它，比如用在img.src上。</span></div><div class="line"><span class="keyword">var</span> url = URL.createObjectURL(blob);</div></pre></td></tr></table></figure><p>事实上我并没得到这样的字符串，我觉得我可能被骗了。。</p><h4 id="Blob中提取数据"><a href="#Blob中提取数据" class="headerlink" title="Blob中提取数据"></a>Blob中提取数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">唯一方法是使用FileReader</div><div class="line"><span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</div><div class="line">reader.addEventListener(<span class="string">"loadend"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="comment">// reader.result contains the contents of blob as a typed array</span></div><div class="line">&#125;);</div><div class="line">reader.readAsArrayBuffer(blob);</div></pre></td></tr></table></figure><p>使用 FileReader 以外的方法读取到的内容可能会是字符串或是数据 URL。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([<span class="string">'C:/Users/Administrator/Desktop/DC93J54VYAEKSLs.jpg'</span>], &#123;<span class="attr">type</span>:<span class="string">'image/png'</span>&#125;)</span></div><div class="line"><span class="javascript">    canvas.toBlob(<span class="function"><span class="keyword">function</span>(<span class="params">blob</span>)</span>&#123;</span></div><div class="line"><span class="javascript">        <span class="built_in">console</span>.log(blob)</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p><h4 id="通过url下载文件"><a href="#通过url下载文件" class="headerlink" title="通过url下载文件"></a>通过url下载文件</h4><p>window.URL对象可以为BLob对象生成一个网络地址，结合a标签的download属性可以实现url下载文件。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">createDownload(<span class="string">"download.txt"</span>,<span class="string">"download file"</span>)</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createDownload</span>(<span class="params">fileName, content</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([content]);</div><div class="line">    <span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</div><div class="line">    link.innerHTML = fileName;</div><div class="line">    link.download = fileName;</div><div class="line">    link.href = URL.createObjectURL(blob);</div><div class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>].appendChild(link);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我们知道，img的src属性及background的url属性，都可以通过接收图片的网络地址或base64来显示图片，同样的，我们也可以把图片转化为Blob对象，生成URL（URL.createObjectURL(blob)），来显示图片。</p><p>Ps：就先写到这，剩下几个demo再说，感觉这个东西没这么简单。2017年7月24日22点27分</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;fileList对象和file对象&quot;&gt;&lt;a href=&quot;#fileList对象和file对象&quot; class=&quot;headerlink&quot; title=&quot;fileList对象和file对象&quot;&gt;&lt;/a&gt;fileList对象和file对象&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;html5&lt;/strong&gt; 中的 &lt;strong&gt;input[type=’file’]&lt;/strong&gt; 的标签有 &lt;strong&gt;multiple&lt;/strong&gt; 属性，允许用户选择多个文件，&lt;strong&gt;fileList&lt;/strong&gt; 对象则是保存了这些文件的列表，列表每一项都是一个 &lt;strong&gt;file&lt;/strong&gt; 对象  &lt;/p&gt;
&lt;h3 id=&quot;属性&quot;&gt;&lt;a href=&quot;#属性&quot; class=&quot;headerlink&quot; title=&quot;属性&quot;&gt;&lt;/a&gt;属性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt; ：文件名&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt; ：文件类型。图片类型可通过image/开头关键字限制只允许上传图片&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;size&lt;/strong&gt; ：文件大小&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;lastModified&lt;/strong&gt; ：文件最后修改时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;input:file&lt;/strong&gt; 对象中还存在一个 &lt;strong&gt;accept&lt;/strong&gt; 属性，可以用来规定能够通过文件上传进行提交的文件类型。&lt;br&gt; &lt;strong&gt;accept=”image/*”&lt;/strong&gt; 可以用来限制只允许上传图像格式。但是在 &lt;strong&gt;Webkit&lt;/strong&gt; 浏览器下却出现了响应滞慢的问题，要等上好几秒才弹出文件选择框。&lt;br&gt;解决方法就是将 ‘&lt;em&gt;‘ 通配符改为指定的 &lt;em&gt;*MIME&lt;/em&gt;&lt;/em&gt; 类型。&lt;/p&gt;
&lt;h3 id=&quot;应用&quot;&gt;&lt;a href=&quot;#应用&quot; class=&quot;headerlink&quot; title=&quot;应用&quot;&gt;&lt;/a&gt;应用&lt;/h3&gt;&lt;h4 id=&quot;多文件FileList&quot;&gt;&lt;a href=&quot;#多文件FileList&quot; class=&quot;headerlink&quot; title=&quot;多文件FileList&quot;&gt;&lt;/a&gt;多文件FileList&lt;/h4&gt;&lt;p&gt;链接请戳  &lt;strong&gt;&lt;a href=&quot;/statics/file/file1.html&quot;&gt;多文件fileList&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;file&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;files&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;accept&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;image/gif,image/jpeg,image/jpg,image/png&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;multiple&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;    var elem = document.getElementById(&#39;files&#39;);&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;    elem.onchange = function (event) &amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;        var files = event.target.files;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;        for (var i = 0; i &amp;lt; files.length; i++) &amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;            // 文件类型为 image 并且文件大小小于 200kb&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;            if(files[i].type.indexOf(&#39;image/&#39;) &amp;gt; -1 &amp;amp;&amp;amp; files[i].size &amp;lt; 204800)&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;                console.log(files[i].name + files[i].type);&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 
&lt;h4 id=&quot;文件预览&quot;&gt;&lt;a href=&quot;#文件预览&quot; class=&quot;headerlink&quot; title=&quot;文件预览&quot;&gt;&lt;/a&gt;文件预览&lt;/h4&gt;&lt;p&gt;链接请戳 &lt;strong&gt;&lt;a href=&quot;/statics/file/file2.html&quot;&gt;文件预览&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;input type=&amp;quot;file&amp;quot; id=&amp;quot;files&amp;quot; accept=&amp;quot;image/jpeg,image/jpg,image/png&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;img src=&amp;quot;blank.gif&amp;quot; id=&amp;quot;preview&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    var elem = document.getElementById(&amp;apos;files&amp;apos;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        img = document.getElementById(&amp;apos;preview&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    elem.onchange = function () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        var files = elem.files,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            reader = new FileReader();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if(files &amp;amp;&amp;amp; files[0])&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            reader.onload = function (ev) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                img.src = ev.target.result;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            reader.readAsDataURL(files[0]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
 
&lt;h2 id=&quot;Blob对象&quot;&gt;&lt;a href=&quot;#Blob对象&quot; class=&quot;headerlink&quot; title=&quot;Blob对象&quot;&gt;&lt;/a&gt;Blob对象&lt;/h2&gt;&lt;p&gt;表示一个不可变，原始数据的类似文件对象。区别于 &lt;strong&gt;mysql&lt;/strong&gt; 的 &lt;strong&gt;blob&lt;/strong&gt; 类型（二进制容器），&lt;strong&gt;html5&lt;/strong&gt; 中的 &lt;strong&gt;blob&lt;/strong&gt; 对象除了可以存储二进制数据之外，还可设置数据的 &lt;strong&gt;mime&lt;/strong&gt; 类型，从某种程度讲，实现了文件的存储。&lt;br&gt;而 &lt;strong&gt;html5&lt;/strong&gt; 中的 &lt;strong&gt;file&lt;/strong&gt; 对象则是基于 &lt;strong&gt;blob&lt;/strong&gt; 对象继承扩展而来。&lt;/p&gt;
&lt;h3 id=&quot;构造函数&quot;&gt;&lt;a href=&quot;#构造函数&quot; class=&quot;headerlink&quot; title=&quot;构造函数&quot;&gt;&lt;/a&gt;构造函数&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Blob(blobparts[,options])&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所以需要关键字 &lt;strong&gt;new&lt;/strong&gt; 来声明，旧式的 &lt;strong&gt;BlobBuilder&lt;/strong&gt; 方法已经过时，不在讨论。&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;var blob = new Blob([&quot;Hello World!&quot;],&amp;#123;type:&quot;text/plain&quot;&amp;#125;);&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;console.log(blob)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;属性-1&quot;&gt;&lt;a href=&quot;#属性-1&quot; class=&quot;headerlink&quot; title=&quot;属性&quot;&gt;&lt;/a&gt;属性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;isClosed：bool&lt;/strong&gt; 是否为关闭状态，关闭状态的 &lt;strong&gt;blob&lt;/strong&gt; 对象不可读&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;size&lt;/strong&gt;：数据大小&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt;：字符串，表明对象包含数据的数据类型&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="html" scheme="https://somnus13.github.io/categories/html/"/>
    
    
      <category term="file" scheme="https://somnus13.github.io/tags/file/"/>
    
  </entry>
  
  <entry>
    <title>img fail那点事</title>
    <link href="https://somnus13.github.io/2017/07/18/img-fail/"/>
    <id>https://somnus13.github.io/2017/07/18/img-fail/</id>
    <published>2017-07-18T13:56:10.000Z</published>
    <updated>2019-01-17T09:16:22.085Z</updated>
    
    <content type="html"><![CDATA[<h1 id="img-fail"><a href="#img-fail" class="headerlink" title="img fail"></a>img fail</h1><p>前言：据说，一个公司的网速决定着一个程序员的心情与产出，而网速决定着一篇文章裂图的程度。</p><h2 id="告别裂图"><a href="#告别裂图" class="headerlink" title="告别裂图"></a>告别裂图</h2><p><strong>html</strong> 中的 <strong>img</strong> 标签预设了几个关于自身加载的事件：</p><ul><li><strong>onError</strong><br>  图片加载出现错误，多数的处理是将图片路径指向默认图片</li><li><strong>onLoad</strong><br>  图片加载完成之后触发事件</li><li><strong>onAbort</strong><br>  图片加载过程中，用户手动停止加载（浏览器停止按钮）触发事件</li></ul><p>前面也讲过，图片加载缓慢乃至加载失败并不全因为是网速问题，还有可能是图片服务器延迟，或者图片过期请求失效等。<br>然后就会出现所谓的“裂图”,而这时 <strong>img</strong> 标签的 <strong>alt</strong> 属性就会发挥作用，提示用户当前加载失败图像的信息。<br>如图：</p><img src="/2017/07/18/img-fail/img-fail1.png" alt="[fail-img1]" title="[fail-img1]">  <p>然后从运行下面代码可以在控制台看到图片加载几个事件相应的输出。</p><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">loadSuccess</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'image load success!'</span>);</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">loadError</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'image load error!'</span>);</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">loadAbort</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'image abort!'</span>);</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img-container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://1234.com/1.jpg"</span> <span class="attr">onload</span>=<span class="string">"loadSuccess()"</span> <span class="attr">onerror</span>=<span class="string">"loadError()"</span> <span class="attr">onabort</span>=<span class="string">"loadAbort()"</span> <span class="attr">alt</span>=<span class="string">"this is a fail img"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>显然这样的表现形式，在用户看来是非常不优雅的。身为一个程序员，如果所有异常分支没有做相应处理，就相当于一辆急速行驶的汽车，保不齐啥时候刹车会失灵一下下。</p><h2 id="动手吧"><a href="#动手吧" class="headerlink" title="动手吧"></a>动手吧</h2><p>利用加载失败时的标签和伪类 <strong>:before :after</strong> 来做点事<br>我们可以通过 <strong>:before :after</strong> 来定义加载失败的提示信息，例如在图片上方提示加载失败提示，下方提示图片的源地址。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://oi2fsv5ls.bkt.clouddn.com/twitter/Cwc6jkVUcAExIOI.jpg-orgi"</span> <span class="attr">alt</span>=<span class="string">"gakki-twitter"</span> <span class="attr">class</span>=<span class="string">"img_load img_load1"</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.img_load</span>&#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">height</span>: auto;</div><div class="line">    <span class="attribute">font-family</span>: <span class="string">'Helvetica'</span>;</div><div class="line">    <span class="attribute">font-weight</span>: <span class="number">300</span>;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.img_load1</span><span class="selector-pseudo">:before</span>&#123;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</div><div class="line">    <span class="attribute">content</span>: <span class="string">"image load error !"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.img_load1</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</div><div class="line">    <span class="attribute">white-space</span>:nowrap;</div><div class="line">    <span class="attribute">overflow</span>:hidden;</div><div class="line">    <span class="attribute">text-overflow</span>: ellipsis;</div><div class="line">    <span class="attribute">content</span>: <span class="string">"[url: "</span> <span class="built_in">attr</span>(src) <span class="string">"]"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后图片加载失败就会显示成如下：<br><img src="/2017/07/18/img-fail/img-fail2.png" alt="[fail-img2]" title="[fail-img2]"> </p><h2 id="优化一下-算是"><a href="#优化一下-算是" class="headerlink" title="优化一下(算是)"></a>优化一下(算是)</h2><p>虽然上例已经展示了比较优雅的错误提示，和相应的图片源地址，保证用户能接受且能通过源地址来进行更加合理的访问。<br>但是，裂图依旧在！来让我们弄点东西遮起来吧。<br>本例采用了 <strong>font-awesome</strong> 库来实现小图标展示,所以需要先引进css库<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"//netdna.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://oi2fsv5ls.bkt.clouddn.com/twitter/CwvqJsEUkAAyeiG.jpg-orgi"</span> <span class="attr">alt</span>=<span class="string">"gakki-twitter"</span> <span class="attr">class</span>=<span class="string">"img_load img_load2"</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.img_load2</span><span class="selector-pseudo">:after</span>&#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">z-index</span>: <span class="number">2</span>;</div><div class="line">    <span class="attribute">top</span>: -<span class="number">1px</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</div><div class="line">    <span class="attribute">font-family</span>: FontAwesome;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(100, 100, 100);</div><div class="line">    <span class="attribute">content</span>: <span class="string">"\f1c5"</span> <span class="string">" "</span> <span class="built_in">attr</span>(alt);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>图示如下：<br><img src="/2017/07/18/img-fail/img-fail3.png" alt="[fail-img3]" title="[fail-img3]"> </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>基本网站开发框架都会集成默认图片，而且过大的图片对于网站加载速度不友好，所以这个的应用场景大概也就是寄存图床之类图片过期的博客或者论坛了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;img-fail&quot;&gt;&lt;a href=&quot;#img-fail&quot; class=&quot;headerlink&quot; title=&quot;img fail&quot;&gt;&lt;/a&gt;img fail&lt;/h1&gt;&lt;p&gt;前言：据说，一个公司的网速决定着一个程序员的心情与产出，而网速决定着一篇文章裂图的程度。&lt;/p&gt;
&lt;h2 id=&quot;告别裂图&quot;&gt;&lt;a href=&quot;#告别裂图&quot; class=&quot;headerlink&quot; title=&quot;告别裂图&quot;&gt;&lt;/a&gt;告别裂图&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;html&lt;/strong&gt; 中的 &lt;strong&gt;img&lt;/strong&gt; 标签预设了几个关于自身加载的事件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;onError&lt;/strong&gt;&lt;br&gt;  图片加载出现错误，多数的处理是将图片路径指向默认图片&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;onLoad&lt;/strong&gt;&lt;br&gt;  图片加载完成之后触发事件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;onAbort&lt;/strong&gt;&lt;br&gt;  图片加载过程中，用户手动停止加载（浏览器停止按钮）触发事件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前面也讲过，图片加载缓慢乃至加载失败并不全因为是网速问题，还有可能是图片服务器延迟，或者图片过期请求失效等。&lt;br&gt;然后就会出现所谓的“裂图”,而这时 &lt;strong&gt;img&lt;/strong&gt; 标签的 &lt;strong&gt;alt&lt;/strong&gt; 属性就会发挥作用，提示用户当前加载失败图像的信息。&lt;br&gt;如图：&lt;/p&gt;
&lt;img src=&quot;/2017/07/18/img-fail/img-fail1.png&quot; alt=&quot;[fail-img1]&quot; title=&quot;[fail-img1]&quot;&gt;  
&lt;p&gt;然后从运行下面代码可以在控制台看到图片加载几个事件相应的输出。&lt;/p&gt;
    
    </summary>
    
      <category term="html" scheme="https://somnus13.github.io/categories/html/"/>
    
    
      <category term="图片" scheme="https://somnus13.github.io/tags/%E5%9B%BE%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>响应式图片处理</title>
    <link href="https://somnus13.github.io/2017/06/14/Responsive-Images/"/>
    <id>https://somnus13.github.io/2017/06/14/Responsive-Images/</id>
    <published>2017-06-14T11:27:49.000Z</published>
    <updated>2019-01-20T14:41:40.977Z</updated>
    
    <content type="html"><![CDATA[<h1 id="响应式图片处理"><a href="#响应式图片处理" class="headerlink" title="响应式图片处理"></a>响应式图片处理</h1><blockquote><p>just note</p></blockquote><h2 id="固定宽度图像"><a href="#固定宽度图像" class="headerlink" title="固定宽度图像"></a>固定宽度图像</h2><p>浏览器会根据设备像素比来选择加载图片</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li><strong>srcset</strong><br>  <strong>srcset</strong> 属性会罗列出当前可加载的备选图片，用逗号分隔。<br>  不识别此属性的浏览器会直接加载 <strong>src</strong> 属性声明的图像。</li><li><strong>x</strong><br>  <strong>x</strong> 表示图像的设备像素比。</li></ul><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>网站 <strong>logo</strong> 等宽度固定，大小不随着 <strong>viewport</strong> 的变化而变化</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img-box1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">srcset</span>=<span class="string">"images/gakki-540.jpg 1.5x,images/gakki-720.jpg 2x,images/gakki-1080.jpg 3x"</span></span></div><div class="line"><span class="tag"> <span class="attr">src</span>=<span class="string">"images/gakki-360.jpg"</span> <span class="attr">alt</span>=<span class="string">"Responsive Images"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><a id="more"></a><p>图片固定宽度为 <strong>300</strong>，浏览器通过识别设备像素比来筛选并加载图片。如上像素设备比为 <strong>2</strong>（例如：iphone6）的时候加载 <strong>gakki-720</strong> 的图片，<strong>3</strong>（iphone6 plus等）的时候会加载实际尺寸为 <strong>1080</strong> 的备选图。如果不支持，则默认加载 <strong>gakki-360</strong>。</p><p><a href="/statics/Responsive-Images/Responsive1.html">点此</a>查看示例 (建议新版本谷歌浏览)</p><h2 id="可变宽度的图像"><a href="#可变宽度的图像" class="headerlink" title="可变宽度的图像"></a>可变宽度的图像</h2><p>浏览器会根据设备视窗大小( <strong>viewport</strong> )来选择加载图片</p><h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><ul><li><strong>srcset</strong><br>  备选图片列表，逗号分隔  </li><li><strong>sizes</strong><br>  包含两个值且用逗号分隔的图片展示规则列表，非必须。<br>  如果 <strong>srcset</strong> 中使用了 <strong>w</strong> 描述符，则必须设置  <strong>sizes</strong> 属性。<br>  第一个值为媒体查询条件，第二个为图片尺寸值，用 <strong>vw</strong> 来描述，不可使用百分比。<br>  注：<strong>vw</strong> 兼容性不及 <strong>srcset</strong></li></ul><h3 id="场景-1"><a href="#场景-1" class="headerlink" title="场景"></a>场景</h3><p>内容响应式图片处理</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;img-box2 &quot;&gt;</div><div class="line">&lt;img srcset=&quot;images/gakki-360.jpg 360w,</div><div class="line">             images/gakki-540.jpg 540w,</div><div class="line">             images/gakki-720.jpg 720w,</div><div class="line">             images/gakki-1080.jpg 1080w&quot;</div><div class="line">     sizes=&quot;(max-width: 400px) 100vw,</div><div class="line">            (max-width: 960px) 75vw,</div><div class="line">            1080px&quot; src=&quot;images/gakki-1080.jpg&quot; alt=&quot;Responsive Images&quot;&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><p>浏览器会根据 <strong>sizes</strong> 定义的媒体查询条件来选择加载图片。例如网页宽度 <strong>600px</strong> 时，按照查询条件小于 <strong>960px</strong>,所以会按照 <strong>75%</strong> 加载，而 <strong>600*0.75 = 450</strong> ,取最接近即 <strong>gakki-540</strong> 的图片。</p><p><a href="/statics/Responsive-Images/Responsive2.html">点此</a>查看示例 (建议新版本谷歌浏览)</p><h2 id="不同的图像"><a href="#不同的图像" class="headerlink" title="不同的图像"></a>不同的图像</h2><p>前两者都是通过 <strong>srcset</strong> 属性来实现同一图像不同质量的展示，而不支持此属性的浏览器会识别为普通的图像并加载 <strong>src</strong> 属性。</p><p>如果需要在不同的场景显示稍微不同的图片呢？例如大屏下显示全图，而小屏 or 移动端则仅需要展示细节，这样的场景需求则需要借用 <strong>picture</strong> 元素。</p><h3 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h3><ul><li><strong>source</strong><br>  定义媒体查询条件和备选图片地址</li></ul><h3 id="场景-2"><a href="#场景-2" class="headerlink" title="场景"></a>场景</h3><p>不同场景展示不同图片(全局细节之类的)</p><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">media</span>=<span class="string">"(min-width: 960px)"</span> <span class="attr">srcset</span>=<span class="string">"images/gakki-large-1080.jpg"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">media</span>=<span class="string">"(min-width: 575px)"</span> <span class="attr">srcset</span>=<span class="string">"images/gakki-mid-630.jpg"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/gakki-small-360.jpg"</span> <span class="attr">class</span>=<span class="string">"picture-img"</span> <span class="attr">alt</span>=<span class="string">"Responsive Images"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></div></pre></td></tr></table></figure><p><a href="/statics/Responsive-Images/Responsive3.html">点此</a>查看示例 (建议新版本谷歌浏览)</p><p>浏览器窗口的变化可见，图片在小屏下显示裁剪版的细节图。</p><h2 id="不同类型的图像"><a href="#不同类型的图像" class="headerlink" title="不同类型的图像"></a>不同类型的图像</h2><p>针对不同浏览器支持类型，渲染相应的格式的图片。新格式的图像在图片质量以及图片大小方面表现良好，但是目前来讲，兼容性待考验。</p><h3 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h3><ul><li><strong>source</strong><br>  指定每个图像的MIME类型，浏览器会选择第一个含有其支持的MIME类型的源<br>  源的顺序是至关重要的，如果浏览器无法识别所有的图象类型，它会回退至原来的 <strong>img</strong> 元素。</li></ul><h3 id="场景-3"><a href="#场景-3" class="headerlink" title="场景"></a>场景</h3><p>不同格式的图片在文件大小和图片质量表现不一 ，不少新格式表现良好。<br><strong>chrome</strong> 和 <strong>opera</strong> 浏览器支持 <strong>webp</strong> 格式图像，而 <strong>jpeg-xr</strong> 格式则是微软专有格式，仅 <strong>ie</strong> 支持。</p><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">type</span>=<span class="string">"image/vnd.ms-photo"</span> <span class="attr">src</span>=<span class="string">"images/gakki-875.jxr"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">type</span>=<span class="string">"image/jp2"</span> <span class="attr">src</span>=<span class="string">"images/gakki-875.jp2"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">type</span>=<span class="string">"image/webp"</span> <span class="attr">src</span>=<span class="string">"images/gakki-875.webp"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/gakki-875.jpg"</span> <span class="attr">class</span>=<span class="string">"picture-img"</span> <span class="attr">alt</span>=<span class="string">"Responsive Images"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></div></pre></td></tr></table></figure><p>  查看示例(建议新版本谷歌浏览)<br>ps：亲测，并没看到预料的结果，感觉被骗了..</p><p>本文参考自 <a href="https://alistapart.com/article/using-responsive-images-now" target="_blank" rel="external">Using Responsive Images (Now)</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;响应式图片处理&quot;&gt;&lt;a href=&quot;#响应式图片处理&quot; class=&quot;headerlink&quot; title=&quot;响应式图片处理&quot;&gt;&lt;/a&gt;响应式图片处理&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;just note&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;固定宽度图像&quot;&gt;&lt;a href=&quot;#固定宽度图像&quot; class=&quot;headerlink&quot; title=&quot;固定宽度图像&quot;&gt;&lt;/a&gt;固定宽度图像&lt;/h2&gt;&lt;p&gt;浏览器会根据设备像素比来选择加载图片&lt;/p&gt;
&lt;h3 id=&quot;参数&quot;&gt;&lt;a href=&quot;#参数&quot; class=&quot;headerlink&quot; title=&quot;参数&quot;&gt;&lt;/a&gt;参数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;srcset&lt;/strong&gt;&lt;br&gt;  &lt;strong&gt;srcset&lt;/strong&gt; 属性会罗列出当前可加载的备选图片，用逗号分隔。&lt;br&gt;  不识别此属性的浏览器会直接加载 &lt;strong&gt;src&lt;/strong&gt; 属性声明的图像。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;br&gt;  &lt;strong&gt;x&lt;/strong&gt; 表示图像的设备像素比。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h3&gt;&lt;p&gt;网站 &lt;strong&gt;logo&lt;/strong&gt; 等宽度固定，大小不随着 &lt;strong&gt;viewport&lt;/strong&gt; 的变化而变化&lt;/p&gt;
&lt;h3 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;img-box1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;srcset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;images/gakki-540.jpg 1.5x,images/gakki-720.jpg 2x,images/gakki-1080.jpg 3x&quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;		 &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;images/gakki-360.jpg&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;alt&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Responsive Images&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="html" scheme="https://somnus13.github.io/categories/html/"/>
    
    
      <category term="响应式" scheme="https://somnus13.github.io/tags/%E5%93%8D%E5%BA%94%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>IOS webapp 踩屎记</title>
    <link href="https://somnus13.github.io/2017/05/23/ios-webapp-issues/"/>
    <id>https://somnus13.github.io/2017/05/23/ios-webapp-issues/</id>
    <published>2017-05-23T13:20:56.000Z</published>
    <updated>2019-01-20T14:49:28.985Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ios底部输入框遮挡"><a href="#ios底部输入框遮挡" class="headerlink" title="ios底部输入框遮挡"></a>ios底部输入框遮挡</h1><blockquote><p>接上节，因为fixed元素的变现不友好，底部固定元素多采用了absolute定位。但底部固定元素内包含输入控件时，聚焦会发生输入框被键盘遮挡。</p></blockquote><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>场景<br>  为了实现类 <strong>IM</strong> 即时通讯页面，输入框聚焦并紧贴键盘顶部浮起。</li><li><p>表现<br>  某些浏览器会发生输入框遮挡被键盘遮挡。<br>  qq内置以及微信内置浏览器估计对此作了些处理，基本没发现这种情况。<br>  而别的浏览器，或多或少会复现这个问题（第一次触发）</p><a id="more"></a><p>  <strong>理论上的表现为</strong>：  </p>   <p>  <strong>实际表现为</strong>：  </p>   </li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>输入框聚焦后，<strong>ios</strong> 和安卓对此作了不同的处理。<br>安卓会对页面进行压缩，页面的 <strong>innerHeight</strong> 会发生变化，而ios会直接把页面向上推键盘的高度，页面的 <strong>innerHeight</strong> 并没发生变化（除了 <strong>UC</strong> 浏览器，真心不知道为什么这么另类）。<br>查阅一些资料，发现了 <strong>Element</strong> 对象两个兼容性有待考量的方法 <strong>scrollIntoView()</strong> 和 <strong>scrollIntoViewIfNeeded()</strong>。</p><ul><li><p><strong>scrollIntoView()</strong> 让当前的元素滚动到浏览器窗口的可视区域内</p><ul><li><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">element.scrollIntoView(); // 等同于element.scrollIntoView(true)</div><div class="line">element.scrollIntoView(alignToTop); // Boolean型参数</div><div class="line">element.scrollIntoView(scrollIntoViewOptions); // Object型参数</div></pre></td></tr></table></figure></li><li><p>参数</p><ul><li><strong>alignToTop</strong> 一个 <strong>Boolean</strong> 值：<br>  如果为 <strong>true</strong>，元素的顶端将和其所在滚动区的可视区域的顶端对齐。<br>  如果为 <strong>false</strong>，元素的底端将和其所在滚动区的可视区域的底端对齐。</li><li><p><strong>scrollIntoViewOptions</strong>   一个 <strong>boolean</strong> 或一个带有选项的 <strong>object</strong>：  </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    behavior: &quot;auto&quot;  | &quot;instant&quot; | &quot;smooth&quot;,</div><div class="line">    block:    &quot;start&quot; | &quot;end&quot;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>  如果是一个 <strong>boolean</strong>, <strong>true</strong> 相当于 <strong>{block: “start”}</strong>，<strong>false</strong> 相当于 <strong>{block: “end”}</strong></p></li></ul></li><li>兼容<br>  详情点击 <a href="http://docs.w3cub.com/browser_support_tables/scrollintoview/" target="_blank" rel="external">here.</a></li></ul></li><li><p><strong>scrollIntoViewIfNeeded()</strong> 让当前的元素滚动到浏览器窗口的可视区域内</p><ul><li><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scrollIntoViewIfNeeded(); // 等同于element.scrollIntoView(true)</div><div class="line">element.scrollIntoView(alignToTop); // Boolean型参数</div></pre></td></tr></table></figure></li><li><p>参数</p></li><li><strong>alignToTop</strong> 一个 <strong>Boolean</strong> 值：<br>  如果为 <strong>true</strong>，元素的顶端将和其所在滚动区的可视区域的顶端对齐。<br>  如果为 <strong>false</strong>，元素的底端将和其所在滚动区的可视区域的底端对齐。</li><li>兼容<br>  详情点击 <a href="http://docs.w3cub.com/browser_support_tables/scrollintoviewifneeded/" target="_blank" rel="external">here.</a></li></ul></li></ul><p>然后，开始动刀，测试。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>输入框聚焦，添加键盘呼起延迟，并对呼出键盘后的页面做输入框位置调整。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">var container = document.getElementById(&quot;wrapper&quot;); //最外部滚动容器</div><div class="line">var ele = document.getElementById(&quot;input_test&quot;);</div><div class="line">var eleDIv = document.getElementById(&quot;footer&quot;);</div><div class="line"></div><div class="line">var u = navigator.userAgent;</div><div class="line">var isiOS = !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/); //ios终端</div><div class="line">var isUc = u.indexOf(&quot;UCBro&quot;) &gt; -1;</div><div class="line"></div><div class="line">if(isiOS &amp;&amp; ele &amp;&amp; eleDIv)&#123;</div><div class="line">    ele.onfocus = function()&#123;</div><div class="line">setTimeout(function()&#123;</div><div class="line">            scrollDiv();</div><div class="line">        &#125;,isUc ? 350 : 200);</div><div class="line">    &#125;  </div><div class="line">&#125;</div><div class="line"></div><div class="line">function scrollDiv()&#123;</div><div class="line">    var isChrome = u.indexOf(&quot;CriOS&quot;) &gt; -1;</div><div class="line">    if(isChrome)&#123;</div><div class="line">        document.body.scrollTop = container.clientHeight; //chrome 特殊处理</div><div class="line">    &#125;else if(Element.prototype.scrollIntoViewIfNeeded)&#123;</div><div class="line">    eleDIv.scrollIntoViewIfNeeded(false);</div><div class="line">    container.scrollTop = 1000; //切换输入法，首次等特殊情况补救</div><div class="line">    &#125;else if(Element.prototype.scrollIntoView)&#123;</div><div class="line">        eleDIv.scrollIntoView(false);  </div><div class="line">    &#125;else&#123;</div><div class="line">        document.body.scrollTop = container.clientHeight; //防止漏网之鱼</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="吐槽："><a href="#吐槽：" class="headerlink" title="吐槽："></a>吐槽：</h2><ol><li><strong>UC</strong> 两个方法都生效，不过呼出处理时间需要更久一点</li><li><strong>chrome</strong> 也成功沦落到一个另类的表现，虽然自己公司 <strong>webapp</strong> 和谷歌表现一致</li><li><strong>ios</strong> 原生 <strong>safari</strong> 浏览器的 <strong>UA</strong> 简直没法区分</li></ol><p>Ps：这个方法可能不是最完美的解决方案，仅供参考，毕竟只是做个笔记。完整代码 <strong><a href="/statics/ios-webapp-issues/demo.html">请点击</a></strong> 。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ios底部输入框遮挡&quot;&gt;&lt;a href=&quot;#ios底部输入框遮挡&quot; class=&quot;headerlink&quot; title=&quot;ios底部输入框遮挡&quot;&gt;&lt;/a&gt;ios底部输入框遮挡&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;接上节，因为fixed元素的变现不友好，底部固定元素多采用了absolute定位。但底部固定元素内包含输入控件时，聚焦会发生输入框被键盘遮挡。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;场景&lt;br&gt;  为了实现类 &lt;strong&gt;IM&lt;/strong&gt; 即时通讯页面，输入框聚焦并紧贴键盘顶部浮起。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;表现&lt;br&gt;  某些浏览器会发生输入框遮挡被键盘遮挡。&lt;br&gt;  qq内置以及微信内置浏览器估计对此作了些处理，基本没发现这种情况。&lt;br&gt;  而别的浏览器，或多或少会复现这个问题（第一次触发）&lt;/p&gt;
    
    </summary>
    
      <category term="移动端" scheme="https://somnus13.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="iOS" scheme="https://somnus13.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式笔记二</title>
    <link href="https://somnus13.github.io/2017/05/15/RegExp-note2/"/>
    <id>https://somnus13.github.io/2017/05/15/RegExp-note2/</id>
    <published>2017-05-15T14:07:04.000Z</published>
    <updated>2019-01-17T09:30:13.656Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>抽风的电脑，字怎么变成繁体了。主要为正则对象函数的应用。</p></blockquote><h2 id="正则对象创建"><a href="#正则对象创建" class="headerlink" title="正则对象创建"></a>正则对象创建</h2><h3 id="创建RegExp对象实例"><a href="#创建RegExp对象实例" class="headerlink" title="创建RegExp对象实例"></a>创建RegExp对象实例</h3><ol><li>显式构造: <strong>new RegExp(“pattern”[, “flags”])</strong> 或 <strong>new RegExp(/pattern/[, “flags”])</strong></li><li>隐式构造: <strong>/pattern/[flags]</strong></li></ol><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li><strong>pattern</strong> 正则表达式</li><li><strong>flags</strong><br>  标志匹配规则。例如 “g” 全局匹配，”i” 不区分大小写，”m” 多行匹配等，常用的为 “g” 和 “i”。</li></ul><a id="more"></a><h2 id="正则函数应用"><a href="#正则函数应用" class="headerlink" title="正则函数应用"></a>正则函数应用</h2><h3 id="RegExp对象"><a href="#RegExp对象" class="headerlink" title="RegExp对象"></a>RegExp对象</h3><h4 id="test"><a href="#test" class="headerlink" title="test()"></a><em>test()</em></h4><ul><li>描述<br>  检索字符串的指定值</li><li><p>语法</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exp.test(str)</div></pre></td></tr></table></figure></li><li><p>参数</p><ul><li><strong>exp</strong> 正则对象</li><li><strong>str</strong> 要检索的字符串</li></ul></li><li><p>返回值<br>  返回值为布尔类型，成功匹配则为 <strong>true</strong> ，反之 <strong>false</strong> 。</p></li><li>示例  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//检索字符串内是否存在&quot;abc&quot;</div><div class="line">var exp = /abc/;</div><div class="line">&apos;abcda&apos;.test(exp); //true</div></pre></td></tr></table></figure></li></ul><h4 id="exec"><a href="#exec" class="headerlink" title="exec()"></a><em>exec()</em></h4><ul><li>描述<br>  检索字符串的指定值</li><li><p>语法</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exp.exec(str)</div></pre></td></tr></table></figure></li><li><p>参数</p><ul><li><strong>exp</strong> 正则对象</li><li><strong>str</strong> 要检索的字符串</li></ul></li><li>返回值<br>  返回值为匹配到的值。若无匹配，返回 <strong>null</strong> 。<br>  注：如果指定标志 <strong>g</strong>，可多次执行 <strong>exec()</strong> 查找成功匹配，查找位置从上一次查找的 <strong>lasetIndex</strong> 开始。</li><li>示例  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//多次执行exec()</span></div><div class="line"><span class="keyword">var</span> patt1=<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"o"</span>,<span class="string">"g"</span>);</div><div class="line"><span class="keyword">do</span></div><div class="line">&#123;</div><div class="line">result=patt1.exec(<span class="string">"Hello world!"</span>);</div><div class="line"><span class="built_in">console</span>.log(result);</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span> (result!=<span class="literal">null</span>)</div><div class="line"></div><div class="line"><span class="comment">// ["o", index: 4, input: "Hello world!"]</span></div><div class="line"><span class="comment">// ["o", index: 7, input: "Hello world!"]</span></div><div class="line"><span class="comment">// null</span></div></pre></td></tr></table></figure></li></ul><h4 id="compile"><a href="#compile" class="headerlink" title="compile()"></a><em>compile()</em></h4><p>将来的版本会被移除 <strong>web</strong> 标准，不再赘述。</p><h3 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h3><h4 id="match"><a href="#match" class="headerlink" title="match()"></a><em>match()</em></h4><ul><li>描述<br>  当一个字符串与一个正则表达式匹配时，<strong>match()</strong> 方法检索匹配项。</li><li><p>语法</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">str.match(exp)</div></pre></td></tr></table></figure></li><li><p>参数</p><ul><li><strong>exp</strong> 正则对象<br>  如果 <strong>exp</strong> 传入的值为非正则对象，则会隐示调用 <strong>new RegExp(exp)</strong> 方法转换成正则对象。<br>  如果 <strong>exp</strong> 传入的值为空，则返回结果为 <strong>[‘’]</strong>。</li><li><strong>str</strong> 要检索的字符串</li></ul></li><li><p>返回值<br>  <strong>array</strong>。 包括匹配结果以及子表达式捕获结果的数组。如果未匹配，返回 <strong>null</strong>。  </p><p>  如果正则对象未指定 <strong>“g”</strong> ,返回结果同 <strong>RegExp.exec()</strong> ，且返回结果中拥有两个属性：<br>  <strong>index</strong>: 搜索结果索引值，<strong>input</strong>: 匹配的原始字符串。</p><p>  如果指定了 <strong>“g”</strong> ,返回结果为所有匹配结果字符串的数组对象，而不是RegExp对象，且捕获结果不可获得。</p></li><li>示例</li></ul><h4 id="search"><a href="#search" class="headerlink" title="search()"></a><em>search()</em></h4><ul><li>描述<br>  <strong>search()</strong> 方法执行正则表达式和 <strong>String</strong> 对象之间的一个搜索匹配。</li><li><p>语法</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">str.search(exp)</div></pre></td></tr></table></figure></li><li><p>参数</p><ul><li><strong>exp</strong> 正则对象</li><li><strong>str</strong> 要检索的字符串</li></ul></li><li><p>返回值<br>  匹配成功返回首次匹配结果的索引，否则返回 -1 .</p></li><li>示例  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'Today is Sun.!'</span>;</div><div class="line"><span class="keyword">var</span> result = str.search(<span class="regexp">/(sun\.)/i</span>); <span class="comment">//返回匹配结果的索引值</span></div><div class="line"></div><div class="line">result <span class="comment">// 9</span></div></pre></td></tr></table></figure></li></ul><h4 id="split"><a href="#split" class="headerlink" title="split()"></a><em>split()</em></h4><ul><li>描述<br>  字符串对象分割成字符串数组，字符串分割成子串。</li><li><p>语法</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">str.split(separator[, limit])</div></pre></td></tr></table></figure></li><li><p>参数</p><ul><li><strong>separator</strong> 字符串或正则对象，指定字符串分割的位置</li><li><strong>limit</strong> 指定返回数组的最大长度。如果设定了 <strong>limit</strong> 值，返回数组的最大长度不超过 <strong>limit</strong>，否则不计长度，全部返回。</li></ul></li><li><p>返回值<br>  一个字符串数组，但不包括 <strong>separator</strong> 本身。<br>  如果 <strong>separator</strong> 为包含子表达式的正则对象，那么返回数组中包括子表达式匹配的字符串，但不包含与整个正则表达式匹配的字符串。</p></li><li>注：<br>  函数功能同Array.join()相反。<br>  如果 <strong>separator</strong> 指定为 “”,则每个字符都会被分割。</li><li>示例    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"hello world! let's rock it."</span>;</div><div class="line">str.split(<span class="regexp">/(!|\.)\s/</span>) <span class="comment">//分割两句话，且包括子表达式匹配结果</span></div><div class="line"></div><div class="line"><span class="comment">//["hello world", "!", "let's rock it."]</span></div></pre></td></tr></table></figure></li></ul><h4 id="replace"><a href="#replace" class="headerlink" title="replace()"></a><em>replace()</em></h4><ul><li>描述<br>  字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串</li><li><p>语法</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">str.replace(exp|substr, replacement)</div></pre></td></tr></table></figure></li><li><p>参数</p><ul><li><strong>exp|substr</strong><br>  子字符串或要替换的正则对象。如果为字符串，则优先按照字符串匹配。</li><li><strong>replacement</strong><br>  字符串值。指定替换文本或者生成替换文本的函数</li></ul></li><li>返回值<br>  一个新的匹配替换完成的字符串。</li><li><p>注：<br>  <strong>replace()</strong> 实现的是查找并替换。如果正则对象指定了 <strong>g</strong>（全局标志），则会依次查找替换所有匹配项，否则只会查找替换第一个匹配项。<br>  此外 <strong>replacement</strong> 参数中还有一个特殊的 $ 的特定用法(见文章结尾)。</p></li><li><p>示例</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//颠倒字符串</span></div><div class="line"><span class="keyword">var</span> myName = <span class="string">'yao, somnus'</span>;</div><div class="line">myName.replace(<span class="regexp">/(\w+)\s*, \s*(\w+)/</span>, <span class="string">"$2 $1"</span>) <span class="comment">//$1 $2 匹配两个捕获的子表达式</span></div><div class="line"></div><div class="line"><span class="comment">// 'somnus, yao'</span></div><div class="line"></div><div class="line"><span class="comment">//引号的替换</span></div><div class="line"><span class="keyword">var</span> testStr = <span class="string">'"Tom" and "jerry"'</span>;</div><div class="line">testStr.replace(<span class="regexp">/"([^"]*)"/g</span>, <span class="string">"'$1'"</span>) <span class="comment">//依次匹配并替换    </span></div><div class="line"><span class="comment">//'Tom' and 'jerry'    </span></div><div class="line"><span class="comment">//首字母大写转换</span></div><div class="line"><span class="keyword">var</span> myName = <span class="string">'yao, somnus'</span>;</div><div class="line">myName.replace(<span class="regexp">/\b(\w+)\b/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> name.substring(<span class="number">0</span>,<span class="number">1</span>).toUpperCase()+name.substring(<span class="number">1</span>); <span class="comment">//通过生成替换文本函数完成文本替换</span></div><div class="line">&#125;)</div><div class="line"><span class="comment">//Yao, Somnus</span></div></pre></td></tr></table></figure></li></ul><p>附：replace() 中 $ 的使用</p><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>$1、$2、…、$99</td><td>与 regexp 中的第 1 到第 99 个子表达式相匹配的文本。</td></tr><tr><td>$&amp;</td><td>与 regexp 相匹配的子串。</td></tr><tr><td>$`</td><td>位于匹配子串左侧的文本。</td></tr><tr><td>$’</td><td>位于匹配子串右侧的文本。</td></tr><tr><td>$$</td><td>直接量符号。</td></tr></tbody></table><p>正则表达式暂时就这么多了，笔记做完，心累，慢慢去撸demo了..</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;抽风的电脑，字怎么变成繁体了。主要为正则对象函数的应用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;正则对象创建&quot;&gt;&lt;a href=&quot;#正则对象创建&quot; class=&quot;headerlink&quot; title=&quot;正则对象创建&quot;&gt;&lt;/a&gt;正则对象创建&lt;/h2&gt;&lt;h3 id=&quot;创建RegExp对象实例&quot;&gt;&lt;a href=&quot;#创建RegExp对象实例&quot; class=&quot;headerlink&quot; title=&quot;创建RegExp对象实例&quot;&gt;&lt;/a&gt;创建RegExp对象实例&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;显式构造: &lt;strong&gt;new RegExp(“pattern”[, “flags”])&lt;/strong&gt; 或 &lt;strong&gt;new RegExp(/pattern/[, “flags”])&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;隐式构造: &lt;strong&gt;/pattern/[flags]&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;参数&quot;&gt;&lt;a href=&quot;#参数&quot; class=&quot;headerlink&quot; title=&quot;参数&quot;&gt;&lt;/a&gt;参数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pattern&lt;/strong&gt; 正则表达式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;flags&lt;/strong&gt;&lt;br&gt;  标志匹配规则。例如 “g” 全局匹配，”i” 不区分大小写，”m” 多行匹配等，常用的为 “g” 和 “i”。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://somnus13.github.io/categories/javascript/"/>
    
    
      <category term="正则表达式" scheme="https://somnus13.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式笔记一</title>
    <link href="https://somnus13.github.io/2017/05/15/RegExp-note1/"/>
    <id>https://somnus13.github.io/2017/05/15/RegExp-note1/</id>
    <published>2017-05-15T13:57:21.000Z</published>
    <updated>2017-09-14T16:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>心血來潮，又挖出正則表達式，順便整理下筆記。</p></blockquote><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>常用的元字符：</p><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>\b</td><td>匹配字边界</td></tr><tr><td>\B</td><td>匹配非字边界</td></tr><tr><td>\d</td><td>匹配数字字符</td></tr><tr><td>\D</td><td>匹配非数字字符</td></tr><tr><td>\w</td><td>匹配A-Z，a-z，0-9和下划线</td></tr><tr><td>\W</td><td>匹配除以上任意</td></tr></tbody></table><a id="more"></a><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p>特殊字符的匹配需要进行转义，字符前添加 <strong>“\”</strong></p><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td><center>*</center></td><td><strong>零次或多次匹配</strong>前面的字符或表达式</td></tr><tr><td><center>+</center></td><td><strong>一次或多次</strong>匹配前面的字符或表达式</td></tr><tr><td><center>?</center></td><td><strong>零次或一次</strong>匹配。若紧随其他限定符则匹配非贪婪模式</td></tr><tr><td><center>^</center></td><td>匹配字符串开始的位置。若用作括号表达式第一个字符贼会对字符集取反</td></tr><tr><td><center>$</center></td><td>匹配搜索字符串结尾的位置</td></tr><tr><td><center>.</center></td><td>匹配除换行符 <strong>\n</strong> 之外的任意单个字符</td></tr><tr><td><center>[ ]</center></td><td>标记括号表达式的开始和结尾</td></tr><tr><td><center>{ }</center></td><td>限定表达式的开始和结尾</td></tr><tr><td><center>( )</center></td><td>子表达式的开始和结尾。可保存子表达式以备将来使用</td></tr><tr><td><center>&#124;</center></td><td>候选项表达式匹配</td></tr><tr><td><center>/</center></td><td><strong>JScript</strong> 中的文本正则表达式模式的开始和结尾，后一个 <strong>‘/‘</strong> 后添加单字符标志可指定搜索行为。g(全局) i(忽略大小写)</td></tr><tr><td><center>\</center></td><td>将下一字符标记为特殊字符文本。反向引用或八进制转义字符</td></tr></tbody></table><h2 id="非打印字符"><a href="#非打印字符" class="headerlink" title="非打印字符"></a>非打印字符</h2><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>\f</td><td>换页符</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\r</td><td>回车符</td></tr><tr><td>\v</td><td>垂直制表符</td></tr><tr><td>\t</td><td><strong>Tab</strong> 符</td></tr><tr><td>\s</td><td>任意空白字符</td></tr><tr><td>\S</td><td>任意非空白字符</td></tr></tbody></table><h2 id="贪婪与懒惰模式"><a href="#贪婪与懒惰模式" class="headerlink" title="贪婪与懒惰模式"></a>贪婪与懒惰模式</h2><p>正则中包含能接受的重复的限定符时，通常行为是尽可能匹配更多的字符。</p><p>例如: <strong>a.*b</strong> 限定符在贪婪模式下会尽可能匹配更多的字符。<br><strong>a.*b</strong> 会匹配字符串 <strong>acbab</strong> 的 <strong>acbab</strong> 而不会匹配 <strong>acb</strong>。</p><p>有时我们需要匹配尽可能少的字符，这时我们需要在限定符后添加 <strong>?</strong> 。<br>例如：<strong>a.*?b</strong> 会匹配到 <strong>acbab</strong> 的 <strong>acb</strong> 和 <strong>ab</strong> 。</p><p>懒惰限定符:</p><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>*?</td><td>重复任意次，但尽可能少重复</td></tr><tr><td>+?</td><td>重复1次或更多次，但尽可能少重复</td></tr><tr><td>??</td><td>重复0次或1次，但尽可能少重复</td></tr><tr><td>{n,m}?</td><td>重复n到m次，但尽可能少重复</td></tr><tr><td>{n,}?</td><td>重复n次以上，但尽可能少重复</td></tr></tbody></table><h2 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h2><p>子表达式匹配的文本即此分组捕获的内容能在表达式以及程序中作进一步的处理。</p><p>子表达式用括号限定符来声明。 <strong>(a.b)c</strong> 中 <strong>(a.b)</strong> 则声明了一个子表达式，子表达式的内容可以捕获。而子表达式匹配的内容则可视作一个分组。</p><p>默认情况下，每个分组都拥有一个组号，从左到右，以子表达式的左括号为标志，第一组为1，依次递增。</p><p>反向引用用于重复搜索前面某个分组匹配的文本，语法为: <strong>+组号或组名</strong>  <strong>“\1”</strong> 。</p><p>例如：搜索不正确的变量声明 <strong>var var a = ‘hello’;</strong></p><p> <strong>\b(\w+)\b\s+\1\b</strong> 为例，<strong>(\w+)</strong> 分组匹配内容, <strong>\1</strong> 分组捕获内容。</p><p>或者可以自己指定组名 语法: <strong>(?&lt;name&gt;\w+)</strong> 或 <strong>(?’name’\w+)</strong> <strong>name</strong> 即为组名称。</p><p>反向引用这个组捕获内容，语法: <strong> \k&lt;name&gt; </strong></p><p>所以上面的例子也可以写作: <strong>\b(?<name>\w+)\b\s+\k<name>\b</name></name></strong></p><p>其次还有几种特殊用法:</p><table><thead><tr><th>分类</th><th>代码/语法</th><th>说明</th></tr></thead><tbody><tr><td>内容捕获</td><td><center> (exp) </center></td><td>匹配exp并捕获到自动命名的组中</td></tr><tr><td>内容捕获</td><td><center> (?<name>exp) </name></center></td><td>匹配exp并捕获到name命名的组中</td></tr><tr><td>内容捕获</td><td><center> (?:exp) </center></td><td>匹配exp不捕获也不分配组</td></tr><tr><td>零宽断言</td><td><center> (?=exp) </center></td><td>匹配exp前面位置</td></tr><tr><td>零宽断言</td><td><center> (?&lt;=exp) </center></td><td>匹配exp后面位置</td></tr><tr><td>零宽断言</td><td><center> (?!exp) </center></td><td>匹配后面不是exp的位置</td></tr><tr><td>零宽断言</td><td><center> (?&lt;!exp) </center></td><td>匹配钱面不是exp的位置</td></tr><tr><td>注释</td><td><center> (?#comment) </center></td><td>提供注释，方便阅读</td></tr></tbody></table><h2 id="零宽断言"><a href="#零宽断言" class="headerlink" title="零宽断言"></a>零宽断言</h2><p>用于查找某些内容（但不包括自身）之前或者之后的东西，也就是说他们指定一个位置，而这个位置满足一定的条件（即断言），故称为零宽断言。</p><ul><li><p><strong>(?=exp)</strong> 零宽度正预测先行断言</p><p>  断言自身出现的位置的后面能匹配表达式exp</p><p>  例如： <strong>\b\w+(?=img\b)</strong> 匹配以img结尾的单词的前面部分(不包括 <strong>img</strong> )</p></li><li><p><strong>(?&lt;=exp)</strong> 零宽度正回顾后发断言</p><p>  断言自身出现的位置的前面能匹配表达式exp</p><p>  <strong>(?&lt;=\bexp)\w+\b</strong> 匹配 <strong>exp</strong> 开头的单词的后半部分(不包括 <strong>exp</strong> )</p></li><li><p><strong>(?:exp)</strong> 零宽度负预测先行断言</p><p>  断言此位置的后面不能匹配表达式 <strong>exp</strong></p><p>  <strong>\d{3}(?:\d)</strong> 匹配后面不为数字的三位数</p></li><li><p><strong>(?&lt;:exp)</strong> 零宽度负回顾后发断言</p><p>  断言此位置出现的前面不能匹配子表达式 <strong>exp</strong></p><p>  <strong>(?&lt;:0)\d{7}</strong> 匹配前面非 <strong>0</strong> 的 7 位数字</p></li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>通过 <strong>(?#comment)</strong> 来包含注释，方便阅读。</p><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>正则表达式的匹配优先级：从左到右，并遵循优先级顺序。<br>从上到下优先级依次降低。</p><table><thead><tr><th>代码</th><th>说明</th></tr></thead><tbody><tr><td><center> \ </center></td><td><center> 转义符 </center></td></tr><tr><td><center> () (?:) (?=) [] </center></td><td><center> 括号，中括号 </center></td></tr><tr><td><center> * + ? {n} {n,} {n,m} </center></td><td><center> 限定符 </center></td></tr><tr><td><center> ^ $ \任意字符 </center></td><td><center> 定位点和序列 </center></td></tr><tr><td><center> &#124; </center></td><td><center> 替换选项 </center></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;心血來潮，又挖出正則表達式，順便整理下筆記。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;元字符&quot;&gt;&lt;a href=&quot;#元字符&quot; class=&quot;headerlink&quot; title=&quot;元字符&quot;&gt;&lt;/a&gt;元字符&lt;/h2&gt;&lt;p&gt;常用的元字符：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;语法&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\b&lt;/td&gt;
&lt;td&gt;匹配字边界&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\B&lt;/td&gt;
&lt;td&gt;匹配非字边界&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\d&lt;/td&gt;
&lt;td&gt;匹配数字字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\D&lt;/td&gt;
&lt;td&gt;匹配非数字字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\w&lt;/td&gt;
&lt;td&gt;匹配A-Z，a-z，0-9和下划线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\W&lt;/td&gt;
&lt;td&gt;匹配除以上任意&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://somnus13.github.io/categories/javascript/"/>
    
    
      <category term="正则表达式" scheme="https://somnus13.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>新的开始</title>
    <link href="https://somnus13.github.io/2017/05/06/new-start/"/>
    <id>https://somnus13.github.io/2017/05/06/new-start/</id>
    <published>2017-05-06T07:48:47.000Z</published>
    <updated>2017-09-14T16:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>脑子一热一抽筋把家里电脑换了个硬盘，重做了个系统..</p></blockquote><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>重装系统遇到阻碍，无奈格掉了硬盘，代之前的十几篇就随风而去了</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>还是原来的配方，不过已经变了味道。<br>在原先的博客分支添加了一个hexo分支用作本地未编译代码的备份，而另一个master分支则用于博客编译文件的push分支。<br>so，妈妈再也不担心我的代码因为各种原因丢失了。</p><h2 id="待做"><a href="#待做" class="headerlink" title="待做"></a>待做</h2><p>趁着这次机会算是让我好好的了解了一下github ssh同步代码的流程。<br>然后接下来就是单纯做个计划，计划下后来的几篇的内容。<br><a id="more"></a></p><ol><li>github 入门使用指南（单就常用的吧）</li><li>atom编辑器初尝心得与插件之类</li><li>git命令使用（公司办公一直GUI操作，总感觉自己是个假的git使用者）</li><li>内存管理，执行上下文，this，作用域作用域链，原型原型链之类（一直有再看，但是总感觉没入门，不能给别人讲清楚就算没懂吧）</li><li>整理一下正则表达式的笔记</li><li>等等<br>最近日语学的整个人有点发懒，都五月份了才想起改该好好学习了，惭愧..</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;脑子一热一抽筋把家里电脑换了个硬盘，重做了个系统..&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;重装系统遇到阻碍，无奈格掉了硬盘，代之前的十几篇就随风而去了&lt;/p&gt;
&lt;h2 id=&quot;解决&quot;&gt;&lt;a href=&quot;#解决&quot; class=&quot;headerlink&quot; title=&quot;解决&quot;&gt;&lt;/a&gt;解决&lt;/h2&gt;&lt;p&gt;还是原来的配方，不过已经变了味道。&lt;br&gt;在原先的博客分支添加了一个hexo分支用作本地未编译代码的备份，而另一个master分支则用于博客编译文件的push分支。&lt;br&gt;so，妈妈再也不担心我的代码因为各种原因丢失了。&lt;/p&gt;
&lt;h2 id=&quot;待做&quot;&gt;&lt;a href=&quot;#待做&quot; class=&quot;headerlink&quot; title=&quot;待做&quot;&gt;&lt;/a&gt;待做&lt;/h2&gt;&lt;p&gt;趁着这次机会算是让我好好的了解了一下github ssh同步代码的流程。&lt;br&gt;然后接下来就是单纯做个计划，计划下后来的几篇的内容。&lt;br&gt;
    
    </summary>
    
      <category term="杂记" scheme="https://somnus13.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>ES5新增数组方法</title>
    <link href="https://somnus13.github.io/2017/05/06/new-array-func-es5/"/>
    <id>https://somnus13.github.io/2017/05/06/new-array-func-es5/</id>
    <published>2017-05-06T06:47:09.000Z</published>
    <updated>2019-01-17T09:28:16.247Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES5新增数组方法"><a href="#ES5新增数组方法" class="headerlink" title="ES5新增数组方法"></a>ES5新增数组方法</h1><blockquote><p>ES5新增数组方法学习笔记。</p></blockquote><h2 id="Foreach"><a href="#Foreach" class="headerlink" title="Foreach"></a>Foreach</h2><p>接收一个函数作为参数，对数组进行循环遍历，而并不改变数组。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">array.forEach(callback(currentValue, index, array)&#123;</div><div class="line"></div><div class="line">&#125;,<span class="keyword">this</span>)</div><div class="line"></div><div class="line">array.forEach(callback[, thisArg])</div></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>forEach方法会对数组的有效值的每一项执行callback函数，已经删除或者未初始化的项会被跳过。而callback函数会被传入三个参数：</p><ul><li>数组当前项值</li><li>当前项的索引</li><li>数组对象本身</li></ul><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>];</div><div class="line">arr.forEach(<span class="built_in">console</span>.log);</div><div class="line"></div><div class="line"><span class="comment">//循环遍历功能等同于</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; len = arr.length,i &lt; len; i++)&#123;</div><div class="line">  <span class="built_in">console</span>.log(arr[i]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//期望输出</span></div><div class="line">a <span class="number">0</span> [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>]</div><div class="line">b <span class="number">1</span> [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>]</div><div class="line">c <span class="number">2</span> [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>]</div><div class="line">d <span class="number">3</span> [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>]</div><div class="line">a</div><div class="line">b</div><div class="line">c</div><div class="line">d</div></pre></td></tr></table></figure><p>区别就在于forEach回调返回了三个参数，如图</p><img src="/2017/05/06/new-array-func-es5/forEach.png" alt="[forEach]" title="[forEach]"> <p>而array.forEach(callback[, thisArg])方法中thisArg参数是可选的，如果指定则在执行回调时用作this的值，否则默认传入undefine。</p><h3 id="兼容polyfill"><a href="#兼容polyfill" class="headerlink" title="兼容polyfill"></a>兼容polyfill</h3><p>作为ES5新增方法，难免有些浏览器不支持，所以当我们使用时需要添加一段代码来帮助它兼容旧环境（polyfill）,代码来自MDN。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.forEach) &#123;</div><div class="line">  <span class="built_in">Array</span>.prototype.forEach = <span class="function"><span class="keyword">function</span> (<span class="params">callback,thisArg</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> T, k;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(<span class="keyword">this</span> == <span class="literal">null</span>)&#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'this is null or not defined'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> O = <span class="built_in">Object</span>(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">var</span> len = O.length &gt;&gt;&gt; <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback !== <span class="string">'function'</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(callback + <span class="string">'is not a function'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt; <span class="number">1</span>) &#123;</div><div class="line">      T = thisArg;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    k = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (k &lt; len) &#123;</div><div class="line">      <span class="keyword">var</span> kValue;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (k <span class="keyword">in</span> O) &#123;</div><div class="line">        kValue = O[k];</div><div class="line">        callback.call(T, kValue, k, O);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      k++;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>forEach无法在所有有效元素传递给回调函数之前终止（而for循环有break方法），如需提前终止，需要把forEach置于try语句块中，并抛出异常。</p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>用法同forEach基本相同，区别在于map方法返回一个新数组</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> new_array = arr.map(callback[, thisArg])</div></pre></td></tr></table></figure><h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><p>略.</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>略.</p><h3 id="兼容polyfill-1"><a href="#兼容polyfill-1" class="headerlink" title="兼容polyfill"></a>兼容polyfill</h3><p>区别于forEach():<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建新数组</span></div><div class="line"><span class="keyword">var</span> A = <span class="keyword">new</span> <span class="built_in">Array</span>(len);</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="comment">//保存callback返回值</span></div><div class="line">mappedValue = callback.call(T, kValue, k, O);</div><div class="line"></div><div class="line"><span class="comment">// 返回值添加到新数组A中.</span></div><div class="line">A[ k ] = mappedValue;</div><div class="line"></div><div class="line">...   </div><div class="line"></div><div class="line"><span class="comment">//返回新数组A</span></div><div class="line"><span class="keyword">return</span> A;      </div></pre></td></tr></table></figure></p><h2 id="Every"><a href="#Every" class="headerlink" title="Every"></a>Every</h2><p>every()接收一个返回值布尔类型的函数。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr.every(callback[, thisArg])</div></pre></td></tr></table></figure><h3 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h3><p>every方法为数组的每一项执行callback函数，不会改变原数组。如果所有项callback函数返回为true，则方法返回true，如果遇到一个返回值为false，则直接终止并返回false。<br>同样，callback方法只对那些有效值的项进行操作。<br>callback被调用传入三个函数：</p><ul><li>元素值</li><li>元素索引</li><li>数组对象本身</li></ul><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>检测是否为奇数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isOdd</span>(<span class="params">ele, index, arr</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> (ele % <span class="number">2</span> == <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">12</span>].every(isOdd);</div><div class="line"><span class="comment">//false</span></div><div class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>].every(isOdd);</div><div class="line"><span class="comment">//true</span></div></pre></td></tr></table></figure></p><h3 id="兼容polyfill-2"><a href="#兼容polyfill-2" class="headerlink" title="兼容polyfill"></a>兼容polyfill</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.every)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">Array</span>.prototype.every = <span class="function"><span class="keyword">function</span>(<span class="params">callback, thisArg</span>)</span>&#123;</div><div class="line">      <span class="keyword">if</span>(<span class="keyword">this</span> == <span class="literal">null</span>)&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'this is null or not defined'</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">var</span> T = <span class="built_in">Object</span>(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">      <span class="keyword">var</span> len = t.length &gt;&gt;&gt; <span class="number">0</span>;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> callback !== <span class="string">'function'</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(callback + <span class="string">'is not a function'</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">var</span> thisArg = <span class="built_in">arguments</span>.length &gt; <span class="number">1</span> ? thisArg : <span class="literal">null</span>;</div><div class="line"></div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)</div><div class="line">      &#123;</div><div class="line">        <span class="keyword">if</span> (i <span class="keyword">in</span> t &amp;&amp; !fun.call(thisArg, t[i], i, t))</div><div class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Some"><a href="#Some" class="headerlink" title="Some"></a>Some</h2><p>用法同every()基本相同，区别在于只要有一项callback函数返回值为true则方法返回true，否则为false。</p><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr.some(callback[, thisArg])</div></pre></td></tr></table></figure><h3 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h3><p>略.</p><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>略.</p><h3 id="兼容polyfill-3"><a href="#兼容polyfill-3" class="headerlink" title="兼容polyfill"></a>兼容polyfill</h3><p>略.区别只在于return值取反</p><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><p>接受一个回调函数作为累加器，数组中每个值开始缩减，最终为一个值，是ES5中新增的一个数组逐项处理方法。<br>reduce直译是缩减减少，函数定义以及实现个人感觉更像是递归。</p><h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr.reduce(callback[, initialValue])</div></pre></td></tr></table></figure><h3 id="参数-4"><a href="#参数-4" class="headerlink" title="参数"></a>参数</h3><p>reduce方法接收一个函数类型的回调函数和一个可选初始值参数</p><ul><li>callback 数组每一项的回调函数，接受4个参数<ul><li>accumulator 上一次调用的返回值或者初始值</li><li>currentValue 正在处理的数组元素</li><li>currentindex 正在处理的数组元素索引</li><li>array 数组元素本身</li></ul></li><li>initialValue 可选初始值参数，第一次调用传给accumulator</li></ul><p>回调函数第一次执行时，有两种情况，如果initialValue指定，则accumulator取值为initialValue，currentValue取值数组第一项，如果没有指定initialValue，<br>accumulator取值数组第一项，而currentValue取值数组第二项。</p><p>如果数组为空且没有提供initialValue，会抛出TypeError错误，如果仅有一个元素且没提供initialValue或者提供了initialValue数组为空，则直接返回，不会调用callback。</p><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><p>数组求和，数组扁平化，计算数组中值出现次数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//求和</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line"></div><div class="line">arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">pre, cur</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> pre + cur;</div><div class="line">&#125;,<span class="number">10</span>);</div><div class="line"></div><div class="line"><span class="comment">//20</span></div><div class="line"></div><div class="line"><span class="comment">//扁平化</span></div><div class="line"><span class="keyword">var</span> newArr = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]].reduce(<span class="function"><span class="keyword">function</span>(<span class="params">pre, cur</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> pre.concat(cur);</div><div class="line">&#125;,[]);</div><div class="line"></div><div class="line"><span class="comment">//[1, 2, 3, 4, 5, 6]</span></div><div class="line"></div><div class="line"><span class="comment">//计算重复值次数</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Ciel'</span>, <span class="string">'Dianel'</span>, <span class="string">'Alice'</span>, <span class="string">'Ciel'</span>, <span class="string">'Alice'</span>];</div><div class="line"></div><div class="line">arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">newObj ,key</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(key <span class="keyword">in</span> newObj)&#123;</div><div class="line">    newObj[key]++;</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    newObj[key] = <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> newObj;</div><div class="line">&#125;,&#123;&#125;);</div><div class="line"></div><div class="line"><span class="comment">//&#123;Alice: 3, Bob: 1, Ciel: 2, Dianel: 1&#125;</span></div></pre></td></tr></table></figure><br><img src="/2017/05/06/new-array-func-es5/reduce.png" alt="[reduce]" title="[reduce]"> </p><h3 id="兼容polyfill-4"><a href="#兼容polyfill-4" class="headerlink" title="兼容polyfill"></a>兼容polyfill</h3><p>一如既往地代码来自MDN<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.reduce)</div><div class="line">&#123;</div><div class="line">  <span class="built_in">Array</span>.prototype.reduce = <span class="function"><span class="keyword">function</span>(<span class="params">callback <span class="regexp">/*, initialValue*/</span></span>) </span>&#123;</div><div class="line"><span class="meta">    'use strict'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> === <span class="literal">null</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Array.prototype.reduce called on null or undefined'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback !== <span class="string">'function'</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(callback + <span class="string">' is not a function'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> t = <span class="built_in">Object</span>(<span class="keyword">this</span>), len = t.length &gt;&gt;&gt; <span class="number">0</span>, k = <span class="number">0</span>, value;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt;= <span class="number">2</span>) &#123;</div><div class="line">      value = <span class="built_in">arguments</span>[<span class="number">1</span>];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">      <span class="keyword">while</span> (k &lt; len &amp;&amp; !(k <span class="keyword">in</span> t)) &#123;</div><div class="line">        k++;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (k &gt;= len) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Reduce of empty array with no initial value'</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      value = t[k++];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (; k &lt; len; k++) &#123;</div><div class="line">      <span class="keyword">if</span> (k <span class="keyword">in</span> t) &#123;</div><div class="line">        value = callback(value, t[k], k, t);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> value;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><p>同every()方法类似，回调函数参数相同，返回值为回调参数结果为true的所有项集合的数组。</p><h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr.filter(callback[, thisArg])</div></pre></td></tr></table></figure><h3 id="参数-5"><a href="#参数-5" class="headerlink" title="参数"></a>参数</h3><p>filter为数组中每一个<strong>有效值</strong>项调用callback函数，返回一个<strong>新数组</strong>，数组内容是callback返回值为true的元素的集合。</p><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><p>筛选奇数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isOdd</span>(<span class="params">ele</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> ele % <span class="number">2</span> == <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">[<span class="number">1</span>, <span class="number">54</span>, <span class="number">23</span>, <span class="number">44</span>, <span class="number">13</span>].filter(isOdd);</div><div class="line"></div><div class="line"><span class="comment">//[1, 23, 13]</span></div></pre></td></tr></table></figure></p><h3 id="兼容polyfill-5"><a href="#兼容polyfill-5" class="headerlink" title="兼容polyfill"></a>兼容polyfill</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.filter)</div><div class="line">&#123;</div><div class="line">  <span class="built_in">Array</span>.prototype.filter = <span class="function"><span class="keyword">function</span>(<span class="params">fun</span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> === <span class="keyword">void</span> <span class="number">0</span> || <span class="keyword">this</span> === <span class="literal">null</span>)</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>();</div><div class="line"></div><div class="line">    <span class="keyword">var</span> t = <span class="built_in">Object</span>(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">var</span> len = t.length &gt;&gt;&gt; <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fun !== <span class="string">"function"</span>)</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>();</div><div class="line"></div><div class="line">    <span class="keyword">var</span> res = [];</div><div class="line">    <span class="keyword">var</span> thisArg = <span class="built_in">arguments</span>.length &gt;= <span class="number">2</span> ? <span class="built_in">arguments</span>[<span class="number">1</span>] : <span class="keyword">void</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">if</span> (i <span class="keyword">in</span> t)</div><div class="line">      &#123;</div><div class="line">        <span class="keyword">var</span> val = t[i];</div><div class="line"></div><div class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Technically this should Object.defineProperty at</span></div><div class="line">        <span class="comment">//       the next index, as push can be affected by</span></div><div class="line">        <span class="comment">//       properties on Object.prototype and Array.prototype.</span></div><div class="line">        <span class="comment">//       But that method's new, and collisions should be</span></div><div class="line">        <span class="comment">//       rare, so use the more-compatible alternative.</span></div><div class="line">        <span class="keyword">if</span> (fun.call(thisArg, val, i, t))</div><div class="line">          res.push(val);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ES5新增数组方法&quot;&gt;&lt;a href=&quot;#ES5新增数组方法&quot; class=&quot;headerlink&quot; title=&quot;ES5新增数组方法&quot;&gt;&lt;/a&gt;ES5新增数组方法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;ES5新增数组方法学习笔记。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Foreach&quot;&gt;&lt;a href=&quot;#Foreach&quot; class=&quot;headerlink&quot; title=&quot;Foreach&quot;&gt;&lt;/a&gt;Foreach&lt;/h2&gt;&lt;p&gt;接收一个函数作为参数，对数组进行循环遍历，而并不改变数组。&lt;/p&gt;
&lt;h3 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;array.forEach(callback(currentValue, index, array)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;,&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;array.forEach(callback[, thisArg])&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;参数&quot;&gt;&lt;a href=&quot;#参数&quot; class=&quot;headerlink&quot; title=&quot;参数&quot;&gt;&lt;/a&gt;参数&lt;/h3&gt;&lt;p&gt;forEach方法会对数组的有效值的每一项执行callback函数，已经删除或者未初始化的项会被跳过。而callback函数会被传入三个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数组当前项值&lt;/li&gt;
&lt;li&gt;当前项的索引&lt;/li&gt;
&lt;li&gt;数组对象本身&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://somnus13.github.io/categories/javascript/"/>
    
    
      <category term="ES5" scheme="https://somnus13.github.io/tags/ES5/"/>
    
  </entry>
  
</feed>
