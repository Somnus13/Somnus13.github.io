<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>那些踩屎的经历</title>
  
  <subtitle>修煉中..</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://somnus13.github.io/"/>
  <updated>2017-09-19T15:27:28.000Z</updated>
  <id>https://somnus13.github.io/</id>
  
  <author>
    <name>Somnus13</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BFC(Block Formatting Content)</title>
    <link href="https://somnus13.github.io/2017/09/19/bfc/"/>
    <id>https://somnus13.github.io/2017/09/19/bfc/</id>
    <published>2017-09-19T15:24:04.000Z</published>
    <updated>2017-09-19T15:27:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="What-is-BFC"><a href="#What-is-BFC" class="headerlink" title="What is BFC?"></a>What is BFC?</h3><blockquote><p>BFC 是 W3C CSS 2.1 规范中的一个概念，它决定了元素如何对其内容进行定位，以及与其他元素的关系和相互作用。  </p></blockquote><p>当涉及到可视化布局的时候，BFC 为我们提供了一个环境，这个环境规定着其布局的规则，而不同环境之间的布局不会相互影响。<br>想要更好的理解这个概念，需要先理解 Box 和 Formatting Context 的概念。网页的布局核心就是盒子的组成排列，这些盒子就是 Box。盒子的类型和 display 属性决定着这个 Box 的类型。<br>不同类型的 Box，会参与不同的 Formatting Context（决定如何渲染文档的格式结构），然后其内元素就会以不同方式渲染。例如：</p><ul><li>block-level box ：display 属性为 block, list-item, table 的元素，会生成 block-level box，<br>  并参与 block formatting context;</li><li>inline-level box：display 属性为 inline, inline-block, inline-table 的元素，会生成 inline-level box，<br>  并参与 inline formatting context</li></ul><p>而 Formatting Context 是一块渲染区域，它决定着其子元素如何定位，以及与其他元素的位置关系。<br>通过上面一些概念，建议把 BFC 简单理解为一种属性，在具有此属性的容器中，元素按照 BFC 的规则实现布局。比如浮动元素会形成 BFC，这就是为什么我们看到浮动元素布局跟普通文档流的布局有所差别的原因。<br><a id="more"></a></p><h3 id="规则是什么呢"><a href="#规则是什么呢" class="headerlink" title="规则是什么呢"></a>规则是什么呢</h3><p>简单以下几条规则，理解起来不太难。  </p><ul><li>内部的 box 元素会在垂直方向依次放置，也就是文档流的从上而下</li><li>垂直方向距离由 margin（外边距）决定</li><li>其内每个元素的 margin box 的左边和包含块 border box 的左边相接触（由右向左的格式化则相反），浮动也如此</li><li>BFC 的区域不会与其内浮动元素发成重叠</li><li>BFC 就是页面一个隔离的独立容器，内联元素不会对外面元素产生影响，反之亦成立</li><li>计算 BFC 高度的时候，浮动元素也参与计算</li></ul><h3 id="哪些元素会生成-BFC"><a href="#哪些元素会生成-BFC" class="headerlink" title="哪些元素会生成 BFC"></a>哪些元素会生成 BFC</h3><ul><li>根元素</li><li>浮动元素，float 属性不为 none</li><li>绝对定位元素，position 属性为 absolute 或 fixed（absolute的子类）</li><li>display 属性为 inline-block，table-cell，table-caption，flex，inline-flex</li><li>overflow 属性不为 visible 以外值的 css3 中，BFC 叫做 Floe Root，并增加了一些触发条件</li></ul><h3 id="BFC-在布局中的作用"><a href="#BFC-在布局中的作用" class="headerlink" title="BFC 在布局中的作用"></a>BFC 在布局中的作用</h3><ul><li>解决两元素 margin 重叠问题。<br>  要想两个相邻元素不发生垂直方向的 margin 重叠，需要将他们定义在不同的 BFC 中。解决方法即在其中一个元素外包裹一层元素<br>  ，再对包裹元素进行 BFC 触发（声明以上触发 css 属性）。</li><li>解决由于浮动造成的重叠问题。<br>  一般情况下，浮动元素会脱离文档流，即不占用位置。它的性地元素会与它在左上角重叠，但如果两个相邻元素都设置了浮动，那么意味着它们都会以 BFC 的规则渲染，据以上第四条规则，BFC 区域不会相互重叠，所以为什么浮动元素独占空间便能理解了</li><li>解决容器由于拥有浮动元素造成的高度塌陷<br>  普通容器中，如果里面有浮动元素，且不设置高度的情况下，容器的高度是无法被撑起的。这时可通过设置 overflow 属性为 hidden 将之声明为 BFC，那么就可以包含浮动元素了</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;What-is-BFC&quot;&gt;&lt;a href=&quot;#What-is-BFC&quot; class=&quot;headerlink&quot; title=&quot;What is BFC?&quot;&gt;&lt;/a&gt;What is BFC?&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;BFC 是 W3C CSS 2.1 规范中的一个概念，它决定了元素如何对其内容进行定位，以及与其他元素的关系和相互作用。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当涉及到可视化布局的时候，BFC 为我们提供了一个环境，这个环境规定着其布局的规则，而不同环境之间的布局不会相互影响。&lt;br&gt;想要更好的理解这个概念，需要先理解 Box 和 Formatting Context 的概念。网页的布局核心就是盒子的组成排列，这些盒子就是 Box。盒子的类型和 display 属性决定着这个 Box 的类型。&lt;br&gt;不同类型的 Box，会参与不同的 Formatting Context（决定如何渲染文档的格式结构），然后其内元素就会以不同方式渲染。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;block-level box ：display 属性为 block, list-item, table 的元素，会生成 block-level box，&lt;br&gt;  并参与 block formatting context;&lt;/li&gt;
&lt;li&gt;inline-level box：display 属性为 inline, inline-block, inline-table 的元素，会生成 inline-level box，&lt;br&gt;  并参与 inline formatting context&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而 Formatting Context 是一块渲染区域，它决定着其子元素如何定位，以及与其他元素的位置关系。&lt;br&gt;通过上面一些概念，建议把 BFC 简单理解为一种属性，在具有此属性的容器中，元素按照 BFC 的规则实现布局。比如浮动元素会形成 BFC，这就是为什么我们看到浮动元素布局跟普通文档流的布局有所差别的原因。&lt;br&gt;
    
    </summary>
    
      <category term="html" scheme="https://somnus13.github.io/categories/html/"/>
    
    
      <category term="DOM" scheme="https://somnus13.github.io/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>日语初下复习（25-26）</title>
    <link href="https://somnus13.github.io/2017/08/28/nihongo25-26/"/>
    <id>https://somnus13.github.io/2017/08/28/nihongo25-26/</id>
    <published>2017-08-28T11:33:51.000Z</published>
    <updated>2017-09-14T16:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="25-これは明日会議で使う資料です"><a href="#25-これは明日会議で使う資料です" class="headerlink" title="25.これは明日会議で使う資料です　"></a>25.これは明日会議で使う資料です　</h2><h3 id="动词（简体形）-名词-小句（动词简体形）-名词"><a href="#动词（简体形）-名词-小句（动词简体形）-名词" class="headerlink" title="动词（简体形）+ 名词  小句（动词简体形）+ 名词"></a>动词（简体形）+ 名词  小句（动词简体形）+ 名词</h3><p>表示某种习惯或将要发生的动作用基本型，如果是已经玩成的动作用 “<strong>た形</strong>”<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">これは 明日会議で使う 資料です。</div></pre></td></tr></table></figure></p><h3 id="小句（动词简体形）-名は-名-形-です"><a href="#小句（动词简体形）-名は-名-形-です" class="headerlink" title="小句（动词简体形）+ 名は 名/形　です"></a>小句（动词简体形）+ 名は 名/形　です</h3><p>动词小句修饰名词形成的名词短语做主语<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">私が 明日乗る 飛行機は中国航空です。</div></pre></td></tr></table></figure></p><h3 id="小句（动词简体形）-名を-に-から-动ます"><a href="#小句（动词简体形）-名を-に-から-动ます" class="headerlink" title="小句（动词简体形）+ 名を/に/から　动ます"></a>小句（动词简体形）+ 名を/に/から　动ます</h3><p>动词小句修饰名词形成的名词短语做主语以外的其他部分<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">中国で買ったCD を 友達に貸しました。</div></pre></td></tr></table></figure></p><a id="more"></a><h3 id="小句（一类形-二类形-名）-名"><a href="#小句（一类形-二类形-名）-名" class="headerlink" title="小句（一类形/二类形/名）+ 名"></a>小句（一类形/二类形/名）+ 名</h3><p>一类形容词修饰名词用 <strong>基本型</strong>，二类形容词修饰名词 + “<strong>な</strong>“ 修饰，名词修饰名词用 “<strong>の</strong>“ 修饰<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">入り口が 広い あの建物は私の会社です。  </div><div class="line">操作が 簡単な パソコンが欲しいです。  </div><div class="line">数学が 専門の先生 が休みました。</div></pre></td></tr></table></figure></p><h3 id="扩展单词"><a href="#扩展单词" class="headerlink" title="扩展单词"></a>扩展单词</h3><table><thead><tr><th>假名</th><th>释义</th><th>假名</th><th>释义</th><th>假名</th><th>释义</th><th>假名</th><th>释义</th></tr></thead><tbody><tr><td>うえ 上</td><td>上面</td><td>した 下</td><td>下面</td><td>なか 中</td><td>里边，内部</td><td>そと 外</td><td>外面</td></tr><tr><td>まえ 前</td><td>前面</td><td>うしろ 後ろ</td><td>后面</td><td>ひだり</td><td>左 左面</td><td>みぎ 右</td><td>右面</td></tr><tr><td>よこ 横</td><td>侧面</td><td>そば 側</td><td>旁边</td><td>むかい 向かい</td><td>对面</td><td>まわり 周り</td><td>周围</td></tr><tr><td>あいだ 間</td><td>中间</td><td>すみ 隅</td><td>角落</td><td>ました 真下</td><td>正下方</td><td></td><td></td></tr><tr><td>きた 北</td><td>北面</td><td>みなみ 南</td><td>南面</td><td>ひがし 東</td><td>东面</td><td>にし 西</td><td>西面</td></tr></tbody></table><h2 id="26-自転車に二人で乗るのは危ないです"><a href="#26-自転車に二人で乗るのは危ないです" class="headerlink" title="26.自転車に二人で乗るのは危ないです　"></a>26.自転車に二人で乗るのは危ないです　</h2><h3 id="小句（动词简体形）-のは-形-です"><a href="#小句（动词简体形）-のは-形-です" class="headerlink" title="小句（动词简体形）+ のは +  形 です"></a>小句（动词简体形）+ のは +  形 です</h3><p>动词小句加 “<strong>の</strong>“ 使其名词化，表示”<strong>做某动作</strong>“的意思。<br>名词化做主语，谓语为表示性质状态的一类或二类形容词时，主语用助词 “<strong>は</strong>“<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">自転車に二人で乗るのは危ないです。</div><div class="line">パソコンで表を作るのはたのしいです。</div></pre></td></tr></table></figure></p><p>如果名词形式为 <strong>表示好恶、擅长不擅长之类的对象</strong> 时，用助词 “<strong>が</strong>“ 修饰名词<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">李さんは絵を書くにが好きですね。</div><div class="line">はい、色鉛筆でスケッチするのが大好きです。</div></pre></td></tr></table></figure></p><p>此外，如果 <strong>好恶、擅长不擅长之类的对象当做话题</strong> 来讨论，助词用 “<strong>は</strong>“<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">絵を書くのは好きですか。</div><div class="line">いいえ、絵を書くのは嫌いです。</div></pre></td></tr></table></figure></p><h3 id="小句（动词简体形）-の-を-动词"><a href="#小句（动词简体形）-の-を-动词" class="headerlink" title="小句（动词简体形）+ の + を + 动词"></a>小句（动词简体形）+ の + を + 动词</h3><p>动词小句加 “<strong>の</strong>“ 的名词化形式可以做宾语。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">手紙を出すのを忘れました。</div><div class="line">森さんが発言するのを聞きまし。</div></pre></td></tr></table></figure></p><p>这种名词化形式做宾语时 “<strong>の</strong>“ 和 “<strong>こと</strong>“ 可以互换<br>例外：</p><ul><li><p>句尾动词为 しらせます（告诉） 伝えます（转告） 話します（说）等表示 <strong>语言行为</strong> 的动词时，要用 “<strong>こと</strong>“ 而不能用 “<strong>の</strong>“</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">李さんは森さんが休むことを伝えました。</div></pre></td></tr></table></figure></li><li><p>句尾动词为 見ます（看） 聞きます（听） 等表示 <strong>感知动作</strong> 的动词或 手伝います（帮忙） やめます（停止） 防ぎます（防御） 等表示 <strong>直接动作对象</strong> 的动词，则使用 “<strong>の</strong>“ 而不能用 “<strong>こと</strong>“</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">李さんは森さんが車から降りるのを見ました。</div><div class="line">李さんは森さんが荷物を運ぶのを手伝いました。</div></pre></td></tr></table></figure></li></ul><h3 id="小句（简体形）-でしょう-推测"><a href="#小句（简体形）-でしょう-推测" class="headerlink" title="小句（简体形） でしょう [推测]"></a>小句（简体形） でしょう [推测]</h3><p>表示说话人对自己和听话人都不能断定的事进行推测，常与　“<strong>たぶん</strong>“　呼应使用。<br>动词小句和一类形容词小句用简体形后续 “<strong>でしょう</strong>“,<br>二类形容词小句和名词小句则把简体形的 “<strong>だ</strong>“ 换成 “<strong>でしょう</strong>“<br>“<strong>でしょう</strong>“ 的简体形是 “<strong>~だろう</strong>“<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">明日の朝は大雨になるでしょう。</div><div class="line">森さんは知らないでしょう。</div><div class="line">この本の値段は分かりませんが、たぶん高いでしょう。</div><div class="line">今年はたぶん豊作だろう。</div><div class="line">これはたぶん誰かの忘れ物だろう。</div></pre></td></tr></table></figure></p><h3 id="小句（简体形）かもしれません"><a href="#小句（简体形）かもしれません" class="headerlink" title="小句（简体形）かもしれません"></a>小句（简体形）かもしれません</h3><p>表示有可能发生某事，其可能性在百分之五十左右。<br>动词小句和一类形容词小句用简体形后续 “<strong>かもしれません</strong>“,<br>二类形容词小句和名词小句则把简体形的　“<strong>だ</strong>“　换成 “<strong>かもしれません</strong>“<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">森さんは今日会社を休むかもしれません。</div><div class="line">クレジットカードを落としたかもしれません。</div></pre></td></tr></table></figure></p><p>与 “<strong>でしょう</strong>“ 相比，”<strong>かもしれません</strong>“表示的概率较低。</p><h3 id="もしかしたら"><a href="#もしかしたら" class="headerlink" title="もしかしたら"></a>もしかしたら</h3><p>口语场合，用于可能性较低的场合，一般与 “<strong>～かもしれません</strong>“ “<strong>～ではありません</strong>“ 等呼应使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">馬さんはまだ来ませんね。</div><div class="line">もしかしたら、今日は来ないかもしれませんよ。</div><div class="line"></div><div class="line">もしかしたら、太田さんではありませんか。</div><div class="line">ええ、そうですが。。</div></pre></td></tr></table></figure></p><h3 id="それで"><a href="#それで" class="headerlink" title="それで"></a>それで</h3><p>表示前面句子的时态为后面句子时态的原因、理由<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">日本に握手の習慣がないんですね。</div><div class="line">ええ、そうなんです。それで、つい握手するのを忘れます。</div></pre></td></tr></table></figure></p><p>“だから” 也表示原因、理由。<br>但是与 “それで” 相比，语气较强，且后面可以使表示其实活着推测的句子，而 “<strong>それで</strong>“不行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">すぐに会議が始まします。だから、急いでください。</div></pre></td></tr></table></figure></p><h3 id="つい"><a href="#つい" class="headerlink" title="つい"></a>つい</h3><p>表示 <strong>并非有意</strong> 所为确形成了某种后果，并含有对意想不到的结果感到不快、后悔的语感。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">バーゲン会場では、つい何でも買いたくなりです。</div></pre></td></tr></table></figure></p><h3 id="公司常用寒暄用语"><a href="#公司常用寒暄用语" class="headerlink" title="公司常用寒暄用语"></a>公司常用寒暄用语</h3><table><thead><tr><th>句子</th><th>释义</th></tr></thead><tbody><tr><td>申し訳ありません</td><td>对不起，抱歉</td></tr><tr><td>どうも</td><td>谢谢/对不起</td></tr><tr><td>ごめんください</td><td>对不起，有人吗</td></tr><tr><td>お邪魔します</td><td>打搅</td></tr><tr><td>お邪魔しました</td><td>打搅了</td></tr><tr><td>失礼します</td><td>打搅了/告辞了</td></tr><tr><td>失礼しました</td><td>告辞了/失礼了</td></tr><tr><td>お先に失礼します</td><td>先告辞了</td></tr><tr><td>お疲れ様でした</td><td>辛苦了</td></tr><tr><td>ご苦労様でした</td><td>辛苦了</td></tr><tr><td>これからお世話になります</td><td>今后请多多关照</td></tr><tr><td>いつもお世話になっております</td><td>承蒙多方照顾</td></tr><tr><td>いろいろお世話になりましたよ</td><td>收到更方面的照顾</td></tr><tr><td>お久しぶりです</td><td>好久不见</td></tr><tr><td>ご無沙汰しています</td><td>久疏问候</td></tr><tr><td>お大事に</td><td>请保重</td></tr><tr><td>おかげさまで</td><td>托您的福</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;25-これは明日会議で使う資料です&quot;&gt;&lt;a href=&quot;#25-これは明日会議で使う資料です&quot; class=&quot;headerlink&quot; title=&quot;25.これは明日会議で使う資料です　&quot;&gt;&lt;/a&gt;25.これは明日会議で使う資料です　&lt;/h2&gt;&lt;h3 id=&quot;动词（简体形）-名词-小句（动词简体形）-名词&quot;&gt;&lt;a href=&quot;#动词（简体形）-名词-小句（动词简体形）-名词&quot; class=&quot;headerlink&quot; title=&quot;动词（简体形）+ 名词  小句（动词简体形）+ 名词&quot;&gt;&lt;/a&gt;动词（简体形）+ 名词  小句（动词简体形）+ 名词&lt;/h3&gt;&lt;p&gt;表示某种习惯或将要发生的动作用基本型，如果是已经玩成的动作用 “&lt;strong&gt;た形&lt;/strong&gt;”&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;これは 明日会議で使う 資料です。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;小句（动词简体形）-名は-名-形-です&quot;&gt;&lt;a href=&quot;#小句（动词简体形）-名は-名-形-です&quot; class=&quot;headerlink&quot; title=&quot;小句（动词简体形）+ 名は 名/形　です&quot;&gt;&lt;/a&gt;小句（动词简体形）+ 名は 名/形　です&lt;/h3&gt;&lt;p&gt;动词小句修饰名词形成的名词短语做主语&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;私が 明日乗る 飛行機は中国航空です。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;小句（动词简体形）-名を-に-から-动ます&quot;&gt;&lt;a href=&quot;#小句（动词简体形）-名を-に-から-动ます&quot; class=&quot;headerlink&quot; title=&quot;小句（动词简体形）+ 名を/に/から　动ます&quot;&gt;&lt;/a&gt;小句（动词简体形）+ 名を/に/から　动ます&lt;/h3&gt;&lt;p&gt;动词小句修饰名词形成的名词短语做主语以外的其他部分&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;中国で買ったCD を 友達に貸しました。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="日语" scheme="https://somnus13.github.io/categories/%E6%97%A5%E8%AF%AD/"/>
    
    
      <category term="初级下" scheme="https://somnus13.github.io/tags/%E5%88%9D%E7%BA%A7%E4%B8%8B/"/>
    
  </entry>
  
  <entry>
    <title>file对象什么的</title>
    <link href="https://somnus13.github.io/2017/07/24/file/"/>
    <id>https://somnus13.github.io/2017/07/24/file/</id>
    <published>2017-07-24T13:38:44.000Z</published>
    <updated>2017-09-14T16:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="fileList对象和file对象"><a href="#fileList对象和file对象" class="headerlink" title="fileList对象和file对象"></a>fileList对象和file对象</h2><p><strong>html5</strong> 中的 <strong>input[type=’file’]</strong> 的标签有 <strong>multiple</strong> 属性，允许用户选择多个文件，<strong>fileList</strong> 对象则是保存了这些文件的列表，列表每一项都是一个 <strong>file</strong> 对象  </p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul><li><strong>name</strong> ：文件名</li><li><strong>type</strong> ：文件类型。图片类型可通过image/开头关键字限制只允许上传图片</li><li><strong>size</strong> ：文件大小</li><li><strong>lastModified</strong> ：文件最后修改时间</li></ul><p><strong>input:file</strong> 对象中还存在一个 <strong>accept</strong> 属性，可以用来规定能够通过文件上传进行提交的文件类型。<br> <strong>accept=”image/*”</strong> 可以用来限制只允许上传图像格式。但是在 <strong>Webkit</strong> 浏览器下却出现了响应滞慢的问题，要等上好几秒才弹出文件选择框。<br>解决方法就是将 ‘<em>‘ 通配符改为指定的 <em>*MIME</em></em> 类型。</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="多文件FileList"><a href="#多文件FileList" class="headerlink" title="多文件FileList"></a>多文件FileList</h4><p>链接请戳  <strong><a href="http://oh1bdpr59.bkt.clouddn.com/file/file1.html" target="_blank" rel="external">多文件FileList</a></strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"files"</span> <span class="attr">accept</span>=<span class="string">"image/gif,image/jpeg,image/jpg,image/png"</span> <span class="attr">multiple</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    var elem = document.getElementById('files');</span></div><div class="line"><span class="undefined">    elem.onchange = function (event) &#123;</span></div><div class="line"><span class="undefined">        var files = event.target.files;</span></div><div class="line"><span class="undefined">        for (var i = 0; i &lt; files.length; i++) &#123;</span></div><div class="line"><span class="undefined">            // 文件类型为 image 并且文件大小小于 200kb</span></div><div class="line"><span class="undefined">            if(files[i].type.indexOf('image/') &gt; -1 &amp;&amp; files[i].size &lt; 204800)&#123;</span></div><div class="line"><span class="undefined">                console.log(files[i].name + files[i].type);</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p><img src="http://oh1bdpr59.bkt.clouddn.com/file/file1.png" alt="多文件FileList"></p><h4 id="文件预览"><a href="#文件预览" class="headerlink" title="文件预览"></a>文件预览</h4><p>链接请戳 <strong><a href="http://oh1bdpr59.bkt.clouddn.com/file/file2.html" target="_blank" rel="external">文件预览</a></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;input type=&quot;file&quot; id=&quot;files&quot; accept=&quot;image/jpeg,image/jpg,image/png&quot;&gt;</div><div class="line">&lt;img src=&quot;blank.gif&quot; id=&quot;preview&quot;&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    var elem = document.getElementById(&apos;files&apos;),</div><div class="line">        img = document.getElementById(&apos;preview&apos;);</div><div class="line">    elem.onchange = function () &#123;</div><div class="line">        var files = elem.files,</div><div class="line">            reader = new FileReader();</div><div class="line">        if(files &amp;&amp; files[0])&#123;</div><div class="line">            reader.onload = function (ev) &#123;</div><div class="line">                img.src = ev.target.result;</div><div class="line">            &#125;</div><div class="line">            reader.readAsDataURL(files[0]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p><p><img src="http://oh1bdpr59.bkt.clouddn.com/file/file2.png" alt="文件预览"></p><h2 id="Blob对象"><a href="#Blob对象" class="headerlink" title="Blob对象"></a>Blob对象</h2><p>表示一个不可变，原始数据的类似文件对象。区别于 <strong>mysql</strong> 的 <strong>blob</strong> 类型（二进制容器），<strong>html5</strong> 中的 <strong>blob</strong> 对象除了可以存储二进制数据之外，还可设置数据的 <strong>mime</strong> 类型，从某种程度讲，实现了文件的存储。<br>而 <strong>html5</strong> 中的 <strong>file</strong> 对象则是基于 <strong>blob</strong> 对象继承扩展而来。</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Blob(blobparts[,options])</div></pre></td></tr></table></figure><p>所以需要关键字 <strong>new</strong> 来声明，旧式的 <strong>BlobBuilder</strong> 方法已经过时，不在讨论。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">var blob = new Blob(["Hello World!"],&#123;type:"text/plain"&#125;);</span></div><div class="line"><span class="undefined">console.log(blob)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p><h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><ul><li><strong>isClosed：bool</strong> 是否为关闭状态，关闭状态的 <strong>blob</strong> 对象不可读</li><li><strong>size</strong>：数据大小</li><li><strong>type</strong>：字符串，表明对象包含数据的数据类型</li></ul><a id="more"></a><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p><strong>close()</strong><br>关闭 <strong>blob</strong> 对象，释放底层资源</p><p><strong>slice([start[, end[, contentType]]])</strong><br>返回一个新的包含源 <strong>blob</strong> 对象指定数据的 <strong>blob</strong> 对象</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><h4 id="适用类型数组和blob创建一个url"><a href="#适用类型数组和blob创建一个url" class="headerlink" title="适用类型数组和blob创建一个url"></a>适用类型数组和blob创建一个url</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> typeArray = GetTheTypedArraySomehow();</div><div class="line"><span class="comment">//mime</span></div><div class="line"><span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([typeArray], &#123;<span class="attr">type</span>:<span class="string">'application/octet-binary'</span>&#125;);</div><div class="line"><span class="comment">// 会产生一个类似blob:d3958f5c-0777-0845-9dcf-2cb28783acaf 这样的URL字符串</span></div><div class="line"><span class="comment">// 你可以像使用一个普通URL那样使用它，比如用在img.src上。</span></div><div class="line"><span class="keyword">var</span> url = URL.createObjectURL(blob);</div></pre></td></tr></table></figure><p>事实上我并没得到这样的字符串，我觉得我可能被骗了。。</p><h4 id="Blob中提取数据"><a href="#Blob中提取数据" class="headerlink" title="Blob中提取数据"></a>Blob中提取数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">唯一方法是使用FileReader</div><div class="line"><span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</div><div class="line">reader.addEventListener(<span class="string">"loadend"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="comment">// reader.result contains the contents of blob as a typed array</span></div><div class="line">&#125;);</div><div class="line">reader.readAsArrayBuffer(blob);</div></pre></td></tr></table></figure><p>使用 FileReader 以外的方法读取到的内容可能会是字符串或是数据 URL。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([<span class="string">'C:/Users/Administrator/Desktop/DC93J54VYAEKSLs.jpg'</span>], &#123;<span class="attr">type</span>:<span class="string">'image/png'</span>&#125;)</span></div><div class="line"><span class="javascript">    canvas.toBlob(<span class="function"><span class="keyword">function</span>(<span class="params">blob</span>)</span>&#123;</span></div><div class="line"><span class="javascript">        <span class="built_in">console</span>.log(blob)</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p><h4 id="通过url下载文件"><a href="#通过url下载文件" class="headerlink" title="通过url下载文件"></a>通过url下载文件</h4><p>window.URL对象可以为BLob对象生成一个网络地址，结合a标签的download属性可以实现url下载文件。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">createDownload(<span class="string">"download.txt"</span>,<span class="string">"download file"</span>)</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createDownload</span>(<span class="params">fileName, content</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([content]);</div><div class="line">    <span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</div><div class="line">    link.innerHTML = fileName;</div><div class="line">    link.download = fileName;</div><div class="line">    link.href = URL.createObjectURL(blob);</div><div class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>].appendChild(link);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我们知道，img的src属性及background的url属性，都可以通过接收图片的网络地址或base64来显示图片，同样的，我们也可以把图片转化为Blob对象，生成URL（URL.createObjectURL(blob)），来显示图片。</p><p>Ps：就先写到这，剩下几个demo再说，感觉这个东西没这么简单。2017年7月24日22点27分</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;fileList对象和file对象&quot;&gt;&lt;a href=&quot;#fileList对象和file对象&quot; class=&quot;headerlink&quot; title=&quot;fileList对象和file对象&quot;&gt;&lt;/a&gt;fileList对象和file对象&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;html5&lt;/strong&gt; 中的 &lt;strong&gt;input[type=’file’]&lt;/strong&gt; 的标签有 &lt;strong&gt;multiple&lt;/strong&gt; 属性，允许用户选择多个文件，&lt;strong&gt;fileList&lt;/strong&gt; 对象则是保存了这些文件的列表，列表每一项都是一个 &lt;strong&gt;file&lt;/strong&gt; 对象  &lt;/p&gt;
&lt;h3 id=&quot;属性&quot;&gt;&lt;a href=&quot;#属性&quot; class=&quot;headerlink&quot; title=&quot;属性&quot;&gt;&lt;/a&gt;属性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt; ：文件名&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt; ：文件类型。图片类型可通过image/开头关键字限制只允许上传图片&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;size&lt;/strong&gt; ：文件大小&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;lastModified&lt;/strong&gt; ：文件最后修改时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;input:file&lt;/strong&gt; 对象中还存在一个 &lt;strong&gt;accept&lt;/strong&gt; 属性，可以用来规定能够通过文件上传进行提交的文件类型。&lt;br&gt; &lt;strong&gt;accept=”image/*”&lt;/strong&gt; 可以用来限制只允许上传图像格式。但是在 &lt;strong&gt;Webkit&lt;/strong&gt; 浏览器下却出现了响应滞慢的问题，要等上好几秒才弹出文件选择框。&lt;br&gt;解决方法就是将 ‘&lt;em&gt;‘ 通配符改为指定的 &lt;em&gt;*MIME&lt;/em&gt;&lt;/em&gt; 类型。&lt;/p&gt;
&lt;h3 id=&quot;应用&quot;&gt;&lt;a href=&quot;#应用&quot; class=&quot;headerlink&quot; title=&quot;应用&quot;&gt;&lt;/a&gt;应用&lt;/h3&gt;&lt;h4 id=&quot;多文件FileList&quot;&gt;&lt;a href=&quot;#多文件FileList&quot; class=&quot;headerlink&quot; title=&quot;多文件FileList&quot;&gt;&lt;/a&gt;多文件FileList&lt;/h4&gt;&lt;p&gt;链接请戳  &lt;strong&gt;&lt;a href=&quot;http://oh1bdpr59.bkt.clouddn.com/file/file1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;多文件FileList&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;file&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;files&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;accept&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;image/gif,image/jpeg,image/jpg,image/png&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;multiple&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;    var elem = document.getElementById(&#39;files&#39;);&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;    elem.onchange = function (event) &amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;        var files = event.target.files;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;        for (var i = 0; i &amp;lt; files.length; i++) &amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;            // 文件类型为 image 并且文件大小小于 200kb&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;            if(files[i].type.indexOf(&#39;image/&#39;) &amp;gt; -1 &amp;amp;&amp;amp; files[i].size &amp;lt; 204800)&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;                console.log(files[i].name + files[i].type);&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://oh1bdpr59.bkt.clouddn.com/file/file1.png&quot; alt=&quot;多文件FileList&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;文件预览&quot;&gt;&lt;a href=&quot;#文件预览&quot; class=&quot;headerlink&quot; title=&quot;文件预览&quot;&gt;&lt;/a&gt;文件预览&lt;/h4&gt;&lt;p&gt;链接请戳 &lt;strong&gt;&lt;a href=&quot;http://oh1bdpr59.bkt.clouddn.com/file/file2.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文件预览&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;input type=&amp;quot;file&amp;quot; id=&amp;quot;files&amp;quot; accept=&amp;quot;image/jpeg,image/jpg,image/png&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;img src=&amp;quot;blank.gif&amp;quot; id=&amp;quot;preview&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    var elem = document.getElementById(&amp;apos;files&amp;apos;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        img = document.getElementById(&amp;apos;preview&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    elem.onchange = function () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        var files = elem.files,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            reader = new FileReader();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if(files &amp;amp;&amp;amp; files[0])&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            reader.onload = function (ev) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                img.src = ev.target.result;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            reader.readAsDataURL(files[0]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oh1bdpr59.bkt.clouddn.com/file/file2.png&quot; alt=&quot;文件预览&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Blob对象&quot;&gt;&lt;a href=&quot;#Blob对象&quot; class=&quot;headerlink&quot; title=&quot;Blob对象&quot;&gt;&lt;/a&gt;Blob对象&lt;/h2&gt;&lt;p&gt;表示一个不可变，原始数据的类似文件对象。区别于 &lt;strong&gt;mysql&lt;/strong&gt; 的 &lt;strong&gt;blob&lt;/strong&gt; 类型（二进制容器），&lt;strong&gt;html5&lt;/strong&gt; 中的 &lt;strong&gt;blob&lt;/strong&gt; 对象除了可以存储二进制数据之外，还可设置数据的 &lt;strong&gt;mime&lt;/strong&gt; 类型，从某种程度讲，实现了文件的存储。&lt;br&gt;而 &lt;strong&gt;html5&lt;/strong&gt; 中的 &lt;strong&gt;file&lt;/strong&gt; 对象则是基于 &lt;strong&gt;blob&lt;/strong&gt; 对象继承扩展而来。&lt;/p&gt;
&lt;h3 id=&quot;构造函数&quot;&gt;&lt;a href=&quot;#构造函数&quot; class=&quot;headerlink&quot; title=&quot;构造函数&quot;&gt;&lt;/a&gt;构造函数&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Blob(blobparts[,options])&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所以需要关键字 &lt;strong&gt;new&lt;/strong&gt; 来声明，旧式的 &lt;strong&gt;BlobBuilder&lt;/strong&gt; 方法已经过时，不在讨论。&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;var blob = new Blob([&quot;Hello World!&quot;],&amp;#123;type:&quot;text/plain&quot;&amp;#125;);&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;console.log(blob)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;属性-1&quot;&gt;&lt;a href=&quot;#属性-1&quot; class=&quot;headerlink&quot; title=&quot;属性&quot;&gt;&lt;/a&gt;属性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;isClosed：bool&lt;/strong&gt; 是否为关闭状态，关闭状态的 &lt;strong&gt;blob&lt;/strong&gt; 对象不可读&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;size&lt;/strong&gt;：数据大小&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt;：字符串，表明对象包含数据的数据类型&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="html" scheme="https://somnus13.github.io/categories/html/"/>
    
    
      <category term="file" scheme="https://somnus13.github.io/tags/file/"/>
    
  </entry>
  
  <entry>
    <title>img fail那点事</title>
    <link href="https://somnus13.github.io/2017/07/18/img-fail/"/>
    <id>https://somnus13.github.io/2017/07/18/img-fail/</id>
    <published>2017-07-18T13:56:10.000Z</published>
    <updated>2017-09-14T16:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="img-fail"><a href="#img-fail" class="headerlink" title="img fail"></a>img fail</h1><p>前言：据说，一个公司的网速决定着一个程序员的心情与产出，而网速决定着一篇文章裂图的程度。</p><h2 id="告别裂图"><a href="#告别裂图" class="headerlink" title="告别裂图"></a>告别裂图</h2><p><strong>html</strong> 中的 <strong>img</strong> 标签预设了几个关于自身加载的事件：</p><ul><li><strong>onError</strong><br>  图片加载出现错误，多数的处理是将图片路径指向默认图片</li><li><strong>onLoad</strong><br>  图片加载完成之后触发事件</li><li><strong>onAbort</strong><br>  图片加载过程中，用户手动停止加载（浏览器停止按钮）触发事件</li></ul><p>前面也讲过，图片加载缓慢乃至加载失败并不全因为是网速问题，还有可能是图片服务器延迟，或者图片过期请求失效等。<br>然后就会出现所谓的“裂图”,而这时 <strong>img</strong> 标签的 <strong>alt</strong> 属性就会发挥作用，提示用户当前加载失败图像的信息。<br>如图：</p><p><img src="http://oh1bdpr59.bkt.clouddn.com/fail_img/img-fail1.png" alt="fail-img1">  </p><p>然后从运行下面代码可以在控制台看到图片加载几个事件相应的输出。</p><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">loadSuccess</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'image load success!'</span>);</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">loadError</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'image load error!'</span>);</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">loadAbort</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'image abort!'</span>);</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img-container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://1234.com/1.jpg"</span> <span class="attr">onload</span>=<span class="string">"loadSuccess()"</span> <span class="attr">onerror</span>=<span class="string">"loadError()"</span> <span class="attr">onabort</span>=<span class="string">"loadAbort()"</span> <span class="attr">alt</span>=<span class="string">"this is a fail img"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>显然这样的表现形式，在用户看来是非常不优雅的。身为一个程序员，如果所有异常分支没有做相应处理，就相当于一辆急速行驶的汽车，保不齐啥时候刹车会失灵一下下。</p><h2 id="动手吧"><a href="#动手吧" class="headerlink" title="动手吧"></a>动手吧</h2><p>利用加载失败时的标签和伪类 <strong>:before :after</strong> 来做点事<br>我们可以通过 <strong>:before :after</strong> 来定义加载失败的提示信息，例如在图片上方提示加载失败提示，下方提示图片的源地址。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://oi2fsv5ls.bkt.clouddn.com/twitter/Cwc6jkVUcAExIOI.jpg-orgi"</span> <span class="attr">alt</span>=<span class="string">"gakki-twitter"</span> <span class="attr">class</span>=<span class="string">"img_load img_load1"</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.img_load</span>&#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">height</span>: auto;</div><div class="line">    <span class="attribute">font-family</span>: <span class="string">'Helvetica'</span>;</div><div class="line">    <span class="attribute">font-weight</span>: <span class="number">300</span>;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.img_load1</span><span class="selector-pseudo">:before</span>&#123;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</div><div class="line">    <span class="attribute">content</span>: <span class="string">"image load error !"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.img_load1</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</div><div class="line">    <span class="attribute">white-space</span>:nowrap;</div><div class="line">    <span class="attribute">overflow</span>:hidden;</div><div class="line">    <span class="attribute">text-overflow</span>: ellipsis;</div><div class="line">    <span class="attribute">content</span>: <span class="string">"[url: "</span> <span class="built_in">attr</span>(src) <span class="string">"]"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后图片加载失败就会显示成如下：<br><img src="http://oh1bdpr59.bkt.clouddn.com/fail_img/img-fail2.png" alt="fail-img2"></p><h2 id="优化一下-算是"><a href="#优化一下-算是" class="headerlink" title="优化一下(算是)"></a>优化一下(算是)</h2><p>虽然上例已经展示了比较优雅的错误提示，和相应的图片源地址，保证用户能接受且能通过源地址来进行更加合理的访问。<br>但是，裂图依旧在！来让我们弄点东西遮起来吧。<br>本例采用了 <strong>font-awesome</strong> 库来实现小图标展示,所以需要先引进css库<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"//netdna.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://oi2fsv5ls.bkt.clouddn.com/twitter/CwvqJsEUkAAyeiG.jpg-orgi"</span> <span class="attr">alt</span>=<span class="string">"gakki-twitter"</span> <span class="attr">class</span>=<span class="string">"img_load img_load2"</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.img_load2</span><span class="selector-pseudo">:after</span>&#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">z-index</span>: <span class="number">2</span>;</div><div class="line">    <span class="attribute">top</span>: -<span class="number">1px</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</div><div class="line">    <span class="attribute">font-family</span>: FontAwesome;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(100, 100, 100);</div><div class="line">    <span class="attribute">content</span>: <span class="string">"\f1c5"</span> <span class="string">" "</span> <span class="built_in">attr</span>(alt);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>图示如下：<br><img src="http://oh1bdpr59.bkt.clouddn.com/fail_img/img-fail3.png" alt="fail-img3"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>基本网站开发框架都会集成默认图片，而且过大的图片对于网站加载速度不友好，所以这个的应用场景大概也就是寄存图床之类图片过期的博客或者论坛了。</p><p>ps:实例中加载失败的后两张图片只需要在链接后面添加一个字母 <strong>n</strong> 就可以访问了，送一波图，顺便安利一下这是我老婆！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;img-fail&quot;&gt;&lt;a href=&quot;#img-fail&quot; class=&quot;headerlink&quot; title=&quot;img fail&quot;&gt;&lt;/a&gt;img fail&lt;/h1&gt;&lt;p&gt;前言：据说，一个公司的网速决定着一个程序员的心情与产出，而网速决定着一篇文章裂图的程度。&lt;/p&gt;
&lt;h2 id=&quot;告别裂图&quot;&gt;&lt;a href=&quot;#告别裂图&quot; class=&quot;headerlink&quot; title=&quot;告别裂图&quot;&gt;&lt;/a&gt;告别裂图&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;html&lt;/strong&gt; 中的 &lt;strong&gt;img&lt;/strong&gt; 标签预设了几个关于自身加载的事件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;onError&lt;/strong&gt;&lt;br&gt;  图片加载出现错误，多数的处理是将图片路径指向默认图片&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;onLoad&lt;/strong&gt;&lt;br&gt;  图片加载完成之后触发事件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;onAbort&lt;/strong&gt;&lt;br&gt;  图片加载过程中，用户手动停止加载（浏览器停止按钮）触发事件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前面也讲过，图片加载缓慢乃至加载失败并不全因为是网速问题，还有可能是图片服务器延迟，或者图片过期请求失效等。&lt;br&gt;然后就会出现所谓的“裂图”,而这时 &lt;strong&gt;img&lt;/strong&gt; 标签的 &lt;strong&gt;alt&lt;/strong&gt; 属性就会发挥作用，提示用户当前加载失败图像的信息。&lt;br&gt;如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oh1bdpr59.bkt.clouddn.com/fail_img/img-fail1.png&quot; alt=&quot;fail-img1&quot;&gt;  &lt;/p&gt;
&lt;p&gt;然后从运行下面代码可以在控制台看到图片加载几个事件相应的输出。&lt;/p&gt;
    
    </summary>
    
      <category term="html" scheme="https://somnus13.github.io/categories/html/"/>
    
    
      <category term="图片" scheme="https://somnus13.github.io/tags/%E5%9B%BE%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>响应式图片处理</title>
    <link href="https://somnus13.github.io/2017/06/14/Responsive-Images/"/>
    <id>https://somnus13.github.io/2017/06/14/Responsive-Images/</id>
    <published>2017-06-14T11:27:49.000Z</published>
    <updated>2017-09-14T16:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="响应式图片处理"><a href="#响应式图片处理" class="headerlink" title="响应式图片处理"></a>响应式图片处理</h1><blockquote><p>just note</p></blockquote><h2 id="固定宽度图像"><a href="#固定宽度图像" class="headerlink" title="固定宽度图像"></a>固定宽度图像</h2><p>浏览器会根据设备像素比来选择加载图片</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li><strong>srcset</strong><br>  <strong>srcset</strong> 属性会罗列出当前可加载的备选图片，用逗号分隔。<br>  不识别此属性的浏览器会直接加载 <strong>src</strong> 属性声明的图像。</li><li><strong>x</strong><br>  <strong>x</strong> 表示图像的设备像素比。</li></ul><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>网站 <strong>logo</strong> 等宽度固定，大小不随着 <strong>viewport</strong> 的变化而变化</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img-box1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">srcset</span>=<span class="string">"images/gakki-540.jpg 1.5x,images/gakki-720.jpg 2x,images/gakki-1080.jpg 3x"</span></span></div><div class="line"><span class="tag"> <span class="attr">src</span>=<span class="string">"images/gakki-360.jpg"</span> <span class="attr">alt</span>=<span class="string">"Responsive Images"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><a id="more"></a><p>图片固定宽度为 <strong>300</strong>，浏览器通过识别设备像素比来筛选并加载图片。如上像素设备比为 <strong>2</strong>（例如：iphone6）的时候加载 <strong>gakki-720</strong> 的图片，<strong>3</strong>（iphone6 plus等）的时候会加载实际尺寸为 <strong>1080</strong> 的备选图。如果不支持，则默认加载 <strong>gakki-360</strong>。</p><p><a href="http://oh1bdpr59.bkt.clouddn.com/Responsive-Images/Responsive1.html" target="_blank" rel="external">点此</a> 查看示例(建议新版本谷歌浏览)</p><h2 id="可变宽度的图像"><a href="#可变宽度的图像" class="headerlink" title="可变宽度的图像"></a>可变宽度的图像</h2><p>浏览器会根据设备视窗大小( <strong>viewport</strong> )来选择加载图片</p><h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><ul><li><strong>srcset</strong><br>  备选图片列表，逗号分隔  </li><li><strong>sizes</strong><br>  包含两个值且用逗号分隔的图片展示规则列表，非必须。<br>  如果 <strong>srcset</strong> 中使用了 <strong>w</strong> 描述符，则必须设置  <strong>sizes</strong> 属性。<br>  第一个值为媒体查询条件，第二个为图片尺寸值，用 <strong>vw</strong> 来描述，不可使用百分比。<br>  注：<strong>vw</strong> 兼容性不及 <strong>srcset</strong></li></ul><h3 id="场景-1"><a href="#场景-1" class="headerlink" title="场景"></a>场景</h3><p>内容响应式图片处理</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;img-box2 &quot;&gt;</div><div class="line">&lt;img srcset=&quot;images/gakki-360.jpg 360w,</div><div class="line">             images/gakki-540.jpg 540w,</div><div class="line">             images/gakki-720.jpg 720w,</div><div class="line">             images/gakki-1080.jpg 1080w&quot;</div><div class="line">     sizes=&quot;(max-width: 400px) 100vw,</div><div class="line">            (max-width: 960px) 75vw,</div><div class="line">            1080px&quot; src=&quot;images/gakki-1080.jpg&quot; alt=&quot;Responsive Images&quot;&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><p>浏览器会根据 <strong>sizes</strong> 定义的媒体查询条件来选择加载图片。例如网页宽度 <strong>600px</strong> 时，按照查询条件小于 <strong>960px</strong>,所以会按照 <strong>75%</strong> 加载，而 <strong>600*0.75 = 450</strong> ,取最接近即 <strong>gakki-540</strong> 的图片。</p><p><a href="http://oh1bdpr59.bkt.clouddn.com/Responsive-Images/Responsive2.html" target="_blank" rel="external">点此</a> 查看示例(建议新版本谷歌浏览)  </p><h2 id="不同的图像"><a href="#不同的图像" class="headerlink" title="不同的图像"></a>不同的图像</h2><p>前两者都是通过 <strong>srcset</strong> 属性来实现同一图像不同质量的展示，而不支持此属性的浏览器会识别为普通的图像并加载 <strong>src</strong> 属性。</p><p>如果需要在不同的场景显示稍微不同的图片呢？例如大屏下显示全图，而小屏 or 移动端则仅需要展示细节，这样的场景需求则需要借用 <strong>picture</strong> 元素。</p><h3 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h3><ul><li><strong>source</strong><br>  定义媒体查询条件和备选图片地址</li></ul><h3 id="场景-2"><a href="#场景-2" class="headerlink" title="场景"></a>场景</h3><p>不同场景展示不同图片(全局细节之类的)</p><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">media</span>=<span class="string">"(min-width: 960px)"</span> <span class="attr">srcset</span>=<span class="string">"images/gakki-large-1080.jpg"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">media</span>=<span class="string">"(min-width: 575px)"</span> <span class="attr">srcset</span>=<span class="string">"images/gakki-mid-630.jpg"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/gakki-small-360.jpg"</span> <span class="attr">class</span>=<span class="string">"picture-img"</span> <span class="attr">alt</span>=<span class="string">"Responsive Images"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></div></pre></td></tr></table></figure><p><a href="http://oh1bdpr59.bkt.clouddn.com/Responsive-Images/Responsive2.html" target="_blank" rel="external">点此</a> 查看示例(建议新版本谷歌浏览)<br>浏览器窗口的变化可见，图片在小屏下显示裁剪版的细节图。</p><h2 id="不同类型的图像"><a href="#不同类型的图像" class="headerlink" title="不同类型的图像"></a>不同类型的图像</h2><p>针对不同浏览器支持类型，渲染相应的格式的图片。新格式的图像在图片质量以及图片大小方面表现良好，但是目前来讲，兼容性待考验。</p><h3 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h3><ul><li><strong>source</strong><br>  指定每个图像的MIME类型，浏览器会选择第一个含有其支持的MIME类型的源<br>  源的顺序是至关重要的，如果浏览器无法识别所有的图象类型，它会回退至原来的 <strong>img</strong> 元素。</li></ul><h3 id="场景-3"><a href="#场景-3" class="headerlink" title="场景"></a>场景</h3><p>不同格式的图片在文件大小和图片质量表现不一 ，不少新格式表现良好。<br><strong>chrome</strong> 和 <strong>opera</strong> 浏览器支持 <strong>webp</strong> 格式图像，而 <strong>jpeg-xr</strong> 格式则是微软专有格式，仅 <strong>ie</strong> 支持。</p><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">type</span>=<span class="string">"image/vnd.ms-photo"</span> <span class="attr">src</span>=<span class="string">"images/gakki-875.jxr"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">type</span>=<span class="string">"image/jp2"</span> <span class="attr">src</span>=<span class="string">"images/gakki-875.jp2"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">type</span>=<span class="string">"image/webp"</span> <span class="attr">src</span>=<span class="string">"images/gakki-875.webp"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/gakki-875.jpg"</span> <span class="attr">class</span>=<span class="string">"picture-img"</span> <span class="attr">alt</span>=<span class="string">"Responsive Images"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></div></pre></td></tr></table></figure><p><a href="http://oh1bdpr59.bkt.clouddn.com/Responsive-Images/Responsive2.html" target="_blank" rel="external">点此</a> 查看示例(建议新版本谷歌浏览)<br>ps：亲测，并没看到预料的结果，感觉被骗了..</p><p>本文参考自 <a href="https://alistapart.com/article/using-responsive-images-now" target="_blank" rel="external">Using Responsive Images (Now)</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;响应式图片处理&quot;&gt;&lt;a href=&quot;#响应式图片处理&quot; class=&quot;headerlink&quot; title=&quot;响应式图片处理&quot;&gt;&lt;/a&gt;响应式图片处理&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;just note&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;固定宽度图像&quot;&gt;&lt;a href=&quot;#固定宽度图像&quot; class=&quot;headerlink&quot; title=&quot;固定宽度图像&quot;&gt;&lt;/a&gt;固定宽度图像&lt;/h2&gt;&lt;p&gt;浏览器会根据设备像素比来选择加载图片&lt;/p&gt;
&lt;h3 id=&quot;参数&quot;&gt;&lt;a href=&quot;#参数&quot; class=&quot;headerlink&quot; title=&quot;参数&quot;&gt;&lt;/a&gt;参数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;srcset&lt;/strong&gt;&lt;br&gt;  &lt;strong&gt;srcset&lt;/strong&gt; 属性会罗列出当前可加载的备选图片，用逗号分隔。&lt;br&gt;  不识别此属性的浏览器会直接加载 &lt;strong&gt;src&lt;/strong&gt; 属性声明的图像。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;br&gt;  &lt;strong&gt;x&lt;/strong&gt; 表示图像的设备像素比。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h3&gt;&lt;p&gt;网站 &lt;strong&gt;logo&lt;/strong&gt; 等宽度固定，大小不随着 &lt;strong&gt;viewport&lt;/strong&gt; 的变化而变化&lt;/p&gt;
&lt;h3 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;img-box1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;srcset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;images/gakki-540.jpg 1.5x,images/gakki-720.jpg 2x,images/gakki-1080.jpg 3x&quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;		 &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;images/gakki-360.jpg&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;alt&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Responsive Images&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="html" scheme="https://somnus13.github.io/categories/html/"/>
    
    
      <category term="响应式" scheme="https://somnus13.github.io/tags/%E5%93%8D%E5%BA%94%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>IOS webapp 踩屎记（二）</title>
    <link href="https://somnus13.github.io/2017/05/23/ios-webapp-issues2/"/>
    <id>https://somnus13.github.io/2017/05/23/ios-webapp-issues2/</id>
    <published>2017-05-23T13:20:56.000Z</published>
    <updated>2017-09-14T16:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ios底部输入框遮挡"><a href="#ios底部输入框遮挡" class="headerlink" title="ios底部输入框遮挡"></a>ios底部输入框遮挡</h1><blockquote><p>接上节，因为fixed元素的变现不友好，底部固定元素多采用了absolute定位。但底部固定元素内包含输入控件时，聚焦会发生输入框被键盘遮挡。</p></blockquote><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>场景<br>  为了实现类 <strong>IM</strong> 即时通讯页面，输入框聚焦并紧贴键盘顶部浮起。</li><li><p>表现<br>  某些浏览器会发生输入框遮挡被键盘遮挡。<br>  qq内置以及微信内置浏览器估计对此作了些处理，基本没发现这种情况。<br>  而别的浏览器，或多或少会复现这个问题（第一次触发）</p><a id="more"></a><p>  <strong>理论上的表现为</strong>：<br>  <img src="http://oh1bdpr59.bkt.clouddn.com/2017-5-23/normal.png" alt="normal"></p><p>  <strong>实际表现为</strong>：<br>  <img src="http://oh1bdpr59.bkt.clouddn.com/2017-5-23/error.png" alt="error"></p></li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>输入框聚焦后，<strong>ios</strong> 和安卓对此作了不同的处理。<br>安卓会对页面进行压缩，页面的 <strong>innerHeight</strong> 会发生变化，而ios会直接把页面向上推键盘的高度，页面的 <strong>innerHeight</strong> 并没发生变化（除了 <strong>UC</strong> 浏览器，真心不知道为什么这么另类）。<br>查阅一些资料，发现了 <strong>Element</strong> 对象两个兼容性有待考量的方法 <strong>scrollIntoView()</strong> 和 <strong>scrollIntoViewIfNeeded()</strong>。</p><ul><li><p><strong>scrollIntoView()</strong> 让当前的元素滚动到浏览器窗口的可视区域内</p><ul><li><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">element.scrollIntoView(); // 等同于element.scrollIntoView(true)</div><div class="line">element.scrollIntoView(alignToTop); // Boolean型参数</div><div class="line">element.scrollIntoView(scrollIntoViewOptions); // Object型参数</div></pre></td></tr></table></figure></li><li><p>参数</p><ul><li><strong>alignToTop</strong> 一个 <strong>Boolean</strong> 值：<br>  如果为 <strong>true</strong>，元素的顶端将和其所在滚动区的可视区域的顶端对齐。<br>  如果为 <strong>false</strong>，元素的底端将和其所在滚动区的可视区域的底端对齐。</li><li><p><strong>scrollIntoViewOptions</strong>   一个 <strong>boolean</strong> 或一个带有选项的 <strong>object</strong>：  </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    behavior: &quot;auto&quot;  | &quot;instant&quot; | &quot;smooth&quot;,</div><div class="line">    block:    &quot;start&quot; | &quot;end&quot;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>  如果是一个 <strong>boolean</strong>, <strong>true</strong> 相当于 <strong>{block: “start”}</strong>，<strong>false</strong> 相当于 <strong>{block: “end”}</strong></p></li></ul></li><li>兼容<br>  详情点击 <a href="http://docs.w3cub.com/browser_support_tables/scrollintoview/" target="_blank" rel="external">here.</a></li></ul></li><li><p><strong>scrollIntoViewIfNeeded()</strong> 让当前的元素滚动到浏览器窗口的可视区域内</p><ul><li><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scrollIntoViewIfNeeded(); // 等同于element.scrollIntoView(true)</div><div class="line">element.scrollIntoView(alignToTop); // Boolean型参数</div></pre></td></tr></table></figure></li><li><p>参数</p></li><li><strong>alignToTop</strong> 一个 <strong>Boolean</strong> 值：<br>  如果为 <strong>true</strong>，元素的顶端将和其所在滚动区的可视区域的顶端对齐。<br>  如果为 <strong>false</strong>，元素的底端将和其所在滚动区的可视区域的底端对齐。</li><li>兼容<br>  详情点击 <a href="http://docs.w3cub.com/browser_support_tables/scrollintoviewifneeded/" target="_blank" rel="external">here.</a></li></ul></li></ul><p>然后，开始动刀，测试。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>输入框聚焦，添加键盘呼起延迟，并对呼出键盘后的页面做输入框位置调整。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">var container = document.getElementById(&quot;wrapper&quot;); //最外部滚动容器</div><div class="line">var ele = document.getElementById(&quot;input_test&quot;);</div><div class="line">var eleDIv = document.getElementById(&quot;footer&quot;);</div><div class="line"></div><div class="line">var u = navigator.userAgent;</div><div class="line">var isiOS = !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/); //ios终端</div><div class="line">var isUc = u.indexOf(&quot;UCBro&quot;) &gt; -1;</div><div class="line"></div><div class="line">if(isiOS &amp;&amp; ele &amp;&amp; eleDIv)&#123;</div><div class="line">    ele.onfocus = function()&#123;</div><div class="line">setTimeout(function()&#123;</div><div class="line">            scrollDiv();</div><div class="line">        &#125;,isUc ? 350 : 200);</div><div class="line">    &#125;  </div><div class="line">&#125;</div><div class="line"></div><div class="line">function scrollDiv()&#123;</div><div class="line">    var isChrome = u.indexOf(&quot;CriOS&quot;) &gt; -1;</div><div class="line">    if(isChrome)&#123;</div><div class="line">        document.body.scrollTop = container.clientHeight; //chrome 特殊处理</div><div class="line">    &#125;else if(Element.prototype.scrollIntoViewIfNeeded)&#123;</div><div class="line">    eleDIv.scrollIntoViewIfNeeded(false);</div><div class="line">    container.scrollTop = 1000; //切换输入法，首次等特殊情况补救</div><div class="line">    &#125;else if(Element.prototype.scrollIntoView)&#123;</div><div class="line">        eleDIv.scrollIntoView(false);  </div><div class="line">    &#125;else&#123;</div><div class="line">        document.body.scrollTop = container.clientHeight; //防止漏网之鱼</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="吐槽："><a href="#吐槽：" class="headerlink" title="吐槽："></a>吐槽：</h2><ol><li><strong>UC</strong> 两个方法都生效，不过呼出处理时间需要更久一点</li><li><strong>chrome</strong> 也成功沦落到一个另类的表现，虽然自己公司 <strong>webapp</strong> 和谷歌表现一致</li><li><strong>ios</strong> 原生 <strong>safari</strong> 浏览器的 <strong>UA</strong> 简直没法区分</li></ol><p>Ps：这个方法可能不是最完美的解决方案，仅供参考，毕竟只是做个笔记。完整代码<a href="http://oh1bdpr59.bkt.clouddn.com/2017-5-23/demo.html" target="_blank" rel="external">请点击</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ios底部输入框遮挡&quot;&gt;&lt;a href=&quot;#ios底部输入框遮挡&quot; class=&quot;headerlink&quot; title=&quot;ios底部输入框遮挡&quot;&gt;&lt;/a&gt;ios底部输入框遮挡&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;接上节，因为fixed元素的变现不友好，底部固定元素多采用了absolute定位。但底部固定元素内包含输入控件时，聚焦会发生输入框被键盘遮挡。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;场景&lt;br&gt;  为了实现类 &lt;strong&gt;IM&lt;/strong&gt; 即时通讯页面，输入框聚焦并紧贴键盘顶部浮起。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;表现&lt;br&gt;  某些浏览器会发生输入框遮挡被键盘遮挡。&lt;br&gt;  qq内置以及微信内置浏览器估计对此作了些处理，基本没发现这种情况。&lt;br&gt;  而别的浏览器，或多或少会复现这个问题（第一次触发）&lt;/p&gt;
    
    </summary>
    
      <category term="移动端" scheme="https://somnus13.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="ios" scheme="https://somnus13.github.io/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>IOS webapp 踩屎记（一）</title>
    <link href="https://somnus13.github.io/2017/05/22/ios-webapp-issues1/"/>
    <id>https://somnus13.github.io/2017/05/22/ios-webapp-issues1/</id>
    <published>2017-05-22T11:34:49.000Z</published>
    <updated>2017-09-14T16:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>底部 fixed 元素与输入控件的碰撞..</p></blockquote><h2 id="移动端fixed元素"><a href="#移动端fixed元素" class="headerlink" title="移动端fixed元素"></a>移动端fixed元素</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>过长的移动端网页需要底部固定一个按钮来方便引导用户操作</p><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>fixed 属性在 IOS 5版本开始支持，但是不如安卓表现良好。<br>页面中同时存在输入控件（<strong>input、textarea</strong>）和 <strong>fixed</strong> 元素时，输入控件获取焦点呼出键盘，<strong>fixed</strong> 元素会错位。</p><ul><li>安卓表现良好，输入控件聚焦，滚动页面fixed元素固定输入法顶部</li><li><strong>IOS</strong>（仅以 <strong>safari</strong>、谷歌、<strong>UC</strong> 浏览器、微信 <strong>webview</strong> 作参考）<ul><li><strong>safari</strong>、谷歌、微信，聚焦时 <strong>fixed</strong> 元素 <strong>fixed</strong> 属性失效，归于文档流底部</li><li><strong>UC</strong> 浏览器聚焦，滚动页面 <strong>fixed</strong> 元素异位</li></ul></li></ul><a id="more"></a><ol><li><p>输入框为失焦状态  </p><p> <img src="http://oh1bdpr59.bkt.clouddn.com/2017-5-22%20/fixed-e1.png" alt="error1"></p></li><li><p>输入框聚焦  </p><p> <img src="http://oh1bdpr59.bkt.clouddn.com/2017-5-22%20/fixed-e2.png" alt="error2"></p></li><li><p>滚动页面  </p><p> <img src="http://oh1bdpr59.bkt.clouddn.com/2017-5-22%20/fixed-e3.png" alt="error3"></p></li></ol><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>输入控件聚焦，设置 <strong>fixed</strong> 元素 <strong>position</strong> 为 <strong>relative</strong>，回归文档流置于页面内容底部。<br>失去焦点，<strong>reset</strong> 为 <strong>fixed</strong> 元素。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;h2&gt;IOS fixed&lt;<span class="regexp">/h2&gt;</span></div><div class="line"><span class="regexp">    &lt;p&gt;这是一个占位的段落.&lt;/</span>p&gt;</div><div class="line">    &lt;p&gt;这是一个占位的段落.&lt;<span class="regexp">/p&gt;</span></div><div class="line"><span class="regexp">    &lt;p&gt;这是一个占位的段落.&lt;/</span>p&gt;</div><div class="line">    &lt;p&gt;这是一个占位的段落.&lt;<span class="regexp">/p&gt;</span></div><div class="line"><span class="regexp">    &lt;p&gt;这是一个占位的段落.&lt;/</span>p&gt;</div><div class="line">    &lt;p&gt;这是一个占位的段落.&lt;<span class="regexp">/p&gt;</span></div><div class="line"><span class="regexp">    &lt;p&gt;这是一个占位的段落.&lt;/</span>p&gt;</div><div class="line">    &lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"mt mb"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"input_test"</span> <span class="attr">placeholder</span>=<span class="string">"input here"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line">    &lt;p&gt;这是一个占位的段落.&lt;<span class="regexp">/p&gt;</span></div><div class="line"><span class="regexp">    &lt;p&gt;这是一个占位的段落.&lt;/</span>p&gt;</div><div class="line">    &lt;p&gt;这是一个占位的段落.&lt;<span class="regexp">/p&gt;</span></div><div class="line"><span class="regexp">    &lt;p&gt;这是一个占位的段落.&lt;/</span>p&gt;</div><div class="line">    &lt;p&gt;这是一个占位的段落.&lt;<span class="regexp">/p&gt;</span></div><div class="line"><span class="regexp">    &lt;p&gt;这是一个占位的段落.&lt;/</span>p&gt;</div><div class="line">    &lt;p&gt;这是一个占位的段落.&lt;<span class="regexp">/p&gt;</span></div><div class="line"><span class="regexp">    &lt;p&gt;这是一个占位的段落.&lt;/</span>p&gt;</div><div class="line">    &lt;div id=<span class="string">"footer"</span>&gt;fixed div&lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>body&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    <span class="keyword">var</span> o_input = <span class="built_in">document</span>.getElementById(<span class="string">'input_test'</span>),</div><div class="line">        o_footer = <span class="built_in">document</span>.getElementById(<span class="string">'footer'</span>);</div><div class="line"></div><div class="line">    o_input.onfocus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        o_footer.style.position = <span class="string">'relative'</span>;</div><div class="line">    &#125;</div><div class="line">    o_input.onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        o_footer.style.position = <span class="string">'fixed'</span>;</div><div class="line">    &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><br>解决后表现:</p><ol><li><p>输入框为聚焦状态  </p><p> <img src="http://oh1bdpr59.bkt.clouddn.com/2017-5-22%20/fixed-s1.png" alt="relative1"></p></li><li><p>输入框聚焦  </p><p> <img src="http://oh1bdpr59.bkt.clouddn.com/2017-5-22%20/fixed-s2.png" alt="fixed2"></p></li></ol><p>至此，下一篇搞定底部输入框遮挡问题，<a href="http://www.google.com" target="_blank" rel="external">轻点</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;底部 fixed 元素与输入控件的碰撞..&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;移动端fixed元素&quot;&gt;&lt;a href=&quot;#移动端fixed元素&quot; class=&quot;headerlink&quot; title=&quot;移动端fixed元素&quot;&gt;&lt;/a&gt;移动端fixed元素&lt;/h2&gt;&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;过长的移动端网页需要底部固定一个按钮来方便引导用户操作&lt;/p&gt;
&lt;h3 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h3&gt;&lt;p&gt;fixed 属性在 IOS 5版本开始支持，但是不如安卓表现良好。&lt;br&gt;页面中同时存在输入控件（&lt;strong&gt;input、textarea&lt;/strong&gt;）和 &lt;strong&gt;fixed&lt;/strong&gt; 元素时，输入控件获取焦点呼出键盘，&lt;strong&gt;fixed&lt;/strong&gt; 元素会错位。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安卓表现良好，输入控件聚焦，滚动页面fixed元素固定输入法顶部&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IOS&lt;/strong&gt;（仅以 &lt;strong&gt;safari&lt;/strong&gt;、谷歌、&lt;strong&gt;UC&lt;/strong&gt; 浏览器、微信 &lt;strong&gt;webview&lt;/strong&gt; 作参考）&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;safari&lt;/strong&gt;、谷歌、微信，聚焦时 &lt;strong&gt;fixed&lt;/strong&gt; 元素 &lt;strong&gt;fixed&lt;/strong&gt; 属性失效，归于文档流底部&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UC&lt;/strong&gt; 浏览器聚焦，滚动页面 &lt;strong&gt;fixed&lt;/strong&gt; 元素异位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="webapp" scheme="https://somnus13.github.io/categories/webapp/"/>
    
    
      <category term="ios" scheme="https://somnus13.github.io/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式笔记二</title>
    <link href="https://somnus13.github.io/2017/05/15/RegExp-note2/"/>
    <id>https://somnus13.github.io/2017/05/15/RegExp-note2/</id>
    <published>2017-05-15T14:07:04.000Z</published>
    <updated>2017-09-14T16:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>抽风的电脑，字怎么变成繁体了。主要为正则对象函数的应用。</p></blockquote><h2 id="正则对象创建"><a href="#正则对象创建" class="headerlink" title="正则对象创建"></a>正则对象创建</h2><h3 id="创建RegExp对象实例"><a href="#创建RegExp对象实例" class="headerlink" title="创建RegExp对象实例"></a>创建RegExp对象实例</h3><ol><li>显式构造: <strong>new RegExp(“pattern”[, “flags”])</strong> 或 <strong>new RegExp(/pattern/[, “flags”])</strong></li><li>隐式构造: <strong>/pattern/[flags]</strong></li></ol><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li><strong>pattern</strong> 正则表达式</li><li><strong>flags</strong><br>  标志匹配规则。例如 “g” 全局匹配，”i” 不区分大小写，”m” 多行匹配等，常用的为 “g” 和 “i”。</li></ul><a id="more"></a><h2 id="正则函数应用"><a href="#正则函数应用" class="headerlink" title="正则函数应用"></a>正则函数应用</h2><h3 id="RegExp对象"><a href="#RegExp对象" class="headerlink" title="RegExp对象"></a>RegExp对象</h3><h4 id="test"><a href="#test" class="headerlink" title="test()"></a><em>test()</em></h4><ul><li>描述<br>  检索字符串的指定值</li><li><p>语法</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exp.test(str)</div></pre></td></tr></table></figure></li><li><p>参数</p><ul><li><strong>exp</strong> 正则对象</li><li><strong>str</strong> 要检索的字符串</li></ul></li><li><p>返回值<br>  返回值为布尔类型，成功匹配则为 <strong>true</strong> ，反之 <strong>false</strong> 。</p></li><li>示例  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//检索字符串内是否存在&quot;abc&quot;</div><div class="line">var exp = /abc/;</div><div class="line">&apos;abcda&apos;.test(exp); //true</div></pre></td></tr></table></figure></li></ul><h4 id="exec"><a href="#exec" class="headerlink" title="exec()"></a><em>exec()</em></h4><ul><li>描述<br>  检索字符串的指定值</li><li><p>语法</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exp.exec(str)</div></pre></td></tr></table></figure></li><li><p>参数</p><ul><li><strong>exp</strong> 正则对象</li><li><strong>str</strong> 要检索的字符串</li></ul></li><li>返回值<br>  返回值为匹配到的值。若无匹配，返回 <strong>null</strong> 。<br>  注：如果指定标志 <strong>g</strong>，可多次执行 <strong>exec()</strong> 查找成功匹配，查找位置从上一次查找的 <strong>lasetIndex</strong> 开始。</li><li>示例  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//多次执行exec()</span></div><div class="line"><span class="keyword">var</span> patt1=<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"o"</span>,<span class="string">"g"</span>);</div><div class="line"><span class="keyword">do</span></div><div class="line">&#123;</div><div class="line">result=patt1.exec(<span class="string">"Hello world!"</span>);</div><div class="line"><span class="built_in">console</span>.log(result);</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span> (result!=<span class="literal">null</span>)</div><div class="line"></div><div class="line"><span class="comment">// ["o", index: 4, input: "Hello world!"]</span></div><div class="line"><span class="comment">// ["o", index: 7, input: "Hello world!"]</span></div><div class="line"><span class="comment">// null</span></div></pre></td></tr></table></figure></li></ul><h4 id="compile"><a href="#compile" class="headerlink" title="compile()"></a><em>compile()</em></h4><p>将来的版本会被移除 <strong>web</strong> 标准，不再赘述。</p><h3 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h3><h4 id="match"><a href="#match" class="headerlink" title="match()"></a><em>match()</em></h4><ul><li>描述<br>  当一个字符串与一个正则表达式匹配时，<strong>match()</strong> 方法检索匹配项。</li><li><p>语法</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">str.match(exp)</div></pre></td></tr></table></figure></li><li><p>参数</p><ul><li><strong>exp</strong> 正则对象<br>  如果 <strong>exp</strong> 传入的值为非正则对象，则会隐示调用 <strong>new RegExp(exp)</strong> 方法转换成正则对象。<br>  如果 <strong>exp</strong> 传入的值为空，则返回结果为 <strong>[‘’]</strong>。</li><li><strong>str</strong> 要检索的字符串</li></ul></li><li><p>返回值<br>  <strong>array</strong>。 包括匹配结果以及子表达式捕获结果的数组。如果未匹配，返回 <strong>null</strong>。  </p><p>  如果正则对象未指定 <strong>“g”</strong> ,返回结果同 <strong>RegExp.exec()</strong> ，且返回结果中拥有两个属性：<br>  <strong>index</strong>: 搜索结果索引值，<strong>input</strong>: 匹配的原始字符串。</p><p>  如果指定了 <strong>“g”</strong> ,返回结果为所有匹配结果字符串的数组对象，而不是RegExp对象，且捕获结果不可获得。</p></li><li><p>示例</p><p>  <img src="http://oh1bdpr59.bkt.clouddn.com/2017-5-15%20/match.png" alt="match"></p></li></ul><h4 id="search"><a href="#search" class="headerlink" title="search()"></a><em>search()</em></h4><ul><li>描述<br>  <strong>search()</strong> 方法执行正则表达式和 <strong>String</strong> 对象之间的一个搜索匹配。</li><li><p>语法</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">str.search(exp)</div></pre></td></tr></table></figure></li><li><p>参数</p><ul><li><strong>exp</strong> 正则对象</li><li><strong>str</strong> 要检索的字符串</li></ul></li><li><p>返回值<br>  匹配成功返回首次匹配结果的索引，否则返回 -1 .</p></li><li>示例  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'Today is Sun.!'</span>;</div><div class="line"><span class="keyword">var</span> result = str.search(<span class="regexp">/(sun\.)/i</span>); <span class="comment">//返回匹配结果的索引值</span></div><div class="line"></div><div class="line">result <span class="comment">// 9</span></div></pre></td></tr></table></figure></li></ul><h4 id="split"><a href="#split" class="headerlink" title="split()"></a><em>split()</em></h4><ul><li>描述<br>  字符串对象分割成字符串数组，字符串分割成子串。</li><li><p>语法</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">str.split(separator[, limit])</div></pre></td></tr></table></figure></li><li><p>参数</p><ul><li><strong>separator</strong> 字符串或正则对象，指定字符串分割的位置</li><li><strong>limit</strong> 指定返回数组的最大长度。如果设定了 <strong>limit</strong> 值，返回数组的最大长度不超过 <strong>limit</strong>，否则不计长度，全部返回。</li></ul></li><li><p>返回值<br>  一个字符串数组，但不包括 <strong>separator</strong> 本身。<br>  如果 <strong>separator</strong> 为包含子表达式的正则对象，那么返回数组中包括子表达式匹配的字符串，但不包含与整个正则表达式匹配的字符串。</p></li><li>注：<br>  函数功能同Array.join()相反。<br>  如果 <strong>separator</strong> 指定为 “”,则每个字符都会被分割。</li><li><p>示例  </p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"hello world! let's rock it."</span>;</div><div class="line">str.split(<span class="regexp">/(!|\.)\s/</span>) <span class="comment">//分割两句话，且包括子表达式匹配结果</span></div><div class="line"></div><div class="line"><span class="comment">//["hello world", "!", "let's rock it."]</span></div></pre></td></tr></table></figure><p>  <img src="http://oh1bdpr59.bkt.clouddn.com/2017-5-16%20/split.png" alt="正则对象带子表达式返回"></p></li></ul><h4 id="replace"><a href="#replace" class="headerlink" title="replace()"></a><em>replace()</em></h4><ul><li>描述<br>  字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串</li><li><p>语法</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">str.replace(exp|substr, replacement)</div></pre></td></tr></table></figure></li><li><p>参数</p><ul><li><strong>exp|substr</strong><br>  子字符串或要替换的正则对象。如果为字符串，则优先按照字符串匹配。</li><li><strong>replacement</strong><br>  字符串值。指定替换文本或者生成替换文本的函数</li></ul></li><li>返回值<br>  一个新的匹配替换完成的字符串。</li><li><p>注：<br>  <strong>replace()</strong> 实现的是查找并替换。如果正则对象指定了 <strong>g</strong>（全局标志），则会依次查找替换所有匹配项，否则只会查找替换第一个匹配项。<br>  此外 <strong>replacement</strong> 参数中还有一个特殊的 $ 的特定用法(见文章结尾)。</p></li><li><p>示例</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//颠倒字符串</span></div><div class="line"><span class="keyword">var</span> myName = <span class="string">'yao, somnus'</span>;</div><div class="line">myName.replace(<span class="regexp">/(\w+)\s*, \s*(\w+)/</span>, <span class="string">"$2 $1"</span>) <span class="comment">//$1 $2 匹配两个捕获的子表达式</span></div><div class="line"></div><div class="line"><span class="comment">// 'somnus, yao'</span></div><div class="line"></div><div class="line"><span class="comment">//引号的替换</span></div><div class="line"><span class="keyword">var</span> testStr = <span class="string">'"Tom" and "jerry"'</span>;</div><div class="line">testStr.replace(<span class="regexp">/"([^"]*)"/g</span>, <span class="string">"'$1'"</span>) <span class="comment">//依次匹配并替换</span></div><div class="line"></div><div class="line"><span class="comment">//'Tom' and 'jerry'</span></div><div class="line"></div><div class="line"><span class="comment">//首字母大写转换</span></div><div class="line"><span class="keyword">var</span> myName = <span class="string">'yao, somnus'</span>;</div><div class="line">myName.replace(<span class="regexp">/\b(\w+)\b/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> name.substring(<span class="number">0</span>,<span class="number">1</span>).toUpperCase()+name.substring(<span class="number">1</span>); <span class="comment">//通过生成替换文本函数完成文本替换</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//Yao, Somnus</span></div></pre></td></tr></table></figure><p>  <img src="http://oh1bdpr59.bkt.clouddn.com/2017-5-16%20/replace.png" alt="replace"></p></li></ul><p>附：replace() 中 $ 的使用</p><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>$1、$2、…、$99</td><td>与 regexp 中的第 1 到第 99 个子表达式相匹配的文本。</td></tr><tr><td>$&amp;</td><td>与 regexp 相匹配的子串。</td></tr><tr><td>$`</td><td>位于匹配子串左侧的文本。</td></tr><tr><td>$’</td><td>位于匹配子串右侧的文本。</td></tr><tr><td>$$</td><td>直接量符号。</td></tr></tbody></table><p>正则表达式暂时就这么多了，笔记做完，心累，慢慢去撸demo了..</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;抽风的电脑，字怎么变成繁体了。主要为正则对象函数的应用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;正则对象创建&quot;&gt;&lt;a href=&quot;#正则对象创建&quot; class=&quot;headerlink&quot; title=&quot;正则对象创建&quot;&gt;&lt;/a&gt;正则对象创建&lt;/h2&gt;&lt;h3 id=&quot;创建RegExp对象实例&quot;&gt;&lt;a href=&quot;#创建RegExp对象实例&quot; class=&quot;headerlink&quot; title=&quot;创建RegExp对象实例&quot;&gt;&lt;/a&gt;创建RegExp对象实例&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;显式构造: &lt;strong&gt;new RegExp(“pattern”[, “flags”])&lt;/strong&gt; 或 &lt;strong&gt;new RegExp(/pattern/[, “flags”])&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;隐式构造: &lt;strong&gt;/pattern/[flags]&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;参数&quot;&gt;&lt;a href=&quot;#参数&quot; class=&quot;headerlink&quot; title=&quot;参数&quot;&gt;&lt;/a&gt;参数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pattern&lt;/strong&gt; 正则表达式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;flags&lt;/strong&gt;&lt;br&gt;  标志匹配规则。例如 “g” 全局匹配，”i” 不区分大小写，”m” 多行匹配等，常用的为 “g” 和 “i”。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://somnus13.github.io/categories/javascript/"/>
    
    
      <category term="正则表达式" scheme="https://somnus13.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式笔记一</title>
    <link href="https://somnus13.github.io/2017/05/15/RegExp-note1/"/>
    <id>https://somnus13.github.io/2017/05/15/RegExp-note1/</id>
    <published>2017-05-15T13:57:21.000Z</published>
    <updated>2017-09-14T16:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>心血來潮，又挖出正則表達式，順便整理下筆記。</p></blockquote><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>常用的元字符：</p><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>\b</td><td>匹配字边界</td></tr><tr><td>\B</td><td>匹配非字边界</td></tr><tr><td>\d</td><td>匹配数字字符</td></tr><tr><td>\D</td><td>匹配非数字字符</td></tr><tr><td>\w</td><td>匹配A-Z，a-z，0-9和下划线</td></tr><tr><td>\W</td><td>匹配除以上任意</td></tr></tbody></table><a id="more"></a><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p>特殊字符的匹配需要进行转义，字符前添加 <strong>“\”</strong></p><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td><center>*</center></td><td><strong>零次或多次匹配</strong>前面的字符或表达式</td></tr><tr><td><center>+</center></td><td><strong>一次或多次</strong>匹配前面的字符或表达式</td></tr><tr><td><center>?</center></td><td><strong>零次或一次</strong>匹配。若紧随其他限定符则匹配非贪婪模式</td></tr><tr><td><center>^</center></td><td>匹配字符串开始的位置。若用作括号表达式第一个字符贼会对字符集取反</td></tr><tr><td><center>$</center></td><td>匹配搜索字符串结尾的位置</td></tr><tr><td><center>.</center></td><td>匹配除换行符 <strong>\n</strong> 之外的任意单个字符</td></tr><tr><td><center>[ ]</center></td><td>标记括号表达式的开始和结尾</td></tr><tr><td><center>{ }</center></td><td>限定表达式的开始和结尾</td></tr><tr><td><center>( )</center></td><td>子表达式的开始和结尾。可保存子表达式以备将来使用</td></tr><tr><td><center>&#124;</center></td><td>候选项表达式匹配</td></tr><tr><td><center>/</center></td><td><strong>JScript</strong> 中的文本正则表达式模式的开始和结尾，后一个 <strong>‘/‘</strong> 后添加单字符标志可指定搜索行为。g(全局) i(忽略大小写)</td></tr><tr><td><center>\</center></td><td>将下一字符标记为特殊字符文本。反向引用或八进制转义字符</td></tr></tbody></table><h2 id="非打印字符"><a href="#非打印字符" class="headerlink" title="非打印字符"></a>非打印字符</h2><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>\f</td><td>换页符</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\r</td><td>回车符</td></tr><tr><td>\v</td><td>垂直制表符</td></tr><tr><td>\t</td><td><strong>Tab</strong> 符</td></tr><tr><td>\s</td><td>任意空白字符</td></tr><tr><td>\S</td><td>任意非空白字符</td></tr></tbody></table><h2 id="贪婪与懒惰模式"><a href="#贪婪与懒惰模式" class="headerlink" title="贪婪与懒惰模式"></a>贪婪与懒惰模式</h2><p>正则中包含能接受的重复的限定符时，通常行为是尽可能匹配更多的字符。</p><p>例如: <strong>a.*b</strong> 限定符在贪婪模式下会尽可能匹配更多的字符。<br><strong>a.*b</strong> 会匹配字符串 <strong>acbab</strong> 的 <strong>acbab</strong> 而不会匹配 <strong>acb</strong>。</p><p>有时我们需要匹配尽可能少的字符，这时我们需要在限定符后添加 <strong>?</strong> 。<br>例如：<strong>a.*?b</strong> 会匹配到 <strong>acbab</strong> 的 <strong>acb</strong> 和 <strong>ab</strong> 。</p><p>懒惰限定符:</p><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>*?</td><td>重复任意次，但尽可能少重复</td></tr><tr><td>+?</td><td>重复1次或更多次，但尽可能少重复</td></tr><tr><td>??</td><td>重复0次或1次，但尽可能少重复</td></tr><tr><td>{n,m}?</td><td>重复n到m次，但尽可能少重复</td></tr><tr><td>{n,}?</td><td>重复n次以上，但尽可能少重复</td></tr></tbody></table><h2 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h2><p>子表达式匹配的文本即此分组捕获的内容能在表达式以及程序中作进一步的处理。</p><p>子表达式用括号限定符来声明。 <strong>(a.b)c</strong> 中 <strong>(a.b)</strong> 则声明了一个子表达式，子表达式的内容可以捕获。而子表达式匹配的内容则可视作一个分组。</p><p>默认情况下，每个分组都拥有一个组号，从左到右，以子表达式的左括号为标志，第一组为1，依次递增。</p><p>反向引用用于重复搜索前面某个分组匹配的文本，语法为: <strong>+组号或组名</strong>  <strong>“\1”</strong> 。</p><p>例如：搜索不正确的变量声明 <strong>var var a = ‘hello’;</strong></p><p> <strong>\b(\w+)\b\s+\1\b</strong> 为例，<strong>(\w+)</strong> 分组匹配内容, <strong>\1</strong> 分组捕获内容。</p><p>或者可以自己指定组名 语法: <strong>(?&lt;name&gt;\w+)</strong> 或 <strong>(?’name’\w+)</strong> <strong>name</strong> 即为组名称。</p><p>反向引用这个组捕获内容，语法: <strong> \k&lt;name&gt; </strong></p><p>所以上面的例子也可以写作: <strong>\b(?<name>\w+)\b\s+\k<name>\b</name></name></strong></p><p>其次还有几种特殊用法:</p><table><thead><tr><th>分类</th><th>代码/语法</th><th>说明</th></tr></thead><tbody><tr><td>内容捕获</td><td><center> (exp) </center></td><td>匹配exp并捕获到自动命名的组中</td></tr><tr><td>内容捕获</td><td><center> (?<name>exp) </name></center></td><td>匹配exp并捕获到name命名的组中</td></tr><tr><td>内容捕获</td><td><center> (?:exp) </center></td><td>匹配exp不捕获也不分配组</td></tr><tr><td>零宽断言</td><td><center> (?=exp) </center></td><td>匹配exp前面位置</td></tr><tr><td>零宽断言</td><td><center> (?&lt;=exp) </center></td><td>匹配exp后面位置</td></tr><tr><td>零宽断言</td><td><center> (?!exp) </center></td><td>匹配后面不是exp的位置</td></tr><tr><td>零宽断言</td><td><center> (?&lt;!exp) </center></td><td>匹配钱面不是exp的位置</td></tr><tr><td>注释</td><td><center> (?#comment) </center></td><td>提供注释，方便阅读</td></tr></tbody></table><h2 id="零宽断言"><a href="#零宽断言" class="headerlink" title="零宽断言"></a>零宽断言</h2><p>用于查找某些内容（但不包括自身）之前或者之后的东西，也就是说他们指定一个位置，而这个位置满足一定的条件（即断言），故称为零宽断言。</p><ul><li><p><strong>(?=exp)</strong> 零宽度正预测先行断言</p><p>  断言自身出现的位置的后面能匹配表达式exp</p><p>  例如： <strong>\b\w+(?=img\b)</strong> 匹配以img结尾的单词的前面部分(不包括 <strong>img</strong> )</p></li><li><p><strong>(?&lt;=exp)</strong> 零宽度正回顾后发断言</p><p>  断言自身出现的位置的前面能匹配表达式exp</p><p>  <strong>(?&lt;=\bexp)\w+\b</strong> 匹配 <strong>exp</strong> 开头的单词的后半部分(不包括 <strong>exp</strong> )</p></li><li><p><strong>(?:exp)</strong> 零宽度负预测先行断言</p><p>  断言此位置的后面不能匹配表达式 <strong>exp</strong></p><p>  <strong>\d{3}(?:\d)</strong> 匹配后面不为数字的三位数</p></li><li><p><strong>(?&lt;:exp)</strong> 零宽度负回顾后发断言</p><p>  断言此位置出现的前面不能匹配子表达式 <strong>exp</strong></p><p>  <strong>(?&lt;:0)\d{7}</strong> 匹配前面非 <strong>0</strong> 的 7 位数字</p></li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>通过 <strong>(?#comment)</strong> 来包含注释，方便阅读。</p><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>正则表达式的匹配优先级：从左到右，并遵循优先级顺序。<br>从上到下优先级依次降低。</p><table><thead><tr><th>代码</th><th>说明</th></tr></thead><tbody><tr><td><center> \ </center></td><td><center> 转义符 </center></td></tr><tr><td><center> () (?:) (?=) [] </center></td><td><center> 括号，中括号 </center></td></tr><tr><td><center> * + ? {n} {n,} {n,m} </center></td><td><center> 限定符 </center></td></tr><tr><td><center> ^ $ \任意字符 </center></td><td><center> 定位点和序列 </center></td></tr><tr><td><center> &#124; </center></td><td><center> 替换选项 </center></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;心血來潮，又挖出正則表達式，順便整理下筆記。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;元字符&quot;&gt;&lt;a href=&quot;#元字符&quot; class=&quot;headerlink&quot; title=&quot;元字符&quot;&gt;&lt;/a&gt;元字符&lt;/h2&gt;&lt;p&gt;常用的元字符：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;语法&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\b&lt;/td&gt;
&lt;td&gt;匹配字边界&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\B&lt;/td&gt;
&lt;td&gt;匹配非字边界&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\d&lt;/td&gt;
&lt;td&gt;匹配数字字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\D&lt;/td&gt;
&lt;td&gt;匹配非数字字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\w&lt;/td&gt;
&lt;td&gt;匹配A-Z，a-z，0-9和下划线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\W&lt;/td&gt;
&lt;td&gt;匹配除以上任意&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://somnus13.github.io/categories/javascript/"/>
    
    
      <category term="正则表达式" scheme="https://somnus13.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Atom使用心得以及插件推荐</title>
    <link href="https://somnus13.github.io/2017/05/15/atom/"/>
    <id>https://somnus13.github.io/2017/05/15/atom/</id>
    <published>2017-05-15T13:45:42.000Z</published>
    <updated>2017-09-14T16:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>公司移动化办公的原因，导致我不得不抛弃台式转战笔记本。而租来的笔记本4G的内存导致我在编辑器上的选择有些捉襟见肘。</p></blockquote><p>家中台式编辑器一般都是使用 <strong>webstorm</strong>，精神洁癖的我每天就是自定义，修修改改。鉴于公司的笔记本，<strong>IDE</strong> 我觉得还是算了吧，一个 <strong>python</strong> 服务和一个 <strong>IDE</strong>，再加上一向吃内存就和喝水一样的谷歌浏览器，我已然已经预见了后果，唯有长按关机键才能拯救我。<br>所以：</p><ol><li>抛弃 <strong>IDE</strong>，不是因为功能不够强大，只是过于庞大</li><li>抛弃 <strong>sublime text</strong>，原因也有几点<ul><li><strong>package control</strong> 简直捉鸡，每次重装 <strong>貌似</strong> 都要重新安装一遍插件</li><li>某些插件有些捉鸡，例如常用插件 <strong>emmet</strong> 的 <strong>pyv8 error</strong></li><li>不能自动识别当前编辑项目类型。我就编辑 <strong>Python</strong> 项目里的一个 <strong>js</strong> 文件，那些 <strong>angular</strong>、<strong>react</strong> 之类的插件你可以安分点嘛</li><li>此外 <strong>sublime text3</strong> 的函数定位功能简直良心，虽然这会增加内存消耗</li></ul></li><li>然后刨到了 <strong>Atom</strong>，<strong>github</strong> 出品想来应该不差</li></ol><a id="more"></a><h2 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h2><p>正常流程的下载安装，略微有些不爽就是没让我选择安装选项，直接塞到了 <strong>C</strong> 盘。</p><p><strong>settings</strong> 设置编码格式，字体字号，行高，<strong>softtab</strong>，快捷键之类，然后就是 <strong>package</strong> 的安装了。<br>因为是 <strong>windows</strong> 平台，再加上个人有点懒，就直接 <strong>GUI</strong> 页面搜索安装了，如果你倾向于命令行模式，各个插件的说明里面都有注明。</p><p>注：插件的安装有时需要翻墙，最好还是挂起 <strong>vpn</strong> 然后一通 <strong>install</strong>。</p><h2 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h2><p>背景：<strong>windows7</strong>+<strong>Python</strong>+前端 仅此相关插件</p><h3 id="工具相关"><a href="#工具相关" class="headerlink" title="工具相关"></a>工具相关</h3><ul><li><p><a href="https://atom.io/packages/file-icons" target="_blank" rel="external"><strong>File Icons</strong></a> / <strong>File Icons</strong></p><p>  增加图标支持，虽然我不认为没有图标会影响开发体验，但是赏心悦目总不是坏事  </p><p>  <img src="http://oh1bdpr59.bkt.clouddn.com/2017-5-8%20/fileicon.png" alt="file icon"></p></li><li><p><a href="https://atom.io/packages/git-plus" target="_blank" rel="external"><strong>git-plus</strong></a> / <strong>git-plus</strong></p><p>  提供编辑器内 <strong>git</strong> 支持，需要配置 <strong>git.exe</strong> 路径</p><p>  <img src="http://oh1bdpr59.bkt.clouddn.com/2017-5-8%20/git-setting.png" alt="git-plus"></p><p>  使用方法：<strong>ctrl+shift+p</strong> 输入 <strong>git</strong> 命令</p><p>  <img src="http://oh1bdpr59.bkt.clouddn.com/2017-5-8%20/git.png" alt="git-plus"></p></li><li><p><a href="https://atom.io/packages/minimap" target="_blank" rel="external"><strong>minimap</strong></a> / <strong>minimap</strong></p><p>  <strong>sublime text</strong> 编辑器默认带的功能，快速定位代码？可能是的</p><p>  <img src="http://oh1bdpr59.bkt.clouddn.com/2017-5-8%20/minimap.png" alt="minimap"></p></li><li><p><a href="https://atom.io/packages/platformio-ide-terminal" target="_blank" rel="external"><strong>platformio-ide-terminal</strong></a> / <strong>platformio-ide-terminal</strong></p><p>  编辑器中集成命令行（ <strong>windows</strong> 平台），<strong>linux</strong> 平台用着不习惯，搜索 <strong>terminal</strong> 就能收到</p><p>  <img src="http://oh1bdpr59.bkt.clouddn.com/2017-5-8%20/terminal.png" alt="terminal"></p><p>  效果如图，可以自定义 <strong>Auto Run Command</strong>。<strong>service.bat</strong> 是自己写的启动 <strong>Python</strong> 项目的命令。</p></li><li><p><a href="https://atom.io/packages/vim-mode-plus" target="_blank" rel="external"><strong>vim-mode-plus</strong></a> / <strong>vim-mode-plus</strong></p><p>  <strong>vim</strong> 爱好者的福音，编辑器内支持 <strong>vim mode</strong>。<br>  此外 <strong>chrome</strong> 插件里面也有一款类似的插件 <strong>Vimium</strong>，命令示意如下</p><p>  <img src="http://oh1bdpr59.bkt.clouddn.com/2017-5-8%20/Vimium.png" alt="vim"></p></li><li><p><a href="https://atom.io/packages/sync-settings" target="_blank" rel="external"><strong>sync-settings</strong></a> / <strong>sync-settings</strong></p><p>  重头戏，<strong>sublime</strong> 的我不知道如何做好配置等的备份，<strong>atom</strong> 的这个插件简直爽到不行不行的，备份同步一气呵成。<br>  唯一需要注意的就是要做好 <strong>gistId</strong> 和 <strong>personalAccessToken</strong> 的配置。如果配置需要困难，移步<a href="">here</a>。</p><p>  <img src="http://oh1bdpr59.bkt.clouddn.com/2017-5-8%20/sync.png" alt="sync-settings"></p></li></ul><h3 id="前端相关"><a href="#前端相关" class="headerlink" title="前端相关"></a>前端相关</h3><ul><li><p><a href="https://atom.io/packages/emmet" target="_blank" rel="external"><strong>emmet</strong></a> / <strong>emmet</strong></p><p>  一款非常强大的代码提示插件，一个 <strong>tab</strong> 教你做人。至于 <strong>emmet</strong> 的相关命令，有一张<a href="http://om8da4hip.bkt.clouddn.com/sublime%20emmet%20%E9%80%9F%E6%9F%A5%E8%A1%A8/CheatSheet.jpg" target="_blank" rel="external">查询表</a>，适用大部分规则。</p></li><li><p><a href="https://atom.io/packages/autoprefixer" target="_blank" rel="external"><strong>autoprefixer</strong></a> / <strong>autoprefixer</strong></p><p>  自动添加兼容前缀插件，无需赘述。</p></li><li><p><a href="https://atom.io/packages/js-hyperclick" target="_blank" rel="external"><strong>js-hyperclick</strong></a> / <strong>js-hyperclick</strong></p><p>  js声明跳转插件，据说要和<a href="https://atom.io/packages/hyperclick" target="_blank" rel="external">hyperclick</a>搭配使用。</p></li><li><p><a href="https://atom.io/packages/jshint" target="_blank" rel="external"><strong>jshint</strong></a> / <strong>jshint</strong></p><p>  <strong>js</strong> 语法和风格的检查插件，帮助你规范编程习惯</p></li></ul><h3 id="Python相关"><a href="#Python相关" class="headerlink" title="Python相关"></a>Python相关</h3><p>不在赘述，单纯为了项目语言添加插件支持，名称显而易见。</p><ul><li><a href="https://atom.io/packages/autocomplete-python" target="_blank" rel="external"><strong>autocomplete-python</strong></a> / <strong>autocomplete-python</strong></li><li><a href="https://atom.io/packages/python-indent" target="_blank" rel="external"><strong>python-indent</strong></a> / <strong>python-indent</strong></li><li><a href="https://atom.io/packages/python-tools" target="_blank" rel="external"><strong>python-tools</strong></a> / <strong>python-tools</strong></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;公司移动化办公的原因，导致我不得不抛弃台式转战笔记本。而租来的笔记本4G的内存导致我在编辑器上的选择有些捉襟见肘。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;家中台式编辑器一般都是使用 &lt;strong&gt;webstorm&lt;/strong&gt;，精神洁癖的我每天就是自定义，修修改改。鉴于公司的笔记本，&lt;strong&gt;IDE&lt;/strong&gt; 我觉得还是算了吧，一个 &lt;strong&gt;python&lt;/strong&gt; 服务和一个 &lt;strong&gt;IDE&lt;/strong&gt;，再加上一向吃内存就和喝水一样的谷歌浏览器，我已然已经预见了后果，唯有长按关机键才能拯救我。&lt;br&gt;所以：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;抛弃 &lt;strong&gt;IDE&lt;/strong&gt;，不是因为功能不够强大，只是过于庞大&lt;/li&gt;
&lt;li&gt;抛弃 &lt;strong&gt;sublime text&lt;/strong&gt;，原因也有几点&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;package control&lt;/strong&gt; 简直捉鸡，每次重装 &lt;strong&gt;貌似&lt;/strong&gt; 都要重新安装一遍插件&lt;/li&gt;
&lt;li&gt;某些插件有些捉鸡，例如常用插件 &lt;strong&gt;emmet&lt;/strong&gt; 的 &lt;strong&gt;pyv8 error&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;不能自动识别当前编辑项目类型。我就编辑 &lt;strong&gt;Python&lt;/strong&gt; 项目里的一个 &lt;strong&gt;js&lt;/strong&gt; 文件，那些 &lt;strong&gt;angular&lt;/strong&gt;、&lt;strong&gt;react&lt;/strong&gt; 之类的插件你可以安分点嘛&lt;/li&gt;
&lt;li&gt;此外 &lt;strong&gt;sublime text3&lt;/strong&gt; 的函数定位功能简直良心，虽然这会增加内存消耗&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;然后刨到了 &lt;strong&gt;Atom&lt;/strong&gt;，&lt;strong&gt;github&lt;/strong&gt; 出品想来应该不差&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="tools" scheme="https://somnus13.github.io/categories/tools/"/>
    
    
      <category term="Atom" scheme="https://somnus13.github.io/tags/Atom/"/>
    
  </entry>
  
  <entry>
    <title>新的开始</title>
    <link href="https://somnus13.github.io/2017/05/06/new-start/"/>
    <id>https://somnus13.github.io/2017/05/06/new-start/</id>
    <published>2017-05-06T07:48:47.000Z</published>
    <updated>2017-09-14T16:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>脑子一热一抽筋把家里电脑换了个硬盘，重做了个系统..</p></blockquote><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>重装系统遇到阻碍，无奈格掉了硬盘，代之前的十几篇就随风而去了</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>还是原来的配方，不过已经变了味道。<br>在原先的博客分支添加了一个hexo分支用作本地未编译代码的备份，而另一个master分支则用于博客编译文件的push分支。<br>so，妈妈再也不担心我的代码因为各种原因丢失了。</p><h2 id="待做"><a href="#待做" class="headerlink" title="待做"></a>待做</h2><p>趁着这次机会算是让我好好的了解了一下github ssh同步代码的流程。<br>然后接下来就是单纯做个计划，计划下后来的几篇的内容。<br><a id="more"></a></p><ol><li>github 入门使用指南（单就常用的吧）</li><li>atom编辑器初尝心得与插件之类</li><li>git命令使用（公司办公一直GUI操作，总感觉自己是个假的git使用者）</li><li>内存管理，执行上下文，this，作用域作用域链，原型原型链之类（一直有再看，但是总感觉没入门，不能给别人讲清楚就算没懂吧）</li><li>整理一下正则表达式的笔记</li><li>等等<br>最近日语学的整个人有点发懒，都五月份了才想起改该好好学习了，惭愧..</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;脑子一热一抽筋把家里电脑换了个硬盘，重做了个系统..&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;重装系统遇到阻碍，无奈格掉了硬盘，代之前的十几篇就随风而去了&lt;/p&gt;
&lt;h2 id=&quot;解决&quot;&gt;&lt;a href=&quot;#解决&quot; class=&quot;headerlink&quot; title=&quot;解决&quot;&gt;&lt;/a&gt;解决&lt;/h2&gt;&lt;p&gt;还是原来的配方，不过已经变了味道。&lt;br&gt;在原先的博客分支添加了一个hexo分支用作本地未编译代码的备份，而另一个master分支则用于博客编译文件的push分支。&lt;br&gt;so，妈妈再也不担心我的代码因为各种原因丢失了。&lt;/p&gt;
&lt;h2 id=&quot;待做&quot;&gt;&lt;a href=&quot;#待做&quot; class=&quot;headerlink&quot; title=&quot;待做&quot;&gt;&lt;/a&gt;待做&lt;/h2&gt;&lt;p&gt;趁着这次机会算是让我好好的了解了一下github ssh同步代码的流程。&lt;br&gt;然后接下来就是单纯做个计划，计划下后来的几篇的内容。&lt;br&gt;
    
    </summary>
    
      <category term="杂记" scheme="https://somnus13.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>ES5新增数组方法</title>
    <link href="https://somnus13.github.io/2017/05/06/new-array-func-es5/"/>
    <id>https://somnus13.github.io/2017/05/06/new-array-func-es5/</id>
    <published>2017-05-06T06:47:09.000Z</published>
    <updated>2017-09-14T16:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES5新增数组方法"><a href="#ES5新增数组方法" class="headerlink" title="ES5新增数组方法"></a>ES5新增数组方法</h1><blockquote><p>ES5新增数组方法学习笔记。</p></blockquote><h2 id="Foreach"><a href="#Foreach" class="headerlink" title="Foreach"></a>Foreach</h2><p>接收一个函数作为参数，对数组进行循环遍历，而并不改变数组。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">array.forEach(callback(currentValue, index, array)&#123;</div><div class="line"></div><div class="line">&#125;,<span class="keyword">this</span>)</div><div class="line"></div><div class="line">array.forEach(callback[, thisArg])</div></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>forEach方法会对数组的有效值的每一项执行callback函数，已经删除或者未初始化的项会被跳过。而callback函数会被传入三个参数：</p><ul><li>数组当前项值</li><li>当前项的索引</li><li>数组对象本身</li></ul><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>];</div><div class="line">arr.forEach(<span class="built_in">console</span>.log);</div><div class="line"></div><div class="line"><span class="comment">//循环遍历功能等同于</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; len = arr.length,i &lt; len; i++)&#123;</div><div class="line">  <span class="built_in">console</span>.log(arr[i]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//期望输出</span></div><div class="line">a <span class="number">0</span> [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>]</div><div class="line">b <span class="number">1</span> [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>]</div><div class="line">c <span class="number">2</span> [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>]</div><div class="line">d <span class="number">3</span> [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>]</div><div class="line">a</div><div class="line">b</div><div class="line">c</div><div class="line">d</div></pre></td></tr></table></figure><p>区别就在于forEach回调返回了三个参数，如图</p><p><img src="http://oh1bdpr59.bkt.clouddn.com/blog/forEach.png" alt="chrome console"></p><p>而array.forEach(callback[, thisArg])方法中thisArg参数是可选的，如果指定则在执行回调时用作this的值，否则默认传入undefine。</p><h3 id="兼容polyfill"><a href="#兼容polyfill" class="headerlink" title="兼容polyfill"></a>兼容polyfill</h3><p>作为ES5新增方法，难免有些浏览器不支持，所以当我们使用时需要添加一段代码来帮助它兼容旧环境（polyfill）,代码来自MDN。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.forEach) &#123;</div><div class="line">  <span class="built_in">Array</span>.prototype.forEach = <span class="function"><span class="keyword">function</span> (<span class="params">callback,thisArg</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> T, k;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(<span class="keyword">this</span> == <span class="literal">null</span>)&#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'this is null or not defined'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> O = <span class="built_in">Object</span>(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">var</span> len = O.length &gt;&gt;&gt; <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback !== <span class="string">'function'</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(callback + <span class="string">'is not a function'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt; <span class="number">1</span>) &#123;</div><div class="line">      T = thisArg;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    k = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (k &lt; len) &#123;</div><div class="line">      <span class="keyword">var</span> kValue;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (k <span class="keyword">in</span> O) &#123;</div><div class="line">        kValue = O[k];</div><div class="line">        callback.call(T, kValue, k, O);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      k++;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>forEach无法在所有有效元素传递给回调函数之前终止（而for循环有break方法），如需提前终止，需要把forEach置于try语句块中，并抛出异常。</p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>用法同forEach基本相同，区别在于map方法返回一个新数组</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> new_array = arr.map(callback[, thisArg])</div></pre></td></tr></table></figure><h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><p>略.</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>略.</p><h3 id="兼容polyfill-1"><a href="#兼容polyfill-1" class="headerlink" title="兼容polyfill"></a>兼容polyfill</h3><p>区别于forEach():<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建新数组</span></div><div class="line"><span class="keyword">var</span> A = <span class="keyword">new</span> <span class="built_in">Array</span>(len);</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="comment">//保存callback返回值</span></div><div class="line">mappedValue = callback.call(T, kValue, k, O);</div><div class="line"></div><div class="line"><span class="comment">// 返回值添加到新数组A中.</span></div><div class="line">A[ k ] = mappedValue;</div><div class="line"></div><div class="line">...   </div><div class="line"></div><div class="line"><span class="comment">//返回新数组A</span></div><div class="line"><span class="keyword">return</span> A;      </div></pre></td></tr></table></figure></p><h2 id="Every"><a href="#Every" class="headerlink" title="Every"></a>Every</h2><p>every()接收一个返回值布尔类型的函数。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr.every(callback[, thisArg])</div></pre></td></tr></table></figure><h3 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h3><p>every方法为数组的每一项执行callback函数，不会改变原数组。如果所有项callback函数返回为true，则方法返回true，如果遇到一个返回值为false，则直接终止并返回false。<br>同样，callback方法只对那些有效值的项进行操作。<br>callback被调用传入三个函数：</p><ul><li>元素值</li><li>元素索引</li><li>数组对象本身</li></ul><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>检测是否为奇数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isOdd</span>(<span class="params">ele, index, arr</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> (ele % <span class="number">2</span> == <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">12</span>].every(isOdd);</div><div class="line"><span class="comment">//false</span></div><div class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>].every(isOdd);</div><div class="line"><span class="comment">//true</span></div></pre></td></tr></table></figure></p><h3 id="兼容polyfill-2"><a href="#兼容polyfill-2" class="headerlink" title="兼容polyfill"></a>兼容polyfill</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.every)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">Array</span>.prototype.every = <span class="function"><span class="keyword">function</span>(<span class="params">callback, thisArg</span>)</span>&#123;</div><div class="line">      <span class="keyword">if</span>(<span class="keyword">this</span> == <span class="literal">null</span>)&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'this is null or not defined'</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">var</span> T = <span class="built_in">Object</span>(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">      <span class="keyword">var</span> len = t.length &gt;&gt;&gt; <span class="number">0</span>;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> callback !== <span class="string">'function'</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(callback + <span class="string">'is not a function'</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">var</span> thisArg = <span class="built_in">arguments</span>.length &gt; <span class="number">1</span> ? thisArg : <span class="literal">null</span>;</div><div class="line"></div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)</div><div class="line">      &#123;</div><div class="line">        <span class="keyword">if</span> (i <span class="keyword">in</span> t &amp;&amp; !fun.call(thisArg, t[i], i, t))</div><div class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Some"><a href="#Some" class="headerlink" title="Some"></a>Some</h2><p>用法同every()基本相同，区别在于只要有一项callback函数返回值为true则方法返回true，否则为false。</p><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr.some(callback[, thisArg])</div></pre></td></tr></table></figure><h3 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h3><p>略.</p><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>略.</p><h3 id="兼容polyfill-3"><a href="#兼容polyfill-3" class="headerlink" title="兼容polyfill"></a>兼容polyfill</h3><p>略.区别只在于return值取反</p><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><p>接受一个回调函数作为累加器，数组中每个值开始缩减，最终为一个值，是ES5中新增的一个数组逐项处理方法。<br>reduce直译是缩减减少，函数定义以及实现个人感觉更像是递归。</p><h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr.reduce(callback[, initialValue])</div></pre></td></tr></table></figure><h3 id="参数-4"><a href="#参数-4" class="headerlink" title="参数"></a>参数</h3><p>reduce方法接收一个函数类型的回调函数和一个可选初始值参数</p><ul><li>callback 数组每一项的回调函数，接受4个参数<ul><li>accumulator 上一次调用的返回值或者初始值</li><li>currentValue 正在处理的数组元素</li><li>currentindex 正在处理的数组元素索引</li><li>array 数组元素本身</li></ul></li><li>initialValue 可选初始值参数，第一次调用传给accumulator</li></ul><p>回调函数第一次执行时，有两种情况，如果initialValue指定，则accumulator取值为initialValue，currentValue取值数组第一项，如果没有指定initialValue，<br>accumulator取值数组第一项，而currentValue取值数组第二项。</p><p>如果数组为空且没有提供initialValue，会抛出TypeError错误，如果仅有一个元素且没提供initialValue或者提供了initialValue数组为空，则直接返回，不会调用callback。</p><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><p>数组求和，数组扁平化，计算数组中值出现次数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//求和</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line"></div><div class="line">arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">pre, cur</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> pre + cur;</div><div class="line">&#125;,<span class="number">10</span>);</div><div class="line"></div><div class="line"><span class="comment">//20</span></div><div class="line"></div><div class="line"><span class="comment">//扁平化</span></div><div class="line"><span class="keyword">var</span> newArr = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]].reduce(<span class="function"><span class="keyword">function</span>(<span class="params">pre, cur</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> pre.concat(cur);</div><div class="line">&#125;,[]);</div><div class="line"></div><div class="line"><span class="comment">//[1, 2, 3, 4, 5, 6]</span></div><div class="line"></div><div class="line"><span class="comment">//计算重复值次数</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Ciel'</span>, <span class="string">'Dianel'</span>, <span class="string">'Alice'</span>, <span class="string">'Ciel'</span>, <span class="string">'Alice'</span>];</div><div class="line"></div><div class="line">arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">newObj ,key</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(key <span class="keyword">in</span> newObj)&#123;</div><div class="line">    newObj[key]++;</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    newObj[key] = <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> newObj;</div><div class="line">&#125;,&#123;&#125;);</div><div class="line"></div><div class="line"><span class="comment">//&#123;Alice: 3, Bob: 1, Ciel: 2, Dianel: 1&#125;</span></div></pre></td></tr></table></figure><br><img src="http://oh1bdpr59.bkt.clouddn.com/blog/reduce.png" alt="reduce"></p><h3 id="兼容polyfill-4"><a href="#兼容polyfill-4" class="headerlink" title="兼容polyfill"></a>兼容polyfill</h3><p>一如既往地代码来自MDN<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.reduce)</div><div class="line">&#123;</div><div class="line">  <span class="built_in">Array</span>.prototype.reduce = <span class="function"><span class="keyword">function</span>(<span class="params">callback <span class="regexp">/*, initialValue*/</span></span>) </span>&#123;</div><div class="line"><span class="meta">    'use strict'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> === <span class="literal">null</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Array.prototype.reduce called on null or undefined'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback !== <span class="string">'function'</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(callback + <span class="string">' is not a function'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> t = <span class="built_in">Object</span>(<span class="keyword">this</span>), len = t.length &gt;&gt;&gt; <span class="number">0</span>, k = <span class="number">0</span>, value;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt;= <span class="number">2</span>) &#123;</div><div class="line">      value = <span class="built_in">arguments</span>[<span class="number">1</span>];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">      <span class="keyword">while</span> (k &lt; len &amp;&amp; !(k <span class="keyword">in</span> t)) &#123;</div><div class="line">        k++;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (k &gt;= len) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Reduce of empty array with no initial value'</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      value = t[k++];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (; k &lt; len; k++) &#123;</div><div class="line">      <span class="keyword">if</span> (k <span class="keyword">in</span> t) &#123;</div><div class="line">        value = callback(value, t[k], k, t);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> value;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><p>同every()方法类似，回调函数参数相同，返回值为回调参数结果为true的所有项集合的数组。</p><h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr.filter(callback[, thisArg])</div></pre></td></tr></table></figure><h3 id="参数-5"><a href="#参数-5" class="headerlink" title="参数"></a>参数</h3><p>filter为数组中每一个<strong>有效值</strong>项调用callback函数，返回一个<strong>新数组</strong>，数组内容是callback返回值为true的元素的集合。</p><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><p>筛选奇数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isOdd</span>(<span class="params">ele</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> ele % <span class="number">2</span> == <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">[<span class="number">1</span>, <span class="number">54</span>, <span class="number">23</span>, <span class="number">44</span>, <span class="number">13</span>].filter(isOdd);</div><div class="line"></div><div class="line"><span class="comment">//[1, 23, 13]</span></div></pre></td></tr></table></figure></p><h3 id="兼容polyfill-5"><a href="#兼容polyfill-5" class="headerlink" title="兼容polyfill"></a>兼容polyfill</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.filter)</div><div class="line">&#123;</div><div class="line">  <span class="built_in">Array</span>.prototype.filter = <span class="function"><span class="keyword">function</span>(<span class="params">fun <span class="regexp">/*, thisArg */</span></span>)</span></div><div class="line"><span class="function">  </span>&#123;</div><div class="line"><span class="meta">    "use strict"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> === <span class="keyword">void</span> <span class="number">0</span> || <span class="keyword">this</span> === <span class="literal">null</span>)</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>();</div><div class="line"></div><div class="line">    <span class="keyword">var</span> t = <span class="built_in">Object</span>(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">var</span> len = t.length &gt;&gt;&gt; <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fun !== <span class="string">"function"</span>)</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>();</div><div class="line"></div><div class="line">    <span class="keyword">var</span> res = [];</div><div class="line">    <span class="keyword">var</span> thisArg = <span class="built_in">arguments</span>.length &gt;= <span class="number">2</span> ? <span class="built_in">arguments</span>[<span class="number">1</span>] : <span class="keyword">void</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">if</span> (i <span class="keyword">in</span> t)</div><div class="line">      &#123;</div><div class="line">        <span class="keyword">var</span> val = t[i];</div><div class="line"></div><div class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Technically this should Object.defineProperty at</span></div><div class="line">        <span class="comment">//       the next index, as push can be affected by</span></div><div class="line">        <span class="comment">//       properties on Object.prototype and Array.prototype.</span></div><div class="line">        <span class="comment">//       But that method's new, and collisions should be</span></div><div class="line">        <span class="comment">//       rare, so use the more-compatible alternative.</span></div><div class="line">        <span class="keyword">if</span> (fun.call(thisArg, val, i, t))</div><div class="line">          res.push(val);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ES5新增数组方法&quot;&gt;&lt;a href=&quot;#ES5新增数组方法&quot; class=&quot;headerlink&quot; title=&quot;ES5新增数组方法&quot;&gt;&lt;/a&gt;ES5新增数组方法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;ES5新增数组方法学习笔记。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Foreach&quot;&gt;&lt;a href=&quot;#Foreach&quot; class=&quot;headerlink&quot; title=&quot;Foreach&quot;&gt;&lt;/a&gt;Foreach&lt;/h2&gt;&lt;p&gt;接收一个函数作为参数，对数组进行循环遍历，而并不改变数组。&lt;/p&gt;
&lt;h3 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;array.forEach(callback(currentValue, index, array)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;,&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;array.forEach(callback[, thisArg])&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;参数&quot;&gt;&lt;a href=&quot;#参数&quot; class=&quot;headerlink&quot; title=&quot;参数&quot;&gt;&lt;/a&gt;参数&lt;/h3&gt;&lt;p&gt;forEach方法会对数组的有效值的每一项执行callback函数，已经删除或者未初始化的项会被跳过。而callback函数会被传入三个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数组当前项值&lt;/li&gt;
&lt;li&gt;当前项的索引&lt;/li&gt;
&lt;li&gt;数组对象本身&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://somnus13.github.io/categories/javascript/"/>
    
    
      <category term="ES5" scheme="https://somnus13.github.io/tags/ES5/"/>
    
  </entry>
  
</feed>
